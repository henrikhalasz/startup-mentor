{
  "documents": [
    "Startups in 13 Sentences\n\nStartups in 13 Sentences\n\nWant to start a startup?\n Get funded by\n\nY Combinator\n.\n\nWatch how this essay was\n\nwritten\n.\n\nFebruary 2009\nOne of the things I always tell startups is a principle I learned\nfrom Paul Buchheit: it's better to make a few people really happy\nthan to make a lot of people semi-happy. I was saying recently to\na reporter that if I could only tell",
    "recently to\na reporter that if I could only tell startups 10 things, this would\nbe one of them. Then I thought: what would the other 9 be?\nWhen I made the list there turned out to be 13:\n\n1. Pick good cofounders.\nCofounders are for a startup what location is for real estate. You\ncan change anything about a house except where it is. In a startup\nyou can change your idea easily, but changing your",
    "can change your idea easily, but changing your cofounders is\nhard. \n\n[\n1\n]\n\nAnd the success of a startup is almost always a function\nof its founders.\n2. Launch fast.\nThe reason to launch fast is not so much that it's critical to get\nyour product to market early, but that you haven't really started\nworking on it till you've launched. Launching teaches you what you\nshould have been building. Till",
    "you what you\nshould have been building. Till you know that you're wasting your\ntime. So the main value of whatever you launch with is as a pretext\nfor engaging users.\n3. Let your idea evolve.\nThis is the second half of launching fast. Launch fast and iterate.\nIt's a big mistake to treat a startup as if it were merely a matter\nof implementing some brilliant initial idea. As in an essay, most\nof the",
    "initial idea. As in an essay, most\nof the ideas appear in the implementing.\n4. Understand your users.\nYou can envision the wealth created by a startup as a rectangle,\nwhere one side is the number of users and the other is how much you\nimprove their lives.\n\n[\n2\n]\n\nThe second dimension is the one you have\nmost control over. And indeed, the growth in the first will be\ndriven by how well you do in the",
    "the first will be\ndriven by how well you do in the second. As in science, the hard\npart is not answering questions but asking them: the hard part is\nseeing something new that users lack. The better you understand\nthem the better the odds of doing that. That's why so many successful\nstartups make something the founders needed.\n5. Better to make a few users love you than a lot ambivalent.\nIdeally",
    "few users love you than a lot ambivalent.\nIdeally you want to make large numbers of users love you, but you\ncan't expect to hit that right away. Initially you have to choose\nbetween satisfying all the needs of a subset of potential users,\nor satisfying a subset of the needs of all potential users. Take\nthe first. It's easier to expand userwise than satisfactionwise.\nAnd perhaps more importantly,",
    "satisfactionwise.\nAnd perhaps more importantly, it's harder to lie to yourself. If\nyou think you're 85% of the way to a great product, how do you know\nit's not 70%? Or 10%? Whereas it's easy to know how many users\nyou have.\n6. Offer surprisingly good customer service.\nCustomers are used to being maltreated. Most of the companies they\ndeal with are quasi-monopolies that get away with atrocious",
    "are quasi-monopolies that get away with atrocious customer\nservice. Your own ideas about what's possible have been unconsciously\nlowered by such experiences. Try making your customer service not\nmerely good, but \n\nsurprisingly good\n. Go out of your way to make\npeople happy. They'll be overwhelmed; you'll see. In the earliest\nstages of a startup, it pays to offer customer service on a level\nthat",
    "it pays to offer customer service on a level\nthat wouldn't scale, because it's a way of learning about your\nusers.\n7. You make what you measure.\nI learned this one from Joe Kraus. \n\n[\n3\n]\n\nMerely measuring something\nhas an uncanny tendency to improve it. If you want to make your\nuser numbers go up, put a big piece of paper on your wall and every\nday plot the number of users. You'll be delighted",
    "plot the number of users. You'll be delighted when it goes up\nand disappointed when it goes down. Pretty soon you'll start\nnoticing what makes the number go up, and you'll start to do more\nof that. Corollary: be careful what you measure.\n8. Spend little.\nI can't emphasize enough how important it is for a startup to be cheap.\nMost startups fail before they make something people want, and the\nmost",
    "they make something people want, and the\nmost common form of failure is running out of money. So being cheap\nis (almost) interchangeable with iterating rapidly.\n\n[\n4\n]\n\nBut it's\nmore than that. A culture of cheapness keeps companies young in\nsomething like the way exercise keeps people young.\n9. Get ramen profitable.\n\"Ramen profitable\" means a startup makes just enough to pay the\nfounders' living",
    "makes just enough to pay the\nfounders' living expenses. It's not rapid prototyping for business\nmodels (though it can be), but more a way of hacking the investment\nprocess. Once you cross over into ramen profitable, it completely\nchanges your relationship with investors. It's also great for\nmorale.\n10. Avoid distractions.\nNothing kills startups like distractions. The worst type are those\nthat pay",
    "distractions. The worst type are those\nthat pay money: day jobs, consulting, profitable side-projects.\nThe startup may have more long-term potential, but you'll always\ninterrupt working on it to answer calls from people paying you now.\nParadoxically, \nfundraising\n is this type of distraction, so try to\nminimize that too.\n11. Don't get demoralized.\nThough the immediate cause of death in a startup",
    "the immediate cause of death in a startup tends to be running\nout of money, the underlying cause is usually lack of focus. Either\nthe company is run by stupid people (which can't be fixed with\nadvice) or the people are smart but got demoralized. Starting a\nstartup is a huge moral weight. Understand this and make a conscious\neffort not to be ground down by it, just as you'd be careful to\nbend at",
    "down by it, just as you'd be careful to\nbend at the knees when picking up a heavy box.\n12. Don't give up.\nEven if you get demoralized, \ndon't give up\n. You can get surprisingly\nfar by just not giving up. This isn't true in all fields. There\nare a lot of people who couldn't become good mathematicians no\nmatter how long they persisted. But startups aren't like that.\nSheer effort is usually enough,",
    "aren't like that.\nSheer effort is usually enough, so long as you keep morphing your\nidea.\n13. Deals fall through.\nOne of the most useful skills we learned from Viaweb was not getting\nour hopes up. We probably had 20 deals of various types fall\nthrough. After the first 10 or so we learned to treat deals as\nbackground processes that we should ignore till they terminated.\nIt's very dangerous to",
    "till they terminated.\nIt's very dangerous to morale to start to depend on deals closing,\nnot just because they so often don't, but because it makes them\nless likely to.\n\nHaving gotten it down to 13 sentences, I asked myself which I'd\nchoose if I could only keep one.\nUnderstand your users. That's the key. The essential task in a\nstartup is to create wealth; the dimension of wealth you have",
    "to create wealth; the dimension of wealth you have most\ncontrol over is how much you improve users' lives; and the hardest\npart of that is knowing what to make for them. Once you know what\nto make, it's mere effort to make it, and most decent hackers are\ncapable of that.\nUnderstanding your users is part of half the principles in this\nlist. That's the reason to launch early, to understand your",
    "the reason to launch early, to understand your users.\nEvolving your idea is the embodiment of understanding your users.\nUnderstanding your users well will tend to push you toward making\nsomething that makes a few people deeply happy. The most important\nreason for having surprisingly good customer service is that it\nhelps you understand your users. And understanding your users will\neven ensure your",
    "And understanding your users will\neven ensure your morale, because when everything else is collapsing\naround you, having just ten users who love you will keep you going.\nNotes\n[\n1\n]\nStrictly speaking it's impossible without a time machine.\n[\n2\n]\nIn practice it's more like a ragged comb.\n[\n3\n]\nJoe thinks one of the founders of Hewlett Packard said it first,\nbut he doesn't remember",
    "Packard said it first,\nbut he doesn't remember which.\n[\n4\n]\nThey'd be interchangeable if markets stood still. Since they\ndon't, working twice as fast is better than having twice as much\ntime.\nTurkish Translation\nSpanish Translation\nBulgarian Translation\nJapanese Translation\nPersian Translation",
    "Five Founders\n\nFive Founders\n\nApril 2009\nInc\n recently asked me who I thought were the 5 most\ninteresting startup founders of the last 30 years. How do\nyou decide who's the most interesting? The best test seemed\nto be influence: who are the 5\nwho've influenced me most? Who do I use as examples when I'm\ntalking to companies we fund? Who do I find myself quoting?\n1. Steve Jobs\nI'd guess Steve is the",
    "quoting?\n1. Steve Jobs\nI'd guess Steve is the most influential founder not just for me but\nfor most people you could ask. A lot of startup culture is Apple\nculture. He was the original young founder. And while the concept\nof \"insanely great\" already existed in the arts, it was a novel\nidea to introduce into a company in the 1980s.\nMore remarkable still, he's stayed interesting for 30 years.",
    "still, he's stayed interesting for 30 years. People\nawait new Apple products the way they'd await new books by a popular\nnovelist. Steve may not literally design them, but they wouldn't\nhappen if he weren't CEO.\nSteve is clever and driven, but so are a lot of people in the Valley.\nWhat makes him unique is his \n\nsense of \ndesign\n. Before him, most\ncompanies treated design as a frivolous extra.",
    "treated design as a frivolous extra. Apple's competitors\nnow know better.\n2. TJ Rodgers\nTJ Rodgers isn't as famous as Steve Jobs, but he may be the best\nwriter among Silicon Valley CEOs. I've probably learned more from\nhim about the startup way of thinking than from anyone else. Not\nso much from specific things he's written as by reconstructing the\nmind that produced them: brutally candid;",
    "the\nmind that produced them: brutally candid; aggressively garbage-collecting\noutdated ideas; and yet driven by pragmatism rather than ideology.\nThe first essay of his that I read was so electrifying that I\nremember exactly where I was at the time. It was \n\nHigh\nTechnology Innovation: Free Markets or Government Subsidies?\n and\nI was downstairs in the Harvard Square T Station. It felt as if\nsomeone",
    "Harvard Square T Station. It felt as if\nsomeone had flipped on a light switch inside my head.\n3. Larry & Sergey\nI'm sorry to treat Larry and Sergey as one person. I've always\nthought that was unfair to them. But it does seem as if Google was a\ncollaboration.\nBefore Google, companies in Silicon Valley already knew it was\nimportant to have the best hackers. So they claimed, at least.\nBut Google",
    "hackers. So they claimed, at least.\nBut Google pushed this idea further than anyone had before. Their\nhypothesis seems to have been that, in the initial stages at least,\n\nall\n you need is good hackers: if you hire all the smartest people\nand put them to work on a problem where their success can be measured,\nyou win. All the other stuff—which includes all the stuff that\nbusiness schools think",
    "includes all the stuff that\nbusiness schools think business consists of—you can figure out\nalong the way. The results won't be perfect, but they'll be optimal.\nIf this was their hypothesis, it's now been verified experimentally.\n4. Paul Buchheit\nFew know this, but one person, Paul Buchheit, is responsible for\nthree of the best things Google has done. He was the original\nauthor of GMail, which is",
    "He was the original\nauthor of GMail, which is the most impressive thing Google has after\nsearch. He also wrote the first prototype of AdSense, and was the\nauthor of Google's mantra \"Don't be evil.\"\nPB made a point in a talk once that I now mention to every startup\nwe fund: that it's better, initially, to make a small number of\nusers really love you than a large number kind of like you. If I\ncould",
    "than a large number kind of like you. If I\ncould tell startups only \n\nten sentences\n, \nthis would be one of them.\nNow he's cofounder of a startup called Friendfeed. It's only a\nyear old, but already everyone in the Valley is watching them.\nSomeone responsible for three of the biggest ideas at Google is\ngoing to come up with more.\n5. Sam Altman\nI was told I shouldn't mention founders of YC-funded",
    "was told I shouldn't mention founders of YC-funded companies in\nthis list. But Sam Altman can't be stopped by such flimsy rules.\nIf he wants to be on this list, he's going to be.\nHonestly, Sam is, along with Steve Jobs, the founder I refer to\nmost when I'm advising startups. On questions of design, I ask\n\"What would Steve do?\" but on questions of strategy or ambition I\nask \"What would Sama",
    "of strategy or ambition I\nask \"What would Sama do?\"\nWhat I learned from meeting Sama is that the doctrine of the elect\napplies to startups. It applies way less than most people think:\nstartup investing does not consist of trying to pick winners the\nway you might in a horse race. But there are a few people with\nsuch force of will that they're going to get whatever they want.",
    "6,631,372\n\n6,631,372\n\nMarch 2006, rev August 2009\nA couple days ago I found to my surprise that I'd been granted a\n\npatent\n.\nIt issued in 2003, but no one told me. I wouldn't know about it\nnow except that a few months ago, while visiting Yahoo, I happened\nto run into a Big Cheese I knew from working there in the late\nnineties. He brought up something called Revenue Loop, which Viaweb\nhad been",
    "called Revenue Loop, which Viaweb\nhad been working on when they bought us.\nThe idea is basically that you sort search results not in order of\ntextual \"relevance\" (as search engines did then) nor in order of\nhow much advertisers bid (as Overture did) but in order of the bid\ntimes the number of transactions. Ordinarily you'd do this for\nshopping searches, though in fact one of the features of our",
    "though in fact one of the features of our scheme\nis that it automatically detects which searches are shopping searches.\nIf you just order the results in order of bids, you can make the\nsearch results useless, because the first results could be dominated\nby lame sites that had bid the most. But if you order results by\nbid multiplied by transactions, far from selling out, you're getting\na \nbetter",
    "far from selling out, you're getting\na \nbetter\n measure of relevance. What could be a better sign that\nsomeone was satisfied with a search result than going to the site\nand buying something?\nAnd, of course, this algorithm automatically maximizes the revenue\nof the search engine.\nEveryone is focused on this type of approach now, but few were in\n1998. In 1998 it was all about selling banner ads. We",
    "In 1998 it was all about selling banner ads. We didn't know\nthat, so we were pretty excited when we figured out what seemed to\nus the optimal way of doing shopping searches.\nWhen Yahoo was thinking of buying us, we had a meeting with Jerry\nYang in New York. For him, I now realize, this was supposed to be\none of those meetings when you check out a company you've pretty\nmuch decided to buy, just to",
    "company you've pretty\nmuch decided to buy, just to make sure they're ok guys. We weren't\nexpected to do more than chat and seem smart and reasonable. He\nmust have been dismayed when I jumped up to the whiteboard and\nlaunched into a presentation of our exciting new technology.\nI was just as dismayed when he didn't seem to care at all about it.\nAt the time I thought, \"boy, is this guy poker-faced.",
    "the time I thought, \"boy, is this guy poker-faced. We present\nto him what has to be the optimal way of sorting product search\nresults, and he's not even curious.\" I didn't realize till much later\nwhy he didn't care. In 1998, advertisers were overpaying enormously\nfor ads on web sites. \nIn 1998, if advertisers paid the maximum that traffic was worth to\nthem, Yahoo's revenues would have",
    "was worth to\nthem, Yahoo's revenues would have \ndecreased.\nThings are different now, of course. Now this sort of thing is all\nthe rage. So when I ran into the Yahoo exec I knew from the old\ndays in the Yahoo cafeteria a few months ago, the first thing he\nremembered was not (fortunately) all the fights I had with him, but\nRevenue Loop.\n\"Well,\" I said, \"I think we actually applied for a patent on",
    "said, \"I think we actually applied for a patent on it.\nI'm not sure what happened to the application after I left.\"\n\"Really? That would be an important patent.\"\nSo someone investigated, and sure enough, that patent application\nhad continued in the pipeline for several years after, and finally\nissued in 2003.\nThe main thing that struck me on reading it, actually, is that\nlawyers at some point",
    "it, actually, is that\nlawyers at some point messed up my nice clear writing. Some clever\nperson with a spell checker reduced one section to Zen-like incomprehensibility:\n\n Also, common spelling errors will tend to get fixed. For example,\n if users searching for \"compact disc player\" end up spending\n considerable money at sites offering compact disc players, then\n those pages will have a higher",
    "disc players, then\n those pages will have a higher relevance for that search phrase,\n even though the phrase \"compact disc player\" is not present on\n those pages.\n\n(That \"compat disc player\" wasn't a typo, guys.)\nFor the fine prose of the original, see the provisional application\nof February 1998, back when we were still Viaweb and couldn't afford\nto pay lawyers to turn every \"a lot of\" into",
    "pay lawyers to turn every \"a lot of\" into \"considerable.\"",
    "Let the Other 95% of Great Programmers In\n\nLet the Other 95% of Great Programmers In\n\nDecember 2014\nAmerican technology companies want the government to make immigration\neasier because they say they can't find enough programmers in the\nUS. Anti-immigration people say that instead of letting foreigners\ntake these jobs, we should train more Americans to be programmers.\nWho's right?\nThe technology",
    "to be programmers.\nWho's right?\nThe technology companies are right. What the anti-immigration people\ndon't understand is that there is a huge variation in ability between\ncompetent programmers and exceptional ones, and while you can train\npeople to be competent, you can't train them to be exceptional.\nExceptional programmers have an aptitude for and \n\ninterest in\n\nprogramming that is not merely",
    "and \n\ninterest in\n\nprogramming that is not merely the product of training.\n\n[\n1\n]\nThe US has less than 5% of the world's population. Which means if\nthe qualities that make someone a great programmer are evenly\ndistributed, 95% of great programmers are born outside the US.\nThe anti-immigration people have to invent some explanation to\naccount for all the effort technology companies have expended",
    "all the effort technology companies have expended trying\nto make immigration easier. So they claim it's because they want\nto drive down salaries. But if you talk to startups, you find\npractically every one over a certain size has gone through legal\ncontortions to get programmers into the US, where they then\npaid them the same as they'd have paid an American. Why would they\ngo to extra trouble to",
    "an American. Why would they\ngo to extra trouble to get programmers for the same price? The\nonly explanation is that they're telling the truth: there are just\nnot enough great programmers to go around.\n\n[\n2\n]\nI asked the CEO of a startup with about 70 programmers how many\nmore he'd hire if he could get all the great programmers he wanted.\nHe said \"We'd hire 30 tomorrow morning.\" And this is one of",
    "hire 30 tomorrow morning.\" And this is one of the\nhot startups that always win recruiting battles. It's the same all\nover Silicon Valley. Startups are that constrained for talent.\nIt would be great if more Americans were trained as programmers,\nbut no amount of training can flip a ratio as overwhelming as 95\nto 5. Especially since programmers are being trained in other\ncountries too. Barring some",
    "being trained in other\ncountries too. Barring some cataclysm, it will always be true that\nmost great programmers are born outside the US. It will always be\ntrue that most people who are great at anything are born outside\nthe US.\n\n[\n3\n]\nExceptional performance implies immigration. A country with only\na few percent of the world's population will be exceptional in some\nfield only if there are a lot",
    "exceptional in some\nfield only if there are a lot of immigrants working in it.\nBut this whole discussion has taken something for granted: that if\nwe let more great programmers into the US, they'll want to come.\nThat's true now, and we don't realize how lucky we are that it is.\nIf we want to keep this option open, the best way to do it is to\ntake advantage of it: the more of the world's great",
    "advantage of it: the more of the world's great programmers are\nhere, the more the rest will want to come here.\nAnd if we don't, the US could be seriously fucked. I realize that's\nstrong language, but the people dithering about this don't seem to\nrealize the power of the forces at work here. Technology gives the\nbest programmers huge leverage. The world market in programmers\nseems to be becoming",
    "world market in programmers\nseems to be becoming dramatically more liquid. And since good\npeople like good colleagues, that means the best programmers could\ncollect in just a few hubs. Maybe mostly in one hub.\nWhat if most of the great programmers collected in one hub, and it\nwasn't here? That scenario may seem unlikely now, but it won't be\nif things change as much in the next 50 years as they did",
    "change as much in the next 50 years as they did in the\nlast 50.\nWe have the potential to ensure that the US remains a technology\nsuperpower just by letting in a few thousand great programmers a\nyear. What a colossal mistake it would be to let that opportunity\nslip. It could easily be the defining mistake this generation of\nAmerican politicians later become famous for. And unlike other\npotential",
    "become famous for. And unlike other\npotential mistakes on that scale, it costs nothing to fix.\nSo please, get on with it.\n\nNotes\n[\n1\n]\nHow much better is a great programmer than an ordinary one?\nSo much better that you can't even measure the difference directly.\nA great programmer doesn't merely do the same work faster. A great\nprogrammer will invent things an ordinary programmer would never\neven",
    "things an ordinary programmer would never\neven think of. This doesn't mean a great programmer is infinitely\nmore valuable, because any invention has a finite market value.\nBut it's easy to imagine cases where a great programmer might invent\nthings worth 100x or even 1000x an average programmer's salary.\n[\n2\n]\nThere are a handful of consulting firms that rent out big\npools of foreign programmers",
    "that rent out big\npools of foreign programmers they bring in on H1-B visas. By all\nmeans crack down on these. It should be easy to write legislation\nthat distinguishes them, because they are so different from technology\ncompanies. But it is dishonest of the anti-immigration people to\nclaim that companies like Google and Facebook are driven by the\nsame motives. An influx of inexpensive but mediocre",
    "motives. An influx of inexpensive but mediocre programmers\nis the last thing they'd want; it would destroy them.\n[\n3\n]\nThough this essay talks about programmers, the group of people\nwe need to import is broader, ranging from designers to programmers\nto electrical engineers. The best one could do as a general term\nmight be \"digital talent.\" It seemed better to make the argument a\nlittle too narrow",
    "better to make the argument a\nlittle too narrow than to confuse everyone with a neologism.\n\nThanks\n to Sam Altman, John Collison, Patrick Collison, Jessica\nLivingston, Geoff Ralston, Fred Wilson, and Qasar Younis for reading\ndrafts of this.\nSpanish Translation",
    "Billionaires Build\n\nBillionaires Build\n\nDecember 2020\nAs I was deciding what to write about next, I was surprised to find\nthat two separate essays I'd been planning to write were actually\nthe same.\nThe first is about how to ace your Y Combinator interview. There\nhas been so much nonsense written about this topic that I've been\nmeaning for years to write something telling founders the truth.\nThe",
    "to write something telling founders the truth.\nThe second is about something politicians sometimes say  that the\nonly way to become a billionaire is by exploiting people  and why\nthis is mistaken.\nKeep reading, and you'll learn both simultaneously.\nI know the politicians are mistaken because it was my job to predict\nwhich people will become billionaires. I think I can truthfully say\nthat I know",
    "I think I can truthfully say\nthat I know as much about how to do this as anyone. If the key to\nbecoming a billionaire  the defining feature of billionaires \nwas to exploit people, then I, as a professional billionaire scout,\nwould surely realize this and look for people who would be good at\nit, just as an NFL scout looks for speed in wide receivers.\nBut aptitude for exploiting people is not what",
    "aptitude for exploiting people is not what Y Combinator looks\nfor at all. In fact, it's the opposite of what they look for. I'll\ntell you what they do look for, by explaining how to convince \nY Combinator to fund you, and you can see for yourself.\nWhat YC looks for, above all, is founders who understand some group\nof users and can make what they want. This is so important that\nit's YC's motto:",
    "want. This is so important that\nit's YC's motto: \"Make something people want.\"\nA big company can to some extent force unsuitable products on\nunwilling customers, but a startup doesn't have the power to do\nthat. A startup must sing for its supper, by making things that\ngenuinely delight its customers. Otherwise it will never get off\nthe ground.\nHere's where things get difficult, both for you as a",
    "where things get difficult, both for you as a founder and\nfor the YC partners trying to decide whether to fund you. In a\nmarket economy, it's hard to make something people want that they\ndon't already have. That's the great thing about market economies.\nIf other people both knew about this need and were able to satisfy\nit, they already would be, and there would be no room for your\nstartup.\nWhich",
    "and there would be no room for your\nstartup.\nWhich means the conversation during your YC interview will have to\nbe about something new: either a new need, or a new way to satisfy\none. And not just new, but uncertain. If it were certain that the\nneed existed and that you could satisfy it, that certainty would\nbe reflected in large and rapidly growing revenues, and you wouldn't\nbe seeking seed",
    "growing revenues, and you wouldn't\nbe seeking seed funding.\nSo the YC partners have to guess both whether you've discovered a\nreal need, and whether you'll be able to satisfy it. That's what they\nare, at least in this part of their job: professional guessers.\nThey have 1001 heuristics for doing this, and I'm not going to tell\nyou all of them, but I'm happy to tell you the most important",
    "them, but I'm happy to tell you the most important ones,\nbecause these can't be faked; the only way to \"hack\" them would be\nto do what you should be doing anyway as a founder.\nThe first thing the partners will try to figure out, usually, is\nwhether what you're making will ever be something a lot of people\nwant. It doesn't have to be something a lot of people want now.\nThe product and the market",
    "lot of people want now.\nThe product and the market will both evolve, and will influence\neach other's evolution. But in the end there has to be something\nwith a huge market. That's what the partners will be trying to\nfigure out: is there a path to a huge market?\n\n[\n1\n]\nSometimes it's obvious there will be a huge market. If \n\nBoom\n manages\nto ship an airliner at all, international airlines will have",
    "airliner at all, international airlines will have to buy\nit. But usually it's not obvious. Usually the path to a huge market\nis by growing a small market. This idea is important enough that\nit's worth coining a phrase for, so let's call one of these small\nbut growable markets a \"larval market.\"\nThe perfect example of a larval market might be Apple's market when\nthey were founded in 1976. In 1976,",
    "market when\nthey were founded in 1976. In 1976, not many people wanted their\nown computer. But more and more started to want one, till now every\n10 year old on the planet wants a computer (but calls it a \"phone\").\nThe ideal combination is the group of founders who are \n\n\"living in\nthe future\"\n in the sense of being at the leading edge of some kind\nof change, and who are building something they",
    "change, and who are building something they themselves want.\nMost super-successful startups are of this type. Steve Wozniak\nwanted a computer. Mark Zuckerberg wanted to engage online with his\ncollege friends. Larry and Sergey wanted to find things on the web.\nAll these founders were building things they and their peers wanted,\nand the fact that they were at the leading edge of change meant\nthat",
    "they were at the leading edge of change meant\nthat more people would want these things in the future.\nBut although the ideal larval market is oneself and one's peers,\nthat's not the only kind. A larval market might also be regional,\nfor example. You build something to serve one location, and then\nexpand to others.\nThe crucial feature of the initial market is that it exist. That\nmay seem like an",
    "market is that it exist. That\nmay seem like an obvious point, but the lack of it is the biggest\nflaw in most startup ideas. There have to be some people who want\nwhat you're building right now, and want it so urgently that they're\nwilling to use it, bugs and all, even though you're a small company\nthey've never heard of. There don't have to be many, but there have\nto be some. As long as you have",
    "but there have\nto be some. As long as you have some users, there are straightforward\nways to get more: build new features they want, seek out more people\nlike them, get them to refer you to their friends, and so on. But\nthese techniques all require some initial seed group of users.\nSo this is one thing the YC partners will almost certainly dig into\nduring your interview. Who are your first users",
    "your interview. Who are your first users going to be, and\nhow do you know they want this? If I had to decide whether to fund\nstartups based on a single question, it would be \"How do you know\npeople want this?\"\nThe most convincing answer is \"Because we and our friends want it.\"\nIt's even better when this is followed by the news that you've\nalready built a prototype, and even though it's very crude,",
    "a prototype, and even though it's very crude, your\nfriends are using it, and it's spreading by word of mouth. If you\ncan say that and you're not lying, the partners will switch from\ndefault no to default yes. Meaning you're in unless there's some\nother disqualifying flaw.\nThat is a hard standard to meet, though. Airbnb didn't meet it.\nThey had the first part. They had made something they",
    "had the first part. They had made something they themselves\nwanted. But it wasn't spreading. So don't feel bad if you don't hit\nthis gold standard of convincingness. If Airbnb didn't hit it, it\nmust be too high.\nIn practice, the YC partners will be satisfied if they feel that\nyou have a deep understanding of your users' needs. And the Airbnbs\ndid have that. They were able to tell us all about what",
    "that. They were able to tell us all about what motivated\nhosts and guests. They knew from first-hand experience, because\nthey'd been the first hosts. We couldn't ask them a question they\ndidn't know the answer to. We ourselves were not very excited about\nthe idea as users, but we knew this didn't prove anything, because\nthere were lots of successful startups we hadn't been excited about\nas users.",
    "startups we hadn't been excited about\nas users. We were able to say to ourselves \"They seem to know what\nthey're talking about. Maybe they're onto something. It's not growing\nyet, but maybe they can figure out how to make it grow during YC.\"\nWhich they did, about three weeks into the batch.\nThe best thing you can do in a YC interview is to teach the partners\nabout your users. So if you want to",
    "the partners\nabout your users. So if you want to prepare for your interview, one of the best \nways to do it is to go talk to your users and find out exactly what\nthey're thinking. Which is what you should be doing anyway.\nThis may sound strangely credulous, but the YC partners want to\nrely on the founders to tell them about the market. Think about\nhow VCs typically judge the potential market for",
    "VCs typically judge the potential market for an idea. They're\nnot ordinarily domain experts themselves, so they forward the idea\nto someone who is, and ask for their opinion. YC doesn't have time\nto do this, but if the YC partners can convince themselves that the\nfounders both (a) know what they're talking about and (b) aren't\nlying, they don't need outside domain experts. They can use",
    "don't need outside domain experts. They can use the\nfounders themselves as domain experts when evaluating their own\nidea.\nThis is why YC interviews aren't pitches. To give as many founders\nas possible a chance to get funded, we made interviews as short as\nwe could: 10 minutes. That is not enough time for the partners to\nfigure out, through the indirect evidence in a pitch, whether you\nknow what",
    "evidence in a pitch, whether you\nknow what you're talking about and aren't lying. They need to dig\nin and ask you questions. There's not enough time for sequential\naccess. They need random access.\n\n[\n2\n]\nThe worst advice I ever heard about how to succeed in a YC interview\nis that you should take control of the interview and make sure to\ndeliver the message you want to. In other words, turn the",
    "the message you want to. In other words, turn the interview\ninto a pitch. &langle;elaborate expletive&rangle;. It is so annoying when people\ntry to do that. You ask them a question, and instead of answering\nit, they deliver some obviously prefabricated blob of pitch. It\neats up 10 minutes really fast.\nThere is no one who can give you accurate advice about what to do\nin a YC interview except a",
    "advice about what to do\nin a YC interview except a current or former YC partner. People\nwho've merely been interviewed, even successfully, have no idea of\nthis, but interviews take all sorts of different forms depending\non what the partners want to know about most. Sometimes they're all\nabout the founders, other times they're all about the idea. Sometimes\nsome very narrow aspect of the idea.",
    "Sometimes\nsome very narrow aspect of the idea. Founders sometimes walk away\nfrom interviews complaining that they didn't get to explain their\nidea completely. True, but they explained enough.\nSince a YC interview consists of questions, the way to do it well\nis to answer them well. Part of that is answering them candidly.\nThe partners don't expect you to know everything. But if you don't\nknow the",
    "you to know everything. But if you don't\nknow the answer to a question, don't try to bullshit your way out\nof it. The partners, like most experienced investors, are professional\nbullshit detectors, and you are (hopefully) an amateur bullshitter.\nAnd if you try to bullshit them and fail, they may not even tell\nyou that you failed. So it's better to be honest than to try to\nsell them. If you don't",
    "be honest than to try to\nsell them. If you don't know the answer to a question, say you\ndon't, and tell them how you'd go about finding it, or tell them\nthe answer to some related question.\nIf you're asked, for example, what could go wrong, the worst possible\nanswer is \"nothing.\" Instead of convincing them that your idea is\nbullet-proof, this will convince them that you're a fool or a liar.\nFar",
    "convince them that you're a fool or a liar.\nFar better to go into gruesome detail. That's what experts do when\nyou ask what could go wrong. The partners know that your idea is\nrisky. That's what a good bet looks like at this stage: a tiny\nprobability of a huge outcome.\nDitto if they ask about competitors. Competitors are rarely what\nkills startups. Poor execution does. But you should know who",
    "Poor execution does. But you should know who your\ncompetitors are, and tell the YC partners candidly what your relative\nstrengths and weaknesses are. Because the YC partners know that\ncompetitors don't kill startups, they won't hold competitors against\nyou too much. They will, however, hold it against you if you seem\neither to be unaware of competitors, or to be minimizing the threat\nthey pose.",
    "or to be minimizing the threat\nthey pose. They may not be sure whether you're clueless or lying,\nbut they don't need to be.\nThe partners don't expect your idea to be perfect. This is seed\ninvesting. At this stage, all they can expect are promising hypotheses.\nBut they do expect you to be thoughtful and honest. So if trying\nto make your idea seem perfect causes you to come off as glib or\nclueless,",
    "causes you to come off as glib or\nclueless, you've sacrificed something you needed for something you\ndidn't.\nIf the partners are sufficiently convinced that there's a path to\na big market, the next question is whether you'll be able to find\nit. That in turn depends on three things: the general qualities of\nthe founders, their specific expertise in this domain, and the\nrelationship between them.",
    "in this domain, and the\nrelationship between them. How determined are the founders? Are\nthey good at building things? Are they resilient enough to keep\ngoing when things go wrong? How strong is their friendship?\nThough the Airbnbs only did ok in the idea department, they did\nspectacularly well in this department. The story of how they'd\nfunded themselves by making Obama- and McCain-themed",
    "themselves by making Obama- and McCain-themed breakfast\ncereal was the single most important factor in our decision to fund\nthem. They didn't realize it at the time, but what seemed to them\nan irrelevant story was in fact fabulously good evidence of their\nqualities as founders. It showed they were resourceful and determined,\nand could work together.\nIt wasn't just the cereal story that showed",
    "wasn't just the cereal story that showed that, though. The whole\ninterview showed that they cared. They weren't doing this just for\nthe money, or because startups were cool. The reason they were\nworking so hard on this company was because it was their project.\nThey had discovered an interesting new idea, and they just couldn't\nlet it go.\nMundane as it sounds, that's the most powerful motivator of",
    "it sounds, that's the most powerful motivator of all,\nnot just in startups, but in most ambitious undertakings: to be\n\ngenuinely interested\n in what \nyou're building. This is what really\ndrives billionaires, or at least the ones who become billionaires\nfrom starting companies. The company is their project.\nOne thing few people realize about billionaires is that all of them\ncould have stopped",
    "is that all of them\ncould have stopped sooner. They could have gotten acquired, or found\nsomeone else to run the company. Many founders do. The ones who\nbecome really rich are the ones who keep working. And what makes\nthem keep working is not just money. What keeps them working is the\nsame thing that keeps anyone else working when they could stop if\nthey wanted to: that there's nothing else they'd",
    "wanted to: that there's nothing else they'd rather do.\nThat, not exploiting people, is the defining quality of people who\nbecome billionaires from starting companies. So that's what YC looks\nfor in founders: authenticity. People's motives for starting startups\nare usually mixed. They're usually doing it from some combination\nof the desire to make money, the desire to seem cool, genuine\ninterest in",
    "the desire to seem cool, genuine\ninterest in the problem, and unwillingness to work for someone else.\nThe last two are more powerful motivators than the first two. It's\nok for founders to want to make money or to seem cool. Most do.\nBut if the founders seem like they're doing it \njust\n to make money\nor \njust\n to seem cool, they're not likely to succeed on a big\nscale. The founders who are doing it",
    "on a big\nscale. The founders who are doing it for the money will take the\nfirst sufficiently large acquisition offer, and the ones who are\ndoing it to seem cool will rapidly discover that there are much\nless painful ways of seeming cool.\n\n[\n3\n]\nY Combinator certainly sees founders whose m.o. is to exploit people.\nYC is a magnet for them, because they want the YC brand. But when\nthe YC partners",
    "they want the YC brand. But when\nthe YC partners detect someone like that, they reject them. If bad\npeople made good founders, the YC partners would face a moral\ndilemma. Fortunately they don't, because bad people make bad founders.\nThis exploitative type of founder is not going to succeed on a large\nscale, and in fact probably won't even succeed on a small one,\nbecause they're always going to be",
    "on a small one,\nbecause they're always going to be taking shortcuts. They see YC\nitself as a shortcut.\nTheir exploitation usually begins with their own cofounders, which\nis disastrous, since the cofounders' relationship is the foundation\nof the company. Then it moves on to the users, which is also\ndisastrous, because the sort of early adopters a successful startup\nwants as its initial users are",
    "successful startup\nwants as its initial users are the hardest to fool. The best this\nkind of founder can hope for is to keep the edifice of deception\ntottering along until some acquirer can be tricked into buying it.\nBut that kind of acquisition is never very big.\n\n[\n4\n]\nIf professional billionaire scouts know that exploiting people is\nnot the skill to look for, why do some politicians think this",
    "to look for, why do some politicians think this is\nthe defining quality of billionaires?\nI think they start from the feeling that it's wrong that one person\ncould have so much more money than another. It's understandable\nwhere that feeling comes from. It's in our DNA, and even in the DNA\nof other species.\nIf they limited themselves to saying that it made them feel bad\nwhen one person had so much",
    "it made them feel bad\nwhen one person had so much more money than other people, who would\ndisagree? It makes me feel bad too, and I think people who make a\nlot of money have a moral obligation to use it for the common good.\nThe mistake they make is to jump from feeling bad that some people\nare much richer than others to the conclusion that there's no\nlegitimate way to make a very large amount of",
    "no\nlegitimate way to make a very large amount of money. Now we're\ngetting into statements that are not only falsifiable, but false.\nThere are certainly some people who become rich by doing bad things.\nBut there are also plenty of people who behave badly and don't make\nthat much from it. There is no correlation  in fact, probably an\ninverse correlation  between how badly you behave and how",
    "correlation  between how badly you behave and how much\nmoney you make.\nThe greatest danger of this nonsense may not even be that it sends\npolicy astray, but that it misleads ambitious people. Can you imagine\na better way to destroy social mobility than by telling poor kids\nthat the way to get rich is by exploiting people, while the rich\nkids know, from having watched the preceding generation do",
    "from having watched the preceding generation do it, how\nit's really done?\nI'll tell you how it's really done, so you can at least tell your\nown kids the truth. It's all about users. The most reliable way to\nbecome a billionaire is to start a company that \n\ngrows fast\n, and the\nway to grow fast is to make what users want. Newly started startups\nhave no choice but to delight users, or they'll never",
    "no choice but to delight users, or they'll never even get\nrolling. But this never stops being the lodestar, and bigger companies\ntake their eye off it at their peril. Stop delighting users, and\neventually someone else will.\nUsers are what the partners want to\nknow about in YC interviews, and what I want to know about when I\ntalk to founders that we funded ten years ago and who are",
    "founders that we funded ten years ago and who are billionaires\nnow. What do users want? What new things could you build for them?\nFounders who've become billionaires are always eager to talk about\nthat topic. That's how they became billionaires.\nNotes\n[\n1\n]\nThe YC partners have so much practice doing this that they\nsometimes see paths that the founders themselves haven't seen yet.\nThe partners",
    "founders themselves haven't seen yet.\nThe partners don't try to seem skeptical, as buyers in transactions\noften do to increase their leverage. Although the founders feel\ntheir job is to convince the partners of the potential of their\nidea, these roles are not infrequently reversed, and the founders\nleave the interview feeling their idea has more potential than they\nrealized.\n[\n2\n]\nIn practice, 7",
    "potential than they\nrealized.\n[\n2\n]\nIn practice, 7 minutes would be enough. You rarely change your\nmind at minute 8. But 10 minutes is socially convenient.\n[\n3\n]\nI myself took the first sufficiently large acquisition offer\nin my first startup, so I don't blame founders for doing this.\nThere's nothing wrong with starting a startup to make money. You\nneed to make money somehow, and for some people",
    "to make money somehow, and for some people startups are the\nmost efficient way to do it. I'm just saying that these are not the\nstartups that get really big.\n[\n4\n]\nNot these days, anyway. There were some big ones during the\nInternet Bubble, and indeed some big IPOs.\nThanks\n to Trevor Blackwell, Jessica Livingston, Robert Morris, Geoff Ralston, and\nHarj Taggar for reading drafts of this.",
    "The Acceleration of Addictiveness\n\nThe Acceleration of Addictiveness\n\nJuly 2010\nWhat hard liquor, cigarettes, heroin, and crack have in common is\nthat they're all more concentrated forms of less addictive predecessors.\nMost if not all the things we describe as addictive are. And the\nscary thing is, the process that created them is accelerating.\nWe wouldn't want to stop it. It's the same process",
    "wouldn't want to stop it. It's the same process that cures\ndiseases: technological progress. Technological progress means\nmaking things do more of what we want. When the thing we want is\nsomething we want to want, we consider technological progress good.\nIf some new technique makes solar cells x% more efficient, that\nseems strictly better. When progress concentrates something we\ndon't want to want",
    "concentrates something we\ndon't want to want — when it transforms opium into heroin — it seems\nbad. But it's the same process at work.\n\n[\n1\n]\nNo one doubts this process is accelerating, which means increasing\nnumbers of things we like will be transformed into things we like\ntoo much.\n\n[\n2\n]\nAs far as I know there's no word for something we like too much.\nThe closest is the colloquial sense of",
    "too much.\nThe closest is the colloquial sense of \"addictive.\" That usage has\nbecome increasingly common during my lifetime. And it's clear why:\nthere are an increasing number of things we need it for. At the\nextreme end of the spectrum are crack and meth. Food has been\ntransformed by a combination of factory farming and innovations in\nfood processing into something with way more immediate bang for",
    "into something with way more immediate bang for the\nbuck, and you can see the results in any town in America. Checkers\nand solitaire have been replaced by World of Warcraft and FarmVille.\nTV has become much more engaging, and even so it \ncan't compete\n with Facebook.\nThe world is more addictive than it was 40 years ago. And unless\nthe forms of technological progress that produced these things",
    "technological progress that produced these things are\nsubject to different laws than technological progress in general,\nthe world will get more addictive in the next 40 years than it did\nin the last 40.\nThe next 40 years will bring us some wonderful things. I don't\nmean to imply they're all to be avoided. Alcohol is a dangerous\ndrug, but I'd rather live in a world with wine than one without.\nMost",
    "live in a world with wine than one without.\nMost people can coexist with alcohol; but you have to be careful.\nMore things we like will mean more things we have to be careful\nabout.\nMost people won't, unfortunately. Which means that as the world\nbecomes more addictive, the two senses in which one can live a\nnormal life will be driven ever further apart. One sense of \"normal\"\nis statistically",
    "apart. One sense of \"normal\"\nis statistically normal: what everyone else does. The other is the\nsense we mean when we talk about the normal operating range of a\npiece of machinery: what works best.\nThese two senses are already quite far apart. Already someone\ntrying to live well would seem eccentrically abstemious in most of\nthe US. That phenomenon is only going to become more pronounced.\nYou can",
    "is only going to become more pronounced.\nYou can probably take it as a rule of thumb from now on that if\npeople don't think you're weird, you're living badly.\nSocieties eventually develop antibodies to addictive new things.\nI've seen that happen with cigarettes. When cigarettes first\nappeared, they spread the way an infectious disease spreads through\na previously isolated population. Smoking",
    "through\na previously isolated population. Smoking rapidly became a\n(statistically) normal thing. There were ashtrays everywhere. We\nhad ashtrays in our house when I was a kid, even though neither of\nmy parents smoked. You had to for guests.\nAs knowledge spread about the dangers of smoking, customs changed.\nIn the last 20 years, smoking has been transformed from something\nthat seemed totally normal",
    "from something\nthat seemed totally normal into a rather seedy habit: from something\nmovie stars did in publicity shots to something small huddles of\naddicts do outside the doors of office buildings. A lot of the\nchange was due to legislation, of course, but the legislation\ncouldn't have happened if customs hadn't already changed.\nIt took a while though—on the order of 100 years. And unless",
    "while though—on the order of 100 years. And unless the\nrate at which social antibodies evolve can increase to match the\naccelerating rate at which technological progress throws off new\naddictions, we'll be increasingly unable to rely on customs to\nprotect us.\n\n[\n3\n]\n\nUnless we want to be canaries in the coal mine\nof each new addiction—the people whose sad example becomes a\nlesson to future",
    "whose sad example becomes a\nlesson to future generations—we'll have to figure out for ourselves\nwhat to avoid and how. It will actually become a reasonable strategy\n(or a more reasonable strategy) to suspect \n\neverything new\n.\nIn fact, even that won't be enough. We'll have to worry not just\nabout new things, but also about existing things becoming more\naddictive. That's what bit me. I've avoided",
    "more\naddictive. That's what bit me. I've avoided most addictions, but\nthe Internet got me because it became addictive while I was using\nit.\n\n[\n4\n]\nMost people I know have problems with Internet addiction. We're\nall trying to figure out our own customs for getting free of it.\nThat's why I don't have an iPhone, for example; the last thing I\nwant is for the Internet to follow me out into the",
    "is for the Internet to follow me out into the world.\n\n[\n5\n]\n\nMy latest trick is taking long hikes. I used to think running was a\nbetter form of exercise than hiking because it took less time. Now\nthe slowness of hiking seems an advantage, because the longer I\nspend on the trail, the longer I have to think without interruption.\nSounds pretty eccentric, doesn't it? It always will when you're\ntrying",
    "doesn't it? It always will when you're\ntrying to solve problems where there are no customs yet to guide\nyou. Maybe I can't plead Occam's razor; maybe I'm simply eccentric.\nBut if I'm right about the acceleration of addictiveness, then this\nkind of lonely squirming to avoid it will increasingly be the fate\nof anyone who wants to get things done. We'll increasingly be\ndefined by what we say no",
    "We'll increasingly be\ndefined by what we say no to.\n\nNotes\n[\n1\n]\nCould you restrict technological progress to areas where you\nwanted it? Only in a limited way, without becoming a police state.\nAnd even then your restrictions would have undesirable side effects.\n\"Good\" and \"bad\" technological progress aren't sharply differentiated,\nso you'd find you couldn't slow the latter without also slowing",
    "you couldn't slow the latter without also slowing the\nformer. And in any case, as Prohibition and the \"war on drugs\"\nshow, bans often do more harm than good.\n[\n2\n]\nTechnology has always been accelerating. By Paleolithic\nstandards, technology evolved at a blistering pace in the Neolithic\nperiod.\n[\n3\n]\nUnless we mass produce social customs. I suspect the recent\nresurgence of evangelical Christianity",
    "the recent\nresurgence of evangelical Christianity in the US is partly a reaction\nto drugs. In desperation people reach for the sledgehammer; if\ntheir kids won't listen to them, maybe they'll listen to God. But\nthat solution has broader consequences than just getting kids to\nsay no to drugs. You end up saying no to \n\nscience\n as well.\n\nI worry we may be heading for a future in which only a few",
    "we may be heading for a future in which only a few people\nplot their own itinerary through no-land, while everyone else books\na package tour. Or worse still, has one booked for them by the\ngovernment.\n[\n4\n]\nPeople commonly use the word \"procrastination\" to describe\nwhat they do on the Internet. It seems to me too mild to describe\nwhat's happening as merely not-doing-work. We don't call",
    "happening as merely not-doing-work. We don't call it\nprocrastination when someone gets drunk instead of working.\n[\n5\n]\nSeveral people have told me they like the iPad because it\nlets them bring the Internet into situations where a laptop would\nbe too conspicuous. In other words, it's a hip flask. (This is\ntrue of the iPhone too, of course, but this advantage isn't as\nobvious because it reads as a",
    "advantage isn't as\nobvious because it reads as a phone, and everyone's used to those.)\nThanks\n to Sam Altman, Patrick Collison, Jessica Livingston, and\nRobert Morris for reading drafts of this.",
    "Subject: Airbnb\n\nSubject: Airbnb\n\nMarch 2011\nYesterday Fred Wilson published a remarkable \npost\n about missing\n\nAirbnb\n. VCs miss good startups all the time, but it's extraordinarily\nrare for one to talk about it publicly till long afterward. So\nthat post is further evidence what a rare bird Fred is. He's\nprobably the nicest VC I know.\nReading Fred's post made me go back and look at the emails I",
    "post made me go back and look at the emails I exchanged\nwith him at the time, trying to convince him to invest in Airbnb.\nIt was quite interesting to read. You can see Fred's mind at work \nas he circles the deal.\nFred and the Airbnb founders have generously agreed to let me publish\nthis email exchange (with one sentence redacted about something\nthat's strategically important to Airbnb and not an",
    "strategically important to Airbnb and not an important part\nof the conversation). It's an interesting illustration of an element\nof the startup ecosystem that few except the participants ever see:\ninvestors trying to convince one another to invest in their portfolio\ncompanies. Hundreds if not thousands of conversations of this type\nare happening now, but if one has ever been published, I",
    "now, but if one has ever been published, I haven't\nseen it. The Airbnbs themselves never even saw these emails at the\ntime.\nWe do a lot of this behind the scenes stuff at YC, because we invest\nin such a large number of companies, and we invest so early that\ninvestors sometimes need a lot of convincing to see their merits.\nI don't always try as hard as this though. Fred must \nhave found me quite",
    "as this though. Fred must \nhave found me quite annoying.\n\nfrom: Paul Graham\nto: Fred Wilson, AirBedAndBreakfast Founders\ndate: Fri, Jan 23, 2009 at 11:42 AM\nsubject: meet the airbeds\nOne of the startups from the batch that just started, AirbedAndBreakfast,\nis in NYC right now meeting their users. (NYC is their biggest\nmarket.) I'd recommend meeting them if your schedule allows.\nI'd been thinking",
    "them if your schedule allows.\nI'd been thinking to myself that though these guys were going to\ndo really well, I should introduce them to angels, because VCs would\nnever go for it. But then I thought maybe I should give you more\ncredit. You'll certainly like meeting them. Be sure to ask about\nhow they funded themselves with breakfast cereal.\nThere's no reason this couldn't be as big as Ebay. And",
    "no reason this couldn't be as big as Ebay. And this team\nis the right one to do it.\n--pg\nfrom: Brian Chesky\nto: Paul Graham\ncc: Nathan Blecharczyk, Joe Gebbia\ndate: Fri, Jan 23, 2009 at 11:40 AM\nsubject: Re: meet the airbeds\nPG,\nThanks for the intro!\nBrian\nfrom: Paul Graham\nto: Brian Chesky\ncc: Nathan Blecharczyk, Joe Gebbia\ndate: Fri, Jan 23, 2009 at 12:38 PM\nsubject: Re: meet the airbeds\nIt's a",
    "at 12:38 PM\nsubject: Re: meet the airbeds\nIt's a longshot, at this stage, but if there was any VC who'd get\nyou guys, it would be Fred. He is the least suburban-golf-playing\nVC I know.\nHe likes to observe startups for a while before acting, so don't\nbe bummed if he seems ambivalent.\n--pg\nfrom: Fred Wilson\nto: Paul Graham,\ndate: Sun, Jan 25, 2009 at 5:28 PM\nsubject: Re: meet the airbeds\nThanks",
    "at 5:28 PM\nsubject: Re: meet the airbeds\nThanks Paul\nWe are having a bit of a debate inside our partnership about the\nairbed concept. We'll finish that debate tomorrow in our weekly\nmeeting and get back to you with our thoughts\nThanks\nFred\nfrom: Paul Graham\nto: Fred Wilson\ndate: Sun, Jan 25, 2009 at 10:48 PM\nsubject: Re: meet the airbeds\nI'd recommend having the debate after meeting them instead",
    "having the debate after meeting them instead of before.\nWe had big doubts about this idea, but they vanished on meeting the\nguys.\nfrom: Fred Wilson\nto: Paul Graham\ndate: Mon, Jan 26, 2009 at 11:08 AM\nsubject: RE: meet the airbeds\nWe are still very suspect of this idea but will take a meeting as\nyou suggest\nThanks\nfred\nfrom: Fred Wilson\nto: Paul Graham, AirBedAndBreakfast Founders\ndate: Mon, Jan",
    "Graham, AirBedAndBreakfast Founders\ndate: Mon, Jan 26, 2009 at 11:09 AM\nsubject: RE: meet the airbeds\nAirbed team -\nAre you still in NYC?\nWe'd like to meet if you are\nThanks\nfred\nfrom: Paul Graham\nto: Fred Wilson\ndate: Mon, Jan 26, 2009 at 1:42 PM\nsubject: Re: meet the airbeds\nIdeas can morph. Practically every really big startup could say,\nfive years later, \"believe it or not, we started out",
    "years later, \"believe it or not, we started out doing ___.\"\nIt just seemed a very good sign to me that these guys were actually\non the ground in NYC hunting down (and understanding) their users.\nOn top of several previous good signs.\n--pg\nfrom: Fred Wilson\nto: Paul Graham\ndate: Sun, Feb 1, 2009 at 7:15 AM\nsubject: Re: meet the airbeds\nIt's interesting\nOur two junior team members were",
    "interesting\nOur two junior team members were enthusiastic\nThe three \"old guys\" didn't get it\nfrom: Paul Graham\nto: Fred Wilson\ndate: Mon, Feb 9, 2009 at 5:58 PM\nsubject: airbnb\nThe Airbeds just won the first poll among all the YC startups in\ntheir batch by a landslide. In the past this has not been a 100%\nindicator of success (if only anything were) but much better than\nrandom.\n--pg\nfrom: Fred",
    "were) but much better than\nrandom.\n--pg\nfrom: Fred Wilson\nto: Paul Graham\ndate: Fri, Feb 13, 2009 at 5:29 PM\nsubject: Re: airbnb\nI met them today\nThey have an interesting business\nI'm just not sure how big it's going to be\nfred\nfrom: Paul Graham\nto: Fred Wilson\ndate: Sat, Feb 14, 2009 at 9:50 AM\nsubject: Re: airbnb\nDid they explain the long-term goal of being the market in accommodation\nthe way",
    "goal of being the market in accommodation\nthe way eBay is in stuff? That seems like it would be huge. Hotels\nnow are like airlines in the 1970s before they figured out how to\nincrease their load factors.\nfrom: Fred Wilson\nto: Paul Graham\ndate: Tue, Feb 17, 2009 at 2:05 PM\nsubject: Re: airbnb\nThey did but I am not sure I buy that\nABNB reminds me of Etsy in that it facilitates real commerce in",
    "me of Etsy in that it facilitates real commerce in a\nmarketplace model directly between two people\nSo I think it can scale all the way to the bed and breakfast market\nBut I am not sure they can take on the hotel market\nI could be wrong\nBut even so, if you include short term room rental, second home\nrental, bed and breakfast, and other similar classes of accommodations,\nyou get to a pretty big",
    "classes of accommodations,\nyou get to a pretty big opportunity\nfred\nfrom: Paul Graham\nto: Fred Wilson\ndate: Wed, Feb 18, 2009 at 12:21 AM\nsubject: Re: airbnb\nSo invest in them! They're very capital efficient. They would\nmake an investor's money go a long way.\nIt's also counter-cyclical. They just arrived back from NYC, and\nwhen I asked them what was the most significant thing they'd observed,\nit",
    "was the most significant thing they'd observed,\nit was how many of their users actually needed to do these rentals\nto pay their rents.\n--pg\nfrom: Fred Wilson\nto: Paul Graham\ndate: Wed, Feb 18, 2009 at 2:21 AM\nsubject: Re: airbnb\nThere's a lot to like\nI've done a few things, like intro it to my friends at Foundry who\nwere investors in Service Metrics and understand this model\nI am also talking to",
    "and understand this model\nI am also talking to my friend Mark Pincus who had an idea like\nthis a few years ago.\nSo we are working on it\nThanks for the lead\nFred\nfrom: Paul Graham\nto: Fred Wilson\ndate: Fri, Feb 20, 2009 at 10:00 PM\nsubject: airbnb already spreading to pros\nI know you're skeptical they'll ever get hotels, but there's a\ncontinuum between private sofas and hotel rooms, and they just",
    "private sofas and hotel rooms, and they just moved\none step further along it.\n[link to an airbnb user]\nThis is after only a few months. I bet you they will get hotels\neventually. It will start with small ones. Just wait till all the\n10-room pensiones in Rome discover this site. And once it spreads\nto hotels, where is the point (in size of chain) at which it stops?\nOnce something becomes a big",
    "at which it stops?\nOnce something becomes a big marketplace, you ignore it at your\nperil.\n--pg\nfrom: Fred Wilson\nto: Paul Graham\ndate: Sat, Feb 21, 2009 at 4:26 AM\nsubject: Re: airbnb already spreading to pros\nThat's true. It's also true that there are quite a few marketplaces\nout there that serve this same market\nIf you look at many of the people who list at ABNB, they list\nelsewhere too\nI am not",
    "who list at ABNB, they list\nelsewhere too\nI am not negative on this one, I am interested, but we are still\nin the gathering data phase.\nfred",
    "The Airbnbs\n\nThe Airbnbs\n\nDecember 2020\nTo celebrate Airbnb's IPO and to help future founders, I thought\nit might be useful to explain what was special about Airbnb.\nWhat was special about the Airbnbs was how earnest they were. They\ndid nothing half-way, and we could sense this even in the interview.\nSometimes after we interviewed a startup we'd be uncertain what to\ndo, and have to talk it over.",
    "be uncertain what to\ndo, and have to talk it over. Other times we'd just look at one\nanother and smile. The Airbnbs' interview was that kind. We didn't\neven like the idea that much. Nor did users, at that stage; they\nhad no growth. But the founders seemed so full of energy that it\nwas impossible not to like them.\nThat first impression was not misleading. During the batch our\nnickname for Brian",
    "During the batch our\nnickname for Brian Chesky was The Tasmanian Devil, because like the\n\ncartoon\ncharacter\n he seemed a tornado of energy. All three of them were\nlike that. No one ever worked harder during YC than the Airbnbs\ndid. When you talked to the Airbnbs, they took notes. If you suggested\nan idea to them in office hours, the next time you talked to them\nthey'd not only have implemented it,",
    "to them\nthey'd not only have implemented it, but also implemented two new\nideas they had in the process. \"They probably have the best attitude\nof any startup we've funded\" I wrote to Mike Arrington during the\nbatch.\nThey're still like that. Jessica and I had dinner with Brian in the\nsummer of 2018, just the three of us. By this point the company is\nten years old. He took a page of notes about",
    "is\nten years old. He took a page of notes about ideas for new things\nAirbnb could do.\nWhat we didn't realize when we first met Brian and Joe and Nate was\nthat Airbnb was on its last legs. After working on the company for\na year and getting no growth, they'd agreed to give it one last\nshot. They'd try this Y Combinator thing, and if the company still\ndidn't take off, they'd give up.\nAny normal",
    "still\ndidn't take off, they'd give up.\nAny normal person would have given up already. They'd been funding\nthe company with credit cards. They had a \nbinder\n full of\ncredit cards they'd maxed out. Investors didn't think much of the\nidea. One investor they met in a cafe walked out in the middle of\nmeeting with them. They thought he was going to the bathroom, but\nhe never came back. \"He didn't even",
    "bathroom, but\nhe never came back. \"He didn't even finish his smoothie,\" Brian\nsaid. And now, in late 2008, it was the worst recession in decades.\nThe stock market was in free fall and wouldn't hit bottom for another\nfour months.\nWhy hadn't they given up? This is a useful question to ask. People,\nlike matter, reveal their nature under extreme conditions. One thing\nthat's clear is that they weren't",
    "One thing\nthat's clear is that they weren't doing this just for the money.\nAs a money-making scheme, this was pretty lousy: a year's work and\nall they had to show for it was a binder full of maxed-out credit\ncards. So why were they still working on this startup? Because of\nthe experience they'd had as the first hosts.\nWhen they first tried renting out airbeds on their floor during a\ndesign",
    "renting out airbeds on their floor during a\ndesign convention, all they were hoping for was to make enough money\nto pay their rent that month. But something surprising happened:\nthey enjoyed having those first three guests staying with them. And\nthe guests enjoyed it too. Both they and the guests had done it\nbecause they were in a sense forced to, and yet they'd all had a\ngreat experience. Clearly",
    "and yet they'd all had a\ngreat experience. Clearly there was something new here: for hosts,\na new way to make money that had literally been right under their\nnoses, and for guests, a new way to travel that was in many ways\nbetter than hotels.\nThat experience was why the Airbnbs didn't give up. They knew they'd\ndiscovered something. They'd seen a glimpse of the future, and they\ncouldn't let it",
    "a glimpse of the future, and they\ncouldn't let it go.\nThey knew that once people tried staying in what is now called \"an\nairbnb,\" they would also realize that this was the future. But only\nif they tried it, and they weren't. That was the problem during Y\nCombinator: to get growth started.\nAirbnb's goal during YC was to reach what we call \nramen profitability\n,\nwhich means making enough money that",
    "means making enough money that the company can pay the founders'\nliving expenses, if they live on ramen noodles. Ramen profitability\nis not, obviously, the end goal of any startup, but it's the most\nimportant threshold on the way, because this is the point where\nyou're airborne. This is the point where you no longer need investors'\npermission to continue existing. For the Airbnbs, ramen",
    "to continue existing. For the Airbnbs, ramen profitability\nwas $4000 a month: $3500 for rent, and $500 for food. They taped\nthis goal to the mirror in the bathroom of their apartment.\nThe way to get growth started in something like Airbnb is to focus\non the hottest subset of the market. If you can get growth started\nthere, it will spread to the rest. When I asked the Airbnbs where\nthere was most",
    "When I asked the Airbnbs where\nthere was most demand, they knew from searches: New York City. So\nthey focused on New York. They went there \nin person\n to visit their\nhosts and help them make their listings more attractive. A big part\nof that was better pictures. So Joe and Brian rented a professional\ncamera and took pictures of the hosts' places themselves.\nThis didn't just make the listings",
    "themselves.\nThis didn't just make the listings better. It also taught them about\ntheir hosts. When they came back from their first trip to New York,\nI asked what they'd noticed about hosts that surprised them, and\nthey said the biggest surprise was how many of the hosts were in\nthe same position they'd been in: they needed this money to pay\ntheir rent. This was, remember, the worst recession in",
    "rent. This was, remember, the worst recession in decades, and\nit had hit New York first. It definitely added to the Airbnbs' sense\nof mission to feel that people needed them.\nIn late January 2009, about three weeks into Y Combinator, their\nefforts started to show results, and their numbers crept upward.\nBut it was hard to say for sure whether it was growth or just random\nfluctuation. By February",
    "was growth or just random\nfluctuation. By February it was clear that it was real growth. They\nmade $460 in fees in the first week of February, $897 in the second,\nand $1428 in the third. That was it: they were airborne. Brian sent\nme an email on February 22 announcing that they were ramen profitable\nand giving the last three weeks' numbers.\n\"I assume you know what you've now set yourself up for",
    "you know what you've now set yourself up for next week,\"\nI responded.\nBrian's reply was seven words: \"We are not going to slow down.\"",
    "Alien Truth\n\nAlien Truth\n\nOctober 2022\nIf there were intelligent beings elsewhere in the universe, they'd\nshare certain truths in common with us. The truths of mathematics\nwould be the same, because they're true by definition. Ditto for\nthe truths of physics; the mass of a carbon atom would be the same\non their planet. But I think we'd share other truths with aliens\nbesides the truths of math and",
    "truths with aliens\nbesides the truths of math and physics, and that it would be\nworthwhile to think about what these might be.\nFor example, I think we'd share the principle that a controlled\nexperiment testing some hypothesis entitles us to have proportionally\nincreased belief in it. It seems fairly likely, too, that it would\nbe true for aliens that one can get better at something by",
    "for aliens that one can get better at something by practicing.\nWe'd probably share Occam's razor. There doesn't seem anything\nspecifically human about any of these ideas.\nWe can only guess, of course. We can't say for sure what forms\nintelligent life might take. Nor is it my goal here to explore that\nquestion, interesting though it is. The point of the idea of alien\ntruth is not that it gives us a",
    "the idea of alien\ntruth is not that it gives us a way to speculate about what forms\nintelligent life might take, but that it gives us a threshold, or\nmore precisely a target, for truth. If you're trying to find the\nmost general truths short of those of math or physics, then presumably\nthey'll be those we'd share in common with other forms of intelligent\nlife.\nAlien truth will work best as a",
    "intelligent\nlife.\nAlien truth will work best as a heuristic if we err on the side of\ngenerosity. If an idea might plausibly be relevant to aliens, that's\nenough. Justice, for example. I wouldn't want to bet that all\nintelligent beings would understand the concept of justice, but I\nwouldn't want to bet against it either.\nThe idea of alien truth is related to Erdos's idea of God's book.\nHe used to",
    "related to Erdos's idea of God's book.\nHe used to describe a particularly good proof as being in God's\nbook, the implication being (a) that a sufficiently good proof was\nmore discovered than invented, and (b) that its goodness would be\nuniversally recognized. If there's such a thing as alien truth,\nthen there's more in God's book than math.\nWhat should we call the search for alien truth? The",
    "should we call the search for alien truth? The obvious choice\nis \"philosophy.\" Whatever else philosophy includes, it should\nprobably include this. I'm fairly sure Aristotle would have thought\nso. One could even make the case that the search for alien truth\nis, if not an accurate description \nof\n philosophy, a good\ndefinition \nfor\n it. I.e. that it's what people who call\nthemselves philosophers",
    "it's what people who call\nthemselves philosophers should be doing, whether or not they currently\nare. But I'm not wedded to that; doing it is what matters, not what\nwe call it.\nWe may one day have something like alien life among us in the form\nof AIs. And that may in turn allow us to be precise about what\ntruths an intelligent being would have to share with us. We might\nfind, for example, that",
    "to share with us. We might\nfind, for example, that it's impossible to create something we'd\nconsider intelligent that doesn't use Occam's razor. We might one\nday even be able to prove that. But though this sort of research\nwould be very interesting, it's not necessary for our purposes, or\neven the same field; the goal of philosophy, if we're going to call it that, would be\nto see what ideas we",
    "to call it that, would be\nto see what ideas we come up with using alien truth as a target,\nnot to say precisely where the threshold of it is. Those two questions might one\nday converge, but they'll converge from quite different directions,\nand till they do, it would be too constraining to restrict ourselves\nto thinking only about things we're certain would be alien truths.\nEspecially since this",
    "would be alien truths.\nEspecially since this will probably be one of those areas where the\nbest guesses turn out to be surprisingly close to optimal. (Let's\nsee if that one does.)\nWhatever we call it, the attempt to discover alien truths would be\na worthwhile undertaking. And curiously enough, that is itself\nprobably an alien truth.\nThanks\n to Trevor Blackwell, Greg Brockman, \nPatrick Collison,",
    "Blackwell, Greg Brockman, \nPatrick Collison, Robert Morris, and Michael Nielsen for reading drafts of this.",
    "What Microsoft Is this the Altair Basic of?\n\nWhat Microsoft Is this the Altair Basic of?\n\nFebruary 2015\nOne of the most valuable exercises you can try if you want to\nunderstand startups is to look at the most successful companies and\nexplain why they were not as lame as they seemed when they first\nlaunched. Because they practically all seemed lame at first. Not\njust small, lame. Not just the first",
    "at first. Not\njust small, lame. Not just the first step up a big mountain. More\nlike the first step into a swamp.\nA Basic interpreter for the Altair? How could that ever grow into\na giant company? People sleeping on airbeds in strangers' apartments?\nA web site for college students to stalk one another? A wimpy\nlittle single-board computer for hobbyists that used a TV as a\nmonitor? A new search",
    "that used a TV as a\nmonitor? A new search engine, when there were already about 10,\nand they were all trying to de-emphasize search? These ideas didn't\njust seem small. They seemed wrong. They were the kind of ideas\nyou could not merely ignore, but ridicule.\nOften the founders themselves didn't know why their ideas were\npromising. They were attracted to these ideas by instinct, because\nthey were",
    "to these ideas by instinct, because\nthey were \nliving in the future\n and\nthey sensed that something was missing. But they could not have\nput into words exactly how their ugly ducklings were going to grow\ninto big, beautiful swans.\nMost people's first impulse when they hear about a lame-sounding\nnew startup idea is to make fun of it. Even a lot of people who\nshould know better.\nWhen I encounter a",
    "people who\nshould know better.\nWhen I encounter a startup with a lame-sounding idea, I ask \"What\nMicrosoft is this the Altair Basic of?\" Now it's a puzzle, and the\nburden is on me to solve it. Sometimes I can't think of an answer,\nespecially when the idea is a made-up one. But it's remarkable how\noften there does turn out to be an answer. Often it's one the\nfounders themselves hadn't seen",
    "Often it's one the\nfounders themselves hadn't seen yet.\nIntriguingly, there are sometimes multiple answers. I talked to a\nstartup a few days ago that could grow into 3 distinct Microsofts.\nThey'd probably vary in size by orders of magnitude. But you can\nnever predict how big a Microsoft is going to be, so in cases like\nthat I encourage founders to follow whichever path is most immediately\nexciting",
    "follow whichever path is most immediately\nexciting to them. Their instincts got them this far. Why stop now?",
    "Frighteningly Ambitious Startup Ideas\n\nFrighteningly Ambitious Startup Ideas\n\nWant to start a startup?\n Get funded by\n\nY Combinator\n.\n\nMarch 2012\nOne of the more surprising things I've noticed while working\non Y Combinator is how frightening the most ambitious startup\nideas are. In this essay I'm going to demonstrate\nthis phenomenon by describing some. Any one of them\ncould make you a billionaire.",
    "Any one of them\ncould make you a billionaire. That might sound like an attractive\nprospect, and yet when I describe these ideas you may\nnotice you find yourself shrinking away from them.\nDon't worry, it's not a sign of weakness. Arguably it's a sign of\nsanity. The biggest startup ideas are terrifying. And not just\nbecause they'd be a lot of work. The biggest ideas seem to threaten\nyour identity:",
    "The biggest ideas seem to threaten\nyour identity: you wonder if you'd have enough ambition to carry\nthem through.\nThere's a scene in \nBeing John Malkovich\n where the nerdy hero\nencounters a very attractive, sophisticated woman. She says to\nhim:\n\n Here's the thing: If you ever got me, you wouldn't have a clue\n what to do with me.\n\nThat's what these ideas say to us.\nThis phenomenon is one of the",
    "ideas say to us.\nThis phenomenon is one of the most important things you can understand\nabout startups. \n\n[\n1\n]\n\nYou'd expect big startup ideas to be\nattractive, but actually they tend to repel you. And that has a\nbunch of consequences. It means these ideas are invisible to most\npeople who try to think of startup ideas, because their subconscious\nfilters them out. Even the most ambitious people",
    "them out. Even the most ambitious people are probably best\noff approaching them obliquely.\n1. A New Search Engine\nThe best ideas are just on the right side of impossible. I don't\nknow if this one is possible, but there are signs it might be.\nMaking a new search engine means competing with Google, and recently\nI've noticed some cracks in their fortress.\nThe point when it became clear to me that",
    "point when it became clear to me that Microsoft had lost their\nway was when they decided to get into the search business. That\nwas not a natural move for Microsoft. They did it because they\nwere afraid of Google, and Google was in the search business. But\nthis meant (a) Google was now setting Microsoft's agenda, and (b)\nMicrosoft's agenda consisted of stuff they weren't good at.\nMicrosoft : Google",
    "of stuff they weren't good at.\nMicrosoft : Google :: Google : Facebook.\nThat does not by itself mean\nthere's room for a new search engine, but lately when using Google\nsearch I've found myself nostalgic for the old days, when\nGoogle was true to its own slightly aspy self. Google used to give\nme a page of the right answers, fast, with no clutter. Now the\nresults seem inspired by the Scientologist",
    "Now the\nresults seem inspired by the Scientologist principle that what's\ntrue is what's true for you. And the pages don't have the\nclean, sparse feel they used to. Google search results used to\nlook like the output of a Unix utility. Now if I accidentally put\nthe cursor in the wrong place, anything might happen.\nThe way to win here is to build the search engine all the hackers\nuse. A search engine",
    "search engine all the hackers\nuse. A search engine whose users consisted of the top 10,000 hackers\nand no one else would be in a very powerful position despite its\nsmall size, just as Google was when it was that search engine. And\nfor the first time in over a decade the idea of switching seems\nthinkable to me.\nSince anyone capable of starting this company is one of those 10,000\nhackers, the route",
    "company is one of those 10,000\nhackers, the route is at least straightforward: make the search\nengine you yourself want. Feel free to make it excessively hackerish.\nMake it really good for code search, for example. Would you like\nsearch queries to be Turing complete? Anything that gets you those\n10,000 users is ipso facto good.\nDon't worry if something you want to do will constrain you in the\nlong",
    "you want to do will constrain you in the\nlong term, because if you don't get that initial core of users,\nthere won't be a long term. If you can just build something that\nyou and your friends genuinely prefer to Google, you're already\nabout 10% of the way to an IPO, just as Facebook was (though they\nprobably didn't realize it) when they got all the Harvard undergrads.\n2. Replace Email\nEmail was not",
    "Harvard undergrads.\n2. Replace Email\nEmail was not designed to be used the way we use it now. Email is\nnot a messaging protocol. It's a todo list. Or rather, my inbox\nis a todo list, and email is the way things get onto it. But it\nis a disastrously bad todo list.\nI'm open to different types of solutions to this problem, but I\nsuspect that tweaking the inbox is not enough, and that email has\nto be",
    "the inbox is not enough, and that email has\nto be replaced with a new protocol. \nThis new protocol should be a todo list protocol, not\na messaging protocol, although there is a degenerate case where\nwhat someone wants you to do is: read the following text.\nAs a todo list protocol, the new protocol should give more power\nto the recipient than email does. I want there to be more restrictions\non what",
    "does. I want there to be more restrictions\non what someone can put on my todo list. And when someone can put\nsomething on my todo list, I want them to tell me more about what\nthey want from me. Do they want me to do something beyond just\nreading some text? How important is it? (There obviously has to\nbe some mechanism to prevent people from saying everything is\nimportant.) When does it have to be",
    "everything is\nimportant.) When does it have to be done?\nThis is one of those ideas that's like an irresistible force meeting\nan immovable object. On one hand, entrenched protocols are impossible\nto replace. On the other, it seems unlikely that people in\n100 years will still be living in the same email hell we do now.\nAnd if email is going to get replaced eventually, why not now?\nIf you do it",
    "get replaced eventually, why not now?\nIf you do it right, you may be able to avoid the usual chicken \nand egg problem new protocols face, because some of the most powerful\npeople in the world will be among the first to switch to it. \nThey're all at the mercy of email too.\nWhatever you build, make it fast. GMail has become painfully slow.\n\n[\n2\n]\n\nIf you made something no better than GMail, but",
    "you made something no better than GMail, but fast, that\nalone would let you start to pull users away from GMail.\nGMail is slow because Google can't afford to spend a lot on it.\nBut people will pay for this. I'd have no problem paying $50 a month.\nConsidering how much time I spend in email, it's kind of scary to\nthink how much I'd be justified in paying. At least $1000 a month.\nIf I spend several",
    "paying. At least $1000 a month.\nIf I spend several hours a day reading and writing email, that would\nbe a cheap way to make my life better.\n3. Replace Universities\nPeople are all over this idea lately, and I think they're onto\nsomething. I'm reluctant to suggest that an institution that's\nbeen around for a millennium is finished just because of some mistakes\nthey made in the last few decades, but",
    "mistakes\nthey made in the last few decades, but certainly in the last few\ndecades US universities seem to have been headed down the wrong\npath. One could do a lot better for a lot less money.\nI don't think universities will disappear. They won't be replaced\nwholesale. They'll just lose the de facto monopoly on certain types\nof learning that they once had. There will be many different ways\nto learn",
    "had. There will be many different ways\nto learn different things, and some may look quite different from\nuniversities. Y Combinator itself is arguably one of them.\nLearning is such a big problem that changing the way people do it\nwill have a wave of secondary effects. For example, the name of\nthe university one went to is treated by a lot of people (correctly\nor not) as a credential in its own",
    "(correctly\nor not) as a credential in its own right. If learning breaks up\ninto many little pieces, credentialling may separate from it. There\nmay even need to be replacements for campus social life (and oddly\nenough, YC even has aspects of that).\nYou could replace high schools too, but there you face bureaucratic\nobstacles that would slow down a startup. Universities seem the\nplace to start.\n4.",
    "startup. Universities seem the\nplace to start.\n4. Internet Drama\nHollywood has been slow to embrace the Internet. That was a \nmistake, because I think we can now call a winner in the race between\ndelivery mechanisms, and it is the Internet, not cable.\nA lot of the reason is the horribleness of cable clients, also known\nas TVs. Our family didn't wait for Apple TV. We hated our last\nTV so much that",
    "for Apple TV. We hated our last\nTV so much that a few months ago we replaced it with an iMac bolted\nto the wall. It's a little inconvenient to control it with a\nwireless mouse, but the overall experience is much better than the\nnightmare UI we had to deal with before.\nSome of the attention people currently devote to watching\nmovies and TV can be stolen by things that seem completely",
    "TV can be stolen by things that seem completely unrelated,\nlike social networking apps. More can be stolen by things that are\na little more closely related, like games. But there will probably\nalways remain some residual demand for conventional drama, where\nyou sit passively and watch as a plot happens. So how do you deliver\ndrama via the Internet? Whatever you make will have to be on a\nlarger",
    "Whatever you make will have to be on a\nlarger scale than Youtube clips. When people sit down to watch a\nshow, they want to know what they're going to get: either part\nof a series with familiar characters, or a single longer \"movie\"\nwhose basic premise they know in advance.\nThere are two ways delivery and payment could play out. Either\nsome company like Netflix or Apple will be the app store",
    "like Netflix or Apple will be the app store for\nentertainment, and you'll reach audiences through them. Or the\nwould-be app stores will be too overreaching, or too technically\ninflexible, and companies will arise to supply payment and streaming\na la carte to the producers of drama. If that's the way things\nplay out, there will also be a need for such infrastructure companies.\n5. The Next Steve",
    "such infrastructure companies.\n5. The Next Steve Jobs\nI was talking recently to someone who knew Apple well, and I asked\nhim if the people now running the company would be able to keep\ncreating new things the way Apple had under Steve Jobs. His answer\nwas simply \"no.\" I already feared that would be the answer. I\nasked more to see how he'd qualify it. But he didn't qualify it\nat all. No, there will",
    "But he didn't qualify it\nat all. No, there will be no more great new stuff beyond whatever's\ncurrently in the pipeline. Apple's\nrevenues may continue to rise for a long time, but as Microsoft\nshows, revenue is a lagging indicator in the technology business.\nSo if Apple's not going to make the next iPad, who is? None of the\nexisting players. None of them are run by product visionaries,",
    "None of them are run by product visionaries, and\nempirically you can't seem to get those by hiring them. Empirically\nthe way you get a product visionary as CEO is for him to found the\ncompany and not get fired. So the company that creates the next\nwave of hardware is probably going to have to be a startup.\nI realize it sounds preposterously ambitious for a startup to try\nto become as big as Apple.",
    "for a startup to try\nto become as big as Apple. But no more ambitious than it was for\nApple to become as big as Apple, and they did it. Plus a startup\ntaking on this problem now has an advantage the original Apple\ndidn't: the example of Apple. Steve Jobs has shown us what's\npossible. That helps would-be successors both directly, as Roger\nBannister did, by showing how much better you can do than",
    "did, by showing how much better you can do than people\ndid before, and indirectly, as Augustus did, by lodging the idea\nin users' minds that a single person could unroll the future \nfor them. \n\n[\n3\n]\nNow Steve is gone there's a vacuum we can all feel. If a new company\nled boldly into the future of hardware, users would follow. The\nCEO of that company, the \"next Steve Jobs,\" might not measure up\nto",
    "the \"next Steve Jobs,\" might not measure up\nto Steve Jobs. But he wouldn't have to. He'd just have to do a\nbetter job than Samsung and HP and Nokia, and that seems pretty\ndoable.\n6. Bring Back Moore's Law\nThe last 10 years have reminded us what Moore's Law actually says.\nTill about 2002 you could safely misinterpret it as promising that\nclock speeds would double every 18 months. Actually what it",
    "would double every 18 months. Actually what it says\nis that circuit densities will double every 18 months. It used to\nseem pedantic to point that out. Not any more. Intel can no longer\ngive us faster CPUs, just more of them.\nThis Moore's Law is not as good as the old one. Moore's Law used\nto mean that if your software was slow, all you had to do was wait,\nand the inexorable progress of hardware",
    "was wait,\nand the inexorable progress of hardware would solve your problems.\nNow if your software is slow you have to rewrite it to do more\nthings in parallel, which is a lot more work than waiting.\nIt would be great if a startup could give us something of the old\nMoore's Law back, by writing software that could make a large number\nof CPUs look to the developer like one very fast CPU. There",
    "to the developer like one very fast CPU. There are\nseveral ways to approach this problem. The most ambitious is to\ntry to do it automatically: to write a compiler that will parallelize\nour code for us. There's a name for this compiler, \nthe sufficiently\nsmart compiler,\n and it is a byword for impossibility. But is\nit really impossible? Is there no configuration of the bits in\nmemory of a present",
    "configuration of the bits in\nmemory of a present day computer that is this compiler? If you\nreally think so, you should try to prove it, because that would be\nan interesting result. And if it's not impossible but simply very\nhard, it might be worth trying to write it. The expected value\nwould be high even if the chance of succeeding was low.\nThe reason the expected value is so high is web",
    "reason the expected value is so high is web services. If you\ncould write software that gave programmers the convenience of the\nway things were in the old days, you could offer it to them as a\nweb service. And that would in turn mean that you got practically\nall the users.\nImagine there was another processor manufacturer that could still translate\nincreased circuit densities into increased clock",
    "circuit densities into increased clock speeds. They'd\ntake most of Intel's business. And since web services mean that\nno one sees their processors anymore, by writing the sufficiently\nsmart compiler you could create a situation indistinguishable from\nyou being that manufacturer, at least for the server market.\nThe least ambitious way of approaching the problem is to start from\nthe other end, and",
    "the problem is to start from\nthe other end, and offer programmers more parallelizable Lego blocks\nto build programs out of, like Hadoop and MapReduce. Then the\nprogrammer still does much of the work of optimization.\nThere's an intriguing middle ground where you build a semi-automatic\nweapon—where there's a human in the loop. You make something\nthat looks to the user like the sufficiently smart",
    "looks to the user like the sufficiently smart compiler, but\ninside has people, using highly developed optimization tools to\nfind and eliminate bottlenecks in users' programs. These people\nmight be your employees, or you might create a marketplace for\noptimization.\nAn optimization marketplace would be a way to generate the sufficiently\nsmart compiler piecemeal, because participants would",
    "compiler piecemeal, because participants would immediately\nstart writing bots. It would be a curious state of affairs if you\ncould get to the point where everything could be done by bots,\nbecause then you'd have made the sufficiently smart compiler, but\nno one person would have a complete copy of it.\nI realize how crazy all this sounds. In fact, what I like about\nthis idea is all the different",
    "what I like about\nthis idea is all the different ways in which it's wrong. The whole\nidea of focusing on optimization is counter to the general trend\nin software development for the last several decades. Trying to\nwrite the sufficiently smart compiler is by definition a mistake.\nAnd even if it weren't, compilers are the sort of software that's\nsupposed to be created by open source projects, not",
    "to be created by open source projects, not companies. Plus\nif this works it will deprive all the programmers who take pleasure\nin making multithreaded apps of so much amusing complexity. The\nforum troll I have by now internalized doesn't even know where to\nbegin in raising objections to this project. Now that's what I\ncall a startup idea.\n7. Ongoing Diagnosis\nBut wait, here's another that could",
    "Diagnosis\nBut wait, here's another that could face even greater resistance:\nongoing, automatic medical diagnosis.\nOne of my tricks for generating startup ideas is to imagine the\nways in which we'll seem backward to future generations. And I'm\npretty sure that to people 50 or 100 years in the future, it will\nseem barbaric that people in our era waited till they had symptoms\nto be diagnosed with",
    "waited till they had symptoms\nto be diagnosed with conditions like heart disease and cancer.\nFor example, in 2004 Bill Clinton found he was feeling short of\nbreath. Doctors discovered that several of his arteries were over\n90% blocked and 3 days later he had a quadruple bypass. It seems\nreasonable to assume Bill Clinton has the best medical care available.\nAnd yet even he had to wait till his",
    "available.\nAnd yet even he had to wait till his arteries were over 90% blocked\nto learn that the number was over 90%. Surely at some point in the\nfuture we'll know these numbers the way we now know something like\nour weight. Ditto for cancer. It will seem preposterous to future\ngenerations that we wait till patients have physical symptoms to\nbe diagnosed with cancer. Cancer will show up on some",
    "diagnosed with cancer. Cancer will show up on some sort of radar\nscreen immediately.\n(Of course, what shows up on the radar screen may be different from\nwhat we think of now as cancer. I wouldn't be surprised if at any\ngiven time we have ten or even hundreds of microcancers going at\nonce, none of which normally amount to anything.)\nA lot of the obstacles to ongoing diagnosis will come from the",
    "obstacles to ongoing diagnosis will come from the fact\nthat it's going against the grain of the medical profession. The\nway medicine has always worked is that patients come to doctors\nwith problems, and the doctors figure out what's wrong. A lot of\ndoctors don't like the idea of going on the medical equivalent of\nwhat lawyers call a \"fishing expedition,\" where you go looking for\nproblems without",
    "where you go looking for\nproblems without knowing what you're looking for. They call the\nthings that get discovered this way \"incidentalomas,\" and they are\nsomething of a nuisance.\nFor example, a friend of mine once had her brain scanned as part\nof a study. She was horrified when the doctors running the study\ndiscovered what appeared to be a large tumor. After further testing,\nit turned out to be",
    "tumor. After further testing,\nit turned out to be a harmless cyst. But it cost her a few days\nof terror. A lot of doctors worry that if you start scanning people\nwith no symptoms, you'll get this on a giant scale: a huge number\nof false alarms that make patients panic and require expensive and\nperhaps even dangerous tests to resolve. But I think that's just\nan artifact of current limitations. If",
    "that's just\nan artifact of current limitations. If people were scanned all the\ntime and we got better at deciding what was a real problem, my\nfriend would have known about this cyst her whole life and known\nit was harmless, just as we do a birthmark.\nThere is room for a lot of startups here. \nIn addition to the technical obstacles all\nstartups face, and the bureaucratic obstacles all medical",
    "face, and the bureaucratic obstacles all medical startups\nface, they'll be going against thousands of years of medical\ntradition. But it will happen, and it will be a great thing—so\ngreat that people in the future will feel as sorry for us as we do\nfor the generations that lived before anaesthesia and antibiotics.\nTactics\nLet me conclude with some tactical advice. If you want to take on\na problem",
    "tactical advice. If you want to take on\na problem as big as the ones I've discussed, don't make a direct\nfrontal attack on it. Don't say, for example, that you're going\nto replace email. If you do that you raise too many expectations.\nYour employees and investors will constantly be asking \"are we there\nyet?\" and you'll have an army of haters waiting to see you fail.\nJust say you're building",
    "waiting to see you fail.\nJust say you're building todo-list software. That sounds harmless.\nPeople can notice you've replaced email when it's a \nfait accompli\n.\n\n[\n4\n]\nEmpirically, the way to do really big things seems to be to start\nwith deceptively small things. Want to dominate microcomputer\nsoftware? Start by writing a Basic interpreter for a machine with\na few thousand users. Want to make the",
    "with\na few thousand users. Want to make the universal web site? Start\nby building a site for Harvard undergrads to stalk one another.\nEmpirically, it's not just for other people that you need to start\nsmall. You need to for your own sake. Neither Bill Gates nor Mark\nZuckerberg knew at first how big their companies were going to get.\nAll they knew was that they were onto something. Maybe it's a",
    "was that they were onto something. Maybe it's a bad\nidea to have really big ambitions initially, because the bigger\nyour ambition, the longer it's going to take, and the further you\nproject into the future, the more likely you'll get it wrong.\nI think the way to use these big ideas is not to try to identify a\nprecise point in the future and then ask yourself how to get from\nhere to there, like the",
    "yourself how to get from\nhere to there, like the popular image of a visionary. You'll be\nbetter off if you operate like Columbus and just head in a general\nwesterly direction. Don't try to construct the future like a\nbuilding, because your current blueprint is almost certainly mistaken.\nStart with something you know works, and when you expand, expand\nwestward.\nThe popular image of the visionary is",
    "popular image of the visionary is someone with a clear view of\nthe future, but empirically it may be better to have a blurry one.\nNotes\n[\n1\n]\nIt's also one of the most important things VCs fail to\nunderstand about startups. Most expect founders to walk in with a\nclear plan for the future, and judge them based on that. Few\nconsciously realize that in the biggest successes there is the",
    "realize that in the biggest successes there is the least\ncorrelation between the initial plan and what the startup eventually\nbecomes.\n[\n2\n]\nThis sentence originally read \"GMail is painfully slow.\"\nThanks to Paul Buchheit for the correction.\n[\n3\n]\nRoger Bannister is famous as the first person to run a mile\nin under 4 minutes. But his world record only lasted 46 days. Once\nhe showed it could be",
    "only lasted 46 days. Once\nhe showed it could be done, lots of others followed. Ten years\nlater Jim Ryun ran a 3:59 mile as a high school junior.\n[\n4\n]\nIf you want to be the next Apple, maybe you don't even want to start\nwith consumer electronics. Maybe at first you make something hackers\nuse. Or you make something popular but apparently unimportant,\nlike a headset or router. All you need is a",
    "a headset or router. All you need is a bridgehead.\n\nThanks\n to Sam Altman, Trevor Blackwell, \nPaul Buchheit, Patrick Collison, Aaron Iba, Jessica\nLivingston, Robert Morris, Harj Taggar and Garry Tan\nfor reading drafts of this.",
    "Why Startups Condense in America\n\nWhy Startups Condense in America\n\nMay 2006\n(This essay is derived from a keynote at Xtech.)\nStartups happen in clusters. There are a lot of them in Silicon\nValley and Boston, and few in Chicago or Miami. A country that\nwants startups will probably also have to reproduce whatever makes\nthese clusters form.\nI've claimed that the \nrecipe\n is a\ngreat university near a",
    "that the \nrecipe\n is a\ngreat university near a town smart\npeople like. If you set up those conditions within the US, startups\nwill form as inevitably as water droplets condense on a cold piece\nof metal. But when I consider what it would take to reproduce\nSilicon Valley in another country, it's clear the US is a particularly\nhumid environment. Startups condense more easily here.\nIt is by no means a",
    "condense more easily here.\nIt is by no means a lost cause to try to create a silicon valley\nin another country. There's room not merely to equal Silicon Valley,\nbut to surpass it. But if you want to do that, you have to\nunderstand the advantages startups get from being in America.\n1. The US Allows Immigration.\nFor example, I doubt it would be possible to reproduce Silicon\nValley in Japan, because",
    "to reproduce Silicon\nValley in Japan, because one of Silicon Valley's most distinctive\nfeatures is immigration. Half the people there speak with accents.\nAnd the Japanese don't like immigration. When they think about how\nto make a Japanese silicon valley, I suspect they unconsciously\nframe it as how to make one consisting only of Japanese people.\nThis way of framing the question probably",
    "people.\nThis way of framing the question probably guarantees failure.\nA silicon valley has to be a mecca for the smart and the ambitious,\nand you can't have a mecca if you don't let people into it.\nOf course, it's not saying much that America is more open to\nimmigration than Japan. Immigration policy is one area where a\ncompetitor could do better.\n2. The US Is a Rich Country.\nI could see India one",
    "The US Is a Rich Country.\nI could see India one day producing a rival to Silicon Valley.\nObviously they have the right people: you can tell that by the\nnumber of Indians in the current Silicon Valley. The problem with\nIndia itself is that it's still so poor.\nIn poor countries, things we take for granted are missing. A friend\nof mine visiting India sprained her ankle falling down the steps\nin a",
    "sprained her ankle falling down the steps\nin a railway station. When she turned to see what had happened,\nshe found the steps were all different heights. In industrialized\ncountries we walk down steps our whole lives and never think about\nthis, because there's an infrastructure that prevents such a staircase\nfrom being built.\nThe US has never been so poor as some countries are now. There\nhave",
    "been so poor as some countries are now. There\nhave never been swarms of beggars in the streets of American cities.\nSo we have no data about what it takes to get from the swarms-of-beggars\nstage to the silicon-valley stage. Could you have both at once,\nor does there have to be some baseline prosperity before you get a\nsilicon valley?\nI suspect there is some speed limit to the evolution\nof an",
    "there is some speed limit to the evolution\nof an economy. Economies are made out of people, and attitudes can\nonly change a certain amount per generation.\n\n[\n1\n]\n3. The US Is Not (Yet) a Police State.\nAnother country I could see wanting to have a silicon valley is\nChina. But I doubt they could do it yet either. China still seems\nto be a police state, and although present rulers seem",
    "a police state, and although present rulers seem enlightened\ncompared to the last, even enlightened despotism can probably only\nget you part way toward being a great economic power.\nIt can get you factories for building things designed elsewhere.\nCan it get you the designers, though? Can imagination flourish\nwhere people can't criticize the government? Imagination means\nhaving odd ideas, and it's",
    "Imagination means\nhaving odd ideas, and it's hard to have odd ideas about technology\nwithout also having odd ideas about politics. And in any case,\nmany technical ideas do have political implications. So if you\nsquash dissent, the back pressure will propagate into technical\nfields. \n\n[\n2\n]\nSingapore would face a similar problem. Singapore seems very aware\nof the importance of encouraging startups.",
    "aware\nof the importance of encouraging startups. But while energetic\ngovernment intervention may be able to make a port run efficiently,\nit can't coax startups into existence. A state that bans chewing\ngum has a long way to go before it could create a San Francisco.\nDo you need a San Francisco? Might there not be an alternate route\nto innovation that goes through obedience and cooperation",
    "that goes through obedience and cooperation instead\nof individualism? Possibly, but I'd bet not. Most imaginative\npeople seem to share a certain prickly \nindependence\n,\nwhenever and wherever they lived. You see it in Diogenes telling\nAlexander to get out of his light and two thousand years later in\nFeynman breaking into safes at Los Alamos.\n\n[\n3\n]\n\nImaginative people\ndon't want to follow or lead.",
    "people\ndon't want to follow or lead. They're most productive when everyone\ngets to do what they want.\nIronically, of all rich countries the US has lost the most civil\nliberties recently. But I'm not too worried yet. I'm hoping once\nthe present administration is out, the natural openness of American\nculture will reassert itself.\n4. American Universities Are Better.\nYou need a great university to",
    "Are Better.\nYou need a great university to seed a silicon valley, and so far\nthere are few outside the US. I asked a handful of American computer\nscience professors which universities in Europe were most admired,\nand they all basically said \"Cambridge\" followed by a long pause\nwhile they tried to think of others. There don't seem to be many\nuniversities elsewhere that compare with the best in",
    "elsewhere that compare with the best in America, at\nleast in technology.\nIn some countries this is the result of a deliberate policy. The\nGerman and Dutch governments, perhaps from fear of elitism, try to\nensure that all universities are roughly equal in quality. The\ndownside is that none are especially good. The best professors\nare spread out, instead of being concentrated as they are in the\nUS.",
    "of being concentrated as they are in the\nUS. This probably makes them less productive, because they don't\nhave good colleagues to inspire them. It also means no one university\nwill be good enough to act as a mecca, attracting talent from abroad\nand causing startups to form around it.\nThe case of Germany is a strange one. The Germans invented the\nmodern university, and up till the 1930s theirs were",
    "university, and up till the 1930s theirs were the best in\nthe world. Now they have none that stand out. As I was mulling\nthis over, I found myself thinking: \"I can understand why German\nuniversities declined in the 1930s, after they excluded Jews. But\nsurely they should have bounced back by now.\" Then I realized:\nmaybe not. There are few Jews left in Germany and most Jews I know\nwould not want to",
    "in Germany and most Jews I know\nwould not want to move there. And if you took any great American\nuniversity and removed the Jews, you'd have some pretty big gaps.\nSo maybe it would be a lost cause trying to create a silicon valley\nin Germany, because you couldn't establish the level of university\nyou'd need as a seed.\n\n[\n4\n]\nIt's natural for US universities to compete with one another because\nso",
    "to compete with one another because\nso many are private. To reproduce the quality of American universities\nyou probably also have to reproduce this. If universities are\ncontrolled by the central government, log-rolling will pull them\nall toward the mean: the new Institute of X will end up at the\nuniversity in the district of a powerful politician, instead of\nwhere it should be.\n5. You Can Fire",
    "instead of\nwhere it should be.\n5. You Can Fire People in America.\nI think one of the biggest obstacles to creating startups in Europe\nis the attitude toward employment. The famously rigid labor laws\nhurt every company, but startups especially, because startups have\nthe least time to spare for bureaucratic hassles.\nThe difficulty of firing people is a particular problem for startups\nbecause they",
    "is a particular problem for startups\nbecause they have no redundancy. Every person has to do their\njob well.\nBut the problem is more than just that some startup might have a\nproblem firing someone they needed to. Across industries and\ncountries, there's a strong inverse correlation between performance\nand job security. Actors and directors are fired at the end of\neach film, so they have to deliver",
    "at the end of\neach film, so they have to deliver every time. Junior professors\nare fired by default after a few years unless the university chooses\nto grant them tenure. Professional athletes know they'll be pulled\nif they play badly for just a couple games. At the other end of\nthe scale (at least in the US) are auto workers, New York City\nschoolteachers, and civil servants, who are all nearly",
    "and civil servants, who are all nearly impossible\nto fire. The trend is so clear that you'd have to be willfully\nblind not to see it.\nPerformance isn't everything, you say? Well, are auto workers,\nschoolteachers, and civil servants \nhappier\n than actors,\nprofessors, and professional athletes?\nEuropean public opinion will apparently tolerate people being fired\nin industries where they really care",
    "being fired\nin industries where they really care about performance. Unfortunately\nthe only industry they care enough about so far is soccer. But\nthat is at least a precedent.\n6. In America Work Is Less Identified with Employment.\nThe problem in more traditional places like Europe and Japan goes\ndeeper than the employment laws. More dangerous is the attitude\nthey reflect: that an employee is a kind",
    "attitude\nthey reflect: that an employee is a kind of servant, whom the\nemployer has a duty to protect. It used to be that way in America\ntoo. In 1970 you were still supposed to get a job with a big\ncompany, for whom ideally you'd work your whole career. In return\nthe company would take care of you: they'd try not to fire you,\ncover your medical expenses, and support you in old age.\nGradually",
    "expenses, and support you in old age.\nGradually employment has been shedding such paternalistic overtones\nand becoming simply an economic exchange. But the importance of\nthe new model is not just that it makes it easier for startups to\ngrow. More important, I think, is that it it makes it easier for\npeople to \nstart\n startups.\nEven in the US most kids graduating from college still think",
    "US most kids graduating from college still think they're\nsupposed to get jobs, as if you couldn't be productive without being\nsomeone's employee. But the less you identify work with employment,\nthe easier it becomes to start a startup. When you see your career\nas a series of different types of work, instead of a lifetime's\nservice to a single employer, there's less risk in starting your\nown",
    "employer, there's less risk in starting your\nown company, because you're only replacing one segment instead of\ndiscarding the whole thing.\nThe old ideas are so powerful that even the most successful startup\nfounders have had to struggle against them. A year after the\nfounding of Apple, Steve Wozniak still hadn't quit HP. He still\nplanned to work there for life. And when Jobs found someone to\ngive",
    "for life. And when Jobs found someone to\ngive Apple serious venture funding, on the condition that Woz quit,\nhe initially refused, arguing that he'd designed both the Apple I\nand the Apple II while working at HP, and there was no reason he\ncouldn't continue.\n7. America Is Not Too Fussy.\nIf there are any laws regulating businesses, you can assume larval\nstartups will break most of them, because",
    "larval\nstartups will break most of them, because they don't know what the\nlaws are and don't have time to find out.\nFor example, many startups in America begin in places where it's\nnot really legal to run a business. Hewlett-Packard, Apple, and\nGoogle were all run out of garages. Many more startups, including\nours, were initially run out of apartments. If the laws against\nsuch things were actually",
    "If the laws against\nsuch things were actually enforced, most startups wouldn't happen.\nThat could be a problem in fussier countries. If Hewlett and Packard\ntried running an electronics company out of their garage in\nSwitzerland, the old lady next door would report them to the municipal\nauthorities.\nBut the worst problem in other countries is probably the effort\nrequired just to start a company. A",
    "the effort\nrequired just to start a company. A friend of mine started a company\nin Germany in the early 90s, and was shocked to discover, among\nmany other regulations, that you needed $20,000 in capital to\nincorporate. That's one reason I'm not typing this on an Apfel\nlaptop. Jobs and Wozniak couldn't have come up with that kind of\nmoney in a company financed by selling a VW bus and an HP",
    "a company financed by selling a VW bus and an HP calculator.\nWe couldn't have started Viaweb either.\n\n[\n5\n]\nHere's a tip for governments that want to encourage startups: read\nthe stories of existing startups, and then try to simulate what\nwould have happened in your country. When you hit something that\nwould have killed Apple, prune it off.\nStartups are \nmarginal\n.\n \nThey're started by the poor",
    "are \nmarginal\n.\n \nThey're started by the poor and the\ntimid; they begin in marginal space and spare time; they're started\nby people who are supposed to be doing something else; and though\nbusinesses, their founders often know nothing about business. Young\nstartups are fragile. A society that trims its margins sharply\nwill kill them all.\n8. America Has a Large Domestic Market.\nWhat sustains a",
    "Has a Large Domestic Market.\nWhat sustains a startup in the beginning is the prospect of getting\ntheir initial product out. The successful ones therefore make the\nfirst version as simple as possible. In the US they usually begin\nby making something just for the local market.\nThis works in America, because the local market is 300 million\npeople. It wouldn't work so well in Sweden. In a small",
    "It wouldn't work so well in Sweden. In a small country,\na startup has a harder task: they have to sell internationally from\nthe start.\nThe EU was designed partly to simulate a single, large domestic\nmarket. The problem is that the inhabitants still speak many\ndifferent languages. So a software startup in Sweden is still at\na disadvantage relative to one in the US, because they have to deal\nwith",
    "to one in the US, because they have to deal\nwith internationalization from the beginning. It's significant\nthat the most famous recent startup in Europe, Skype, worked on a\nproblem that was intrinsically international.\nHowever, for better or worse it looks as if Europe will in a few\ndecades speak a single language. When I was a student in Italy in\n1990, few Italians spoke English. Now all educated",
    "few Italians spoke English. Now all educated people seem to\nbe expected to-- and Europeans do not like to seem uneducated. This\nis presumably a taboo subject, but if present trends continue,\nFrench and German will eventually go the way of Irish and Luxembourgish:\nthey'll be spoken in homes and by eccentric nationalists.\n9. America Has Venture Funding.\nStartups are easier to start in America",
    "Funding.\nStartups are easier to start in America because funding is easier\nto get. There are now a few VC firms outside the US, but startup\nfunding doesn't only come from VC firms. A more important source,\nbecause it's more personal and comes earlier in the process, is\nmoney from individual angel investors. Google might never have got\nto the point where they could raise millions from VC funds if",
    "where they could raise millions from VC funds if they\nhadn't first raised a hundred thousand from Andy Bechtolsheim. And\nhe could help them because he was one of the founders of Sun. This\npattern is repeated constantly in startup hubs. It's this pattern\nthat \nmakes\n them startup hubs.\nThe good news is, all you have to do to get the process rolling is\nget those first few startups successfully",
    "is\nget those first few startups successfully launched. If they stick\naround after they get rich, startup founders will almost automatically\nfund and encourage new startups.\nThe bad news is that the cycle is slow. It probably takes five\nyears, on average, before a startup founder can make angel investments.\nAnd while governments \nmight\n be able to set up local VC funds\nby supplying the money",
    "to set up local VC funds\nby supplying the money themselves and recruiting people from existing\nfirms to run them, only organic growth can produce angel investors.\nIncidentally, America's private universities are one reason there's\nso much venture capital. A lot of the money in VC funds comes from\ntheir endowments. So another advantage of private universities is\nthat a good chunk of the country's",
    "universities is\nthat a good chunk of the country's wealth is managed by enlightened\ninvestors.\n10. America Has Dynamic Typing for Careers.\nCompared to other industrialized countries the US is disorganized\nabout routing people into careers. For example, in America people\noften don't decide to go to medical school till they've finished\ncollege. In Europe they generally decide in high school.\nThe",
    "Europe they generally decide in high school.\nThe European approach reflects the old idea that each person has a\nsingle, definite occupation-- which is not far from the idea that\neach person has a natural \"station\" in life. If this were true,\nthe most efficient plan would be to discover each person's station\nas early as possible, so they could receive the training appropriate\nto it.\nIn the US",
    "receive the training appropriate\nto it.\nIn the US things are more haphazard. But that turns out to be an\nadvantage as an economy gets more liquid, just as dynamic typing\nturns out to work better than static for ill-defined problems. This\nis particularly true with startups. \"Startup founder\" is not the\nsort of career a high school student would choose. If you ask at\nthat age, people will choose",
    "choose. If you ask at\nthat age, people will choose conservatively. They'll choose\nwell-understood occupations like engineer, or doctor, or lawyer.\nStartups are the kind of thing people don't plan, so you're more\nlikely to get them in a society where it's ok to make career decisions\non the fly.\nFor example, in theory the purpose of a PhD program is to train you\nto do research. But fortunately in",
    "is to train you\nto do research. But fortunately in the US this is another rule\nthat isn't very strictly enforced. In the US most people in CS PhD\nprograms are there simply because they wanted to learn more. They\nhaven't decided what they'll do afterward. So American grad schools\nspawn a lot of startups, because students don't feel they're failing\nif they don't go into research.\nThose worried about",
    "they don't go into research.\nThose worried about America's \"competitiveness\" often suggest\nspending more on public schools. But perhaps America's lousy public\nschools have a hidden advantage. Because they're so bad, the kids\nadopt an attitude of waiting for college. I did; I knew I was\nlearning so little that I wasn't even learning what the choices\nwere, let alone which to choose. This is",
    "choices\nwere, let alone which to choose. This is demoralizing, but it does\nat least make you keep an open mind.\nCertainly if I had to choose between bad high schools and good\nuniversities, like the US, and good high schools and bad universities,\nlike most other industrialized countries, I'd take the US system.\nBetter to make everyone feel like a late bloomer than a failed",
    "everyone feel like a late bloomer than a failed child\nprodigy.\nAttitudes\nThere's one item conspicuously missing from this list: American\nattitudes. Americans are said to be more entrepreneurial, and less\nafraid of risk. But America has no monopoly on this. Indians and\nChinese seem plenty entrepreneurial, perhaps more than Americans.\nSome say Europeans are less energetic, but I don't believe it.",
    "are less energetic, but I don't believe it. I\nthink the problem with Europe is not that they lack balls, but that\nthey lack examples.\nEven in the US, the most successful startup founders are often\ntechnical people who are quite timid, initially, about the idea of\nstarting their own company. Few are the sort of backslapping\nextroverts one thinks of as typically American. They can usually\nonly",
    "of as typically American. They can usually\nonly summon up the activation energy to start a startup when they\nmeet people who've done it and realize they could too.\nI think what holds back European hackers is simply that they don't\nmeet so many people who've done it. You see that variation even\nwithin the US. Stanford students are more entrepreneurial than\nYale students, but not because of some",
    "than\nYale students, but not because of some difference in their characters;\nthe Yale students just have fewer examples.\nI admit there seem to be different attitudes toward ambition in\nEurope and the US. In the US it's ok to be overtly ambitious, and\nin most of Europe it's not. But this can't be an intrinsically\nEuropean quality; previous generations of Europeans were as ambitious\nas Americans.",
    "of Europeans were as ambitious\nas Americans. What happened? My hypothesis is that ambition was\ndiscredited by the terrible things ambitious people did in the first\nhalf of the twentieth century. Now swagger is out. (Even now the\nimage of a very ambitious German presses a button or two, doesn't\nit?)\nIt would be surprising if European attitudes weren't affected by\nthe disasters of the twentieth",
    "weren't affected by\nthe disasters of the twentieth century. It takes a while to be\noptimistic after events like that. But ambition is human nature.\nGradually it will re-emerge.\n\n[\n6\n]\nHow To Do Better\nI don't mean to suggest by this list that America is the perfect\nplace for startups. It's the best place so far, but the sample\nsize is small, and \"so far\" is not very long. On historical time",
    "and \"so far\" is not very long. On historical time \nscales, what we have now is just a\nprototype.\nSo let's look at Silicon Valley the way you'd look at a product\nmade by a competitor. What weaknesses could you exploit? How could\nyou make something users would like better? The users in this case\nare those critical few thousand people you'd like to move to your\nsilicon valley.\nTo start with, Silicon",
    "to your\nsilicon valley.\nTo start with, Silicon Valley is too far from San Francisco. Palo\nAlto, the original ground zero, is about thirty miles away, and the\npresent center more like forty. So people who come to work in\nSilicon Valley face an unpleasant choice: either live in the boring\nsprawl of the valley proper, or live in San Francisco and endure\nan hour commute each way.\nThe best thing would",
    "hour commute each way.\nThe best thing would be if the silicon valley were not merely closer\nto the interesting city, but interesting itself. And there is a\nlot of room for improvement here. Palo Alto is not so bad, but\neverything built since is the worst sort of strip development. You\ncan measure how demoralizing it is by the number of people who will\nsacrifice two hours a day commuting rather",
    "will\nsacrifice two hours a day commuting rather than live there.\nAnother area in which you could easily surpass Silicon Valley is\npublic transportation. There is a train running the length of it,\nand by American standards it's not bad. Which is to say that to\nJapanese or Europeans it would seem like something out of the third\nworld.\nThe kind of people you want to attract to your silicon valley",
    "people you want to attract to your silicon valley like\nto get around by train, bicycle, and on foot. So if you want to\nbeat America, design a town that puts cars last. It will be a while\nbefore any American city can bring itself to do that.\nCapital Gains\nThere are also a couple things you could do to beat America at the\nnational level. One would be to have lower capital gains taxes.\nIt doesn't",
    "be to have lower capital gains taxes.\nIt doesn't seem critical to have the lowest \nincome\n taxes,\nbecause to take advantage of those, people have to move.\n\n[\n7\n]\n\nBut\nif capital gains rates vary, you move assets, not yourself, so\nchanges are reflected at market speeds. The lower the rate, the\ncheaper it is to buy stock in growing companies as opposed to real\nestate, or bonds, or stocks bought for",
    "to real\nestate, or bonds, or stocks bought for the dividends they pay.\nSo if you want to encourage startups you should have a low rate on\ncapital gains. Politicians are caught between a rock and a hard\nplace here, however: make the capital gains rate low and be accused\nof creating \"tax breaks for the rich,\" or make it high and starve\ngrowing companies of investment capital. As Galbraith",
    "companies of investment capital. As Galbraith said,\npolitics is a matter of choosing between the unpalatable and the\ndisastrous. A lot of governments experimented with the disastrous\nin the twentieth century; now the trend seems to be toward the\nmerely unpalatable.\nOddly enough, the leaders now are European countries like Belgium,\nwhich has a capital gains tax rate of zero.\nImmigration\nThe other",
    "gains tax rate of zero.\nImmigration\nThe other place you could beat the US would be with smarter immigration\npolicy. There are huge gains to be made here. Silicon valleys are\nmade of people, remember.\nLike a company whose software runs on Windows, those in the current\nSilicon Valley are all too aware of the shortcomings of the INS,\nbut there's little they can do about it. They're hostages of",
    "little they can do about it. They're hostages of the\nplatform.\nAmerica's immigration system has never been well run, and since\n2001 there has been an additional admixture of paranoia. What\nfraction of the smart people who want to come to America can even\nget in? I doubt even half. Which means if you made a competing\ntechnology hub that let in all smart people, you'd immediately get\nmore than half",
    "smart people, you'd immediately get\nmore than half the world's top talent, for free.\nUS immigration policy is particularly ill-suited to startups, because\nit reflects a model of work from the 1970s. It assumes good technical\npeople have college degrees, and that work means working for a big\ncompany.\nIf you don't have a college degree you can't get an H1B visa, the\ntype usually issued to",
    "can't get an H1B visa, the\ntype usually issued to programmers. But a test that excludes Steve\nJobs, Bill Gates, and Michael Dell can't be a good one. Plus you\ncan't get a visa for working on your own company, only for working\nas an employee of someone else's. And if you want to apply for\ncitizenship you daren't work for a startup at all, because if your\nsponsor goes out of business, you have to",
    "if your\nsponsor goes out of business, you have to start over.\nAmerican immigration policy keeps out most smart people, and channels\nthe rest into unproductive jobs. It would be easy to do better.\nImagine if, instead, you treated immigration like recruiting-- if\nyou made a conscious effort to seek out the smartest people and get\nthem to come to your country.\nA country that got immigration right",
    "your country.\nA country that got immigration right would have a huge advantage.\nAt this point you could become a mecca for smart people simply by\nhaving an immigration system that let them in.\nA Good Vector\nIf you look at the kinds of things you have to do to create an\nenvironment where startups condense, none are great sacrifices.\nGreat universities? Livable towns? Civil liberties?",
    "universities? Livable towns? Civil liberties? Flexible\nemployment laws? Immigration policies that let in smart people?\nTax laws that encourage growth? It's not as if you have to risk\ndestroying your country to get a silicon valley; these are all good\nthings in their own right.\nAnd then of course there's the question, can you afford not to? I\ncan imagine a future in which the default choice of",
    "imagine a future in which the default choice of ambitious young\npeople is to start their \nown\n company\nrather than work for someone else's. I'm not sure that will happen,\nbut it's where the trend points now. And if that is the future,\nplaces that don't have startups will be a whole step behind,\nlike those that missed the Industrial Revolution.\nNotes\n[\n1\n]\nOn the verge of the Industrial Revolution,",
    "the verge of the Industrial Revolution, England was already\nthe richest country in the world. As far as such things can be\ncompared, per capita income in England in 1750 was higher than\nIndia's in 1960.\nDeane, Phyllis, \nThe First Industrial Revolution\n, Cambridge\nUniversity Press, 1965.\n[\n2\n]\n This has already happened once in China, during the Ming\nDynasty, when the country turned its back on",
    "Ming\nDynasty, when the country turned its back on industrialization at\nthe command of the court. One of Europe's advantages was that it\nhad no government powerful enough to do that.\n[\n3\n]\nOf course, Feynman and Diogenes were from adjacent traditions,\nbut Confucius, though more polite, was no more willing to be told\nwhat to think.\n[\n4\n]\nFor similar reasons it might be a lost cause to try to",
    "similar reasons it might be a lost cause to try to establish\na silicon valley in Israel. Instead of no Jews moving there, only\nJews would move there, and I don't think you could build a silicon\nvalley out of just Jews any more than you could out of just Japanese.\n(This is not a remark about the qualities of these groups, just their\nsizes. Japanese are only about 2% of the world population,",
    "are only about 2% of the world population, and\nJews about .2%.)\n[\n5\n]\nAccording to the World Bank, the initial capital requirement\nfor German companies is 47.6% of the per capita income. Doh.\nWorld Bank, \nDoing Business in 2006\n, http://doingbusiness.org\n[\n6\n]\nFor most of the twentieth century, Europeans looked back on\nthe summer of 1914 as if they'd been living in a dream world. It\nseems more",
    "they'd been living in a dream world. It\nseems more accurate (or at least, as accurate) to call the years\nafter 1914 a nightmare than to call those before a dream. A lot\nof the optimism Europeans consider distinctly American is simply\nwhat they too were feeling in 1914.\n[\n7\n]\nThe point where things start to go wrong seems to be about\n50%. Above that people get serious about tax avoidance. The",
    "that people get serious about tax avoidance. The reason\nis that the payoff for avoiding tax grows hyperexponentially (x/1-x\nfor 0 < x < 1). If your income tax rate is 10%, moving to Monaco\nwould only give you 11% more income, which wouldn't even cover the\nextra cost. If it's 90%, you'd get ten times as much income. And\nat 98%, as it was briefly in Britain in the 70s, moving to Monaco\nwould give",
    "in Britain in the 70s, moving to Monaco\nwould give you fifty times as much income. It seems quite likely\nthat European governments of the 70s never drew this curve.\nThanks\n to Trevor Blackwell, Matthias Felleisen, Jessica\nLivingston, Robert Morris, Neil Rimer, Hugues Steinier, Brad \nTempleton, Fred Wilson, and Stephen Wolfram for reading\ndrafts of this, and to Ed Dumbill for inviting me to",
    "of this, and to Ed Dumbill for inviting me to speak.\nFrench Translation\nRussian Translation\nJapanese Translation\nArabic Translation",
    "How to Be an Angel Investor\n\nHow to Be an Angel Investor\n\nMarch 2009\n(This essay is derived from a talk at \nAngelConf\n.)\nWhen we sold our startup in 1998 I thought one day I'd do some angel\ninvesting. Seven years later I still hadn't started. I put it off\nbecause it seemed mysterious and complicated. It turns out to be \neasier than I expected, and also more interesting.\nThe part I thought was",
    "and also more interesting.\nThe part I thought was hard, the mechanics of investing, really\nisn't. You give a startup money and they give you stock. You'll\nprobably get either preferred stock, which means stock with extra\nrights like getting your money back first in a sale, or convertible\ndebt, which means (on paper) you're lending the company money, and\nthe debt converts to stock at the next",
    "money, and\nthe debt converts to stock at the next sufficiently big funding\nround. \n\n[\n1\n]\nThere are sometimes minor tactical advantages to using one or the\nother. The paperwork for convertible debt is simpler. But really\nit doesn't matter much which you use. Don't spend much time worrying\nabout the details of deal terms, especially when you first start\nangel investing. That's not how you win at",
    "start\nangel investing. That's not how you win at this game. When you\nhear people talking about a successful angel investor, they're not\nsaying \"He got a 4x liquidation preference.\" They're saying \"He\ninvested in Google.\"\nThat's how you win: by investing in the right startups. That is\nso much more important than anything else that I worry I'm misleading\nyou by even talking about other",
    "I'm misleading\nyou by even talking about other things.\nMechanics\nAngel investors often syndicate deals, which means they join together\nto invest on the same terms. In a syndicate there is usually a\n\"lead\" investor who negotiates the terms with the startup. But not\nalways: sometimes the startup cobbles together a syndicate of\ninvestors who approach them independently, and the startup's",
    "who approach them independently, and the startup's lawyer\nsupplies the paperwork.\nThe easiest way to get started in angel investing is to find a\nfriend who already does it, and try to get included in his syndicates.\nThen all you have to do is write checks.\nDon't feel like you have to join a syndicate, though. It's not that\nhard to do it yourself. You can just use the standard \n\nseries",
    "yourself. You can just use the standard \n\nseries AA\n\ndocuments Wilson Sonsini and Y Combinator published online.\nYou should of course have your lawyer review everything. Both you\nand the startup should have lawyers. But the lawyers don't have\nto create the agreement from scratch. \n\n[\n2\n]\n\nWhen you negotiate terms with a startup, there are two numbers you\ncare about: how much money you're putting",
    "you\ncare about: how much money you're putting in, and the valuation of\nthe company. The valuation determines how much stock you get. If\nyou put $50,000 into a company at a pre-money valuation of $1\nmillion, then the post-money valuation is $1.05 million, and you\nget .05/1.05, or 4.76% of the company's stock.\nIf the company raises more money later, the new investor will take\na chunk of the company",
    "the new investor will take\na chunk of the company away from all the existing shareholders just\nas you did. If in the next round they sell 10% of the company to\na new investor, your 4.76% will be reduced to 4.28%.\nThat's ok. Dilution is normal. What saves you from being mistreated\nin future rounds, usually, is that you're in the same boat as the\nfounders. They can't dilute you without diluting",
    "They can't dilute you without diluting themselves just\nas much. And they won't dilute themselves unless they end up \n\nnet ahead\n. So in theory, each further \nround of investment leaves you\nwith a smaller share of an even more valuable company, till after\nseveral more rounds you end up with .5% of the company at the point\nwhere it IPOs, and you are very happy because your $50,000 has\nbecome $5",
    "are very happy because your $50,000 has\nbecome $5 million. \n\n[\n3\n]\nThe agreement by which you invest should have provisions that \nlet you contribute to\nfuture rounds to maintain your percentage. So it's your choice\nwhether you get diluted. \n\n[\n4\n]\n\nIf the company does really well,\nyou eventually will, because eventually the valuations will get so\nhigh it's not worth it for you.\nHow much does an",
    "it's not worth it for you.\nHow much does an angel invest? That varies enormously, from $10,000\nto hundreds of thousands or in rare cases even millions. The upper\nbound is obviously the total amount the founders want to raise.\nThe lower bound is 5-10% of the total or $10,000, whichever\nis greater. A typical angel round these days might be $150,000\nraised from 5 people.\nValuations don't vary as",
    "from 5 people.\nValuations don't vary as much. For angel rounds it's rare to see\na valuation lower than half a million or higher than 4 or 5 million.\n4 million is starting to be VC territory.\nHow do you decide what valuation to offer? If you're part of a\nround led by someone else, that problem is solved for you. But\nwhat if you're investing by yourself? There's no real answer.\nThere is no rational",
    "There's no real answer.\nThere is no rational way to value an early stage startup. The\nvaluation reflects nothing more than the strength of the company's\nbargaining position. If they really want you, either because they\ndesperately need money, or you're someone who can help them a lot,\nthey'll let you invest at a low valuation. If they don't need you,\nit will be higher. So guess. The startup may",
    "you,\nit will be higher. So guess. The startup may not have any more\nidea what the number should be than you do. \n\n[\n5\n]\nUltimately it doesn't matter much. When angels make a lot of money\nfrom a deal, it's not because they invested at a valuation of $1.5\nmillion instead of $3 million. It's because the company was really\nsuccessful.\nI can't emphasize that too much. Don't get hung up on mechanics\nor",
    "that too much. Don't get hung up on mechanics\nor deal terms. What you should spend your time thinking about is\nwhether the company is good.\n(Similarly, founders also should not get hung up on deal\nterms, but should spend their time thinking about how to make the\ncompany good.)\nThere's a second less obvious component of an angel investment: how\nmuch you're expected to help the startup. Like the",
    "you're expected to help the startup. Like the amount you\ninvest, this can vary a lot. You don't have to do anything if you\ndon't want to; you could simply be a source of money. Or you can\nbecome a de facto employee of the company. Just make sure that you\nand the startup agree in advance about roughly how much you'll do\nfor them.\nReally hot companies sometimes have high standards for angels.",
    "sometimes have high standards for angels. The\nones everyone wants to invest in practically audition investors,\nand only take money from people who are famous and/or will work\nhard for them. But don't feel like you have to put in a lot of\ntime or you won't get to invest in any good startups. There is a\nsurprising lack of correlation between how hot a deal a startup is\nand how well it ends up doing.",
    "a deal a startup is\nand how well it ends up doing. Lots of hot startups will end up\nfailing, and lots of startups no one likes will end up succeeding.\nAnd the latter are so desperate for money that they'll take it from\nanyone at a low valuation. \n\n[\n6\n]\nPicking Winners\nIt would be nice to be able to pick those out, wouldn't it? The\npart of angel investing that has most effect on your returns,",
    "investing that has most effect on your returns, picking\nthe right companies, is also the hardest. So you should practically\nignore (or more precisely, archive, in the Gmail sense) everything\nI've told you so far. You may need to refer to it at some point,\nbut it is not the central issue.\nThe central issue is picking the right startups. What \"Make something\npeople want\" is for startups, \"Pick the",
    "something\npeople want\" is for startups, \"Pick the right startups\" is for\ninvestors. Combined they yield \"Pick the startups that will make\nsomething people want.\"\nHow do you do that? It's not as simple as picking startups that\nare already making something wildly popular. By then it's\ntoo late for angels. VCs will already be onto them. As an angel,\nyou have to pick startups before they've got a",
    "have to pick startups before they've got a hit—either\nbecause they've made something great but users don't realize it\nyet, like Google early on, or because they're still an iteration\nor two away from the big hit, like Paypal when they were making\nsoftware for transferring money between PDAs.\nTo be a good angel investor, you have to be a good judge of potential.\nThat's what it comes down to. VCs",
    "of potential.\nThat's what it comes down to. VCs can be fast followers. Most of\nthem don't try to predict what will win. They just try to notice\nquickly when something already is winning. But angels have to be\nable to predict. \n\n[\n7\n]\nOne interesting consequence of this fact is that there are a lot\nof people out there who have never even made an angel investment\nand yet are already better angel",
    "angel investment\nand yet are already better angel investors than they realize.\nSomeone who doesn't know the first thing about the mechanics of\nventure funding but knows what a successful startup founder looks\nlike is actually far ahead of someone who knows termsheets inside\nout, but thinks \n\n\"hacker\"\n means someone who breaks into computers.\nIf you can recognize good startup founders by",
    "you can recognize good startup founders by empathizing with\nthem—if you both resonate at the same frequency—then\nyou may already be a better startup picker than the median professional\nVC. \n\n[\n8\n]\nPaul Buchheit, for example, started angel investing about a year\nafter me, and he was pretty much immediately as good as me at picking\nstartups. My extra year of experience was rounding error compared\nto",
    "year of experience was rounding error compared\nto our ability to empathize with founders.\nWhat makes a good founder? If there were a word that meant the\nopposite of hapless, that would be the one. Bad founders seem\nhapless. They may be smart, or not, but somehow events overwhelm\nthem and they get discouraged and give up. Good founders make\nthings happen the way they want. Which is not to say they",
    "happen the way they want. Which is not to say they force\nthings to happen in a predefined way. Good founders have a healthy\nrespect for reality. But they are relentlessly resourceful. That's\nthe closest I can get to the opposite of hapless. You want to fund\npeople who are relentlessly resourceful.\nNotice we started out talking about things, and now we're talking\nabout people. There is an ongoing",
    "we're talking\nabout people. There is an ongoing debate between investors which\nis more important, the people, or the idea—or more precisely,\nthe market. Some, like Ron Conway, say it's the people—that\nthe idea will change, but the people are the foundation of the\ncompany. Whereas Marc Andreessen says he'd back ok founders in a\nhot market over great founders in a bad one. \n\n[\n9\n]\nThese two",
    "great founders in a bad one. \n\n[\n9\n]\nThese two positions are not so far apart as they seem, because good\npeople find good markets. Bill Gates would probably have ended up\npretty rich even if IBM hadn't happened to drop the PC standard in\nhis lap.\nI've thought a lot about the disagreement between the investors who\nprefer to bet on people and those who prefer to bet on markets.\nIt's kind of",
    "those who prefer to bet on markets.\nIt's kind of surprising that it even exists. You'd expect opinions\nto have converged more.\nBut I think I've figured out what's going on. The three most\nprominent people I know who favor markets are Marc, Jawed Karim,\nand Joe Kraus. And all three of them, in their own startups,\nbasically flew into a thermal: they hit a market growing so fast\nthat it was all they",
    "hit a market growing so fast\nthat it was all they could do to keep up with it. That kind of\nexperience is hard to ignore. Plus I think they underestimate\nthemselves: they think back to how easy it felt to ride that huge\nthermal upward, and they think \"anyone could have done it.\" But\nthat isn't true; they are not ordinary people.\nSo as an angel investor I think you want to go with Ron Conway",
    "investor I think you want to go with Ron Conway and\nbet on people. Thermals happen, yes, but no one can predict\nthem—not even the founders, and certainly not you as an\ninvestor. And only good people can ride the thermals if they hit\nthem anyway.\nDeal Flow\nOf course the question of how to choose startups presumes you\nhave startups to choose between. How do you find them? This is\nyet another problem",
    "How do you find them? This is\nyet another problem that gets solved for you by syndicates. If you\ntag along on a friend's investments, you don't have to find startups.\nThe problem is not finding startups, exactly, but finding a stream\nof reasonably high quality ones. The traditional way to do this\nis through contacts. If you're friends with a lot of investors and\nfounders, they'll send deals your",
    "of investors and\nfounders, they'll send deals your way. The Valley basically runs\non referrals. And once you start to become known as reliable,\nuseful investor, people will refer lots of deals to you. I certainly\nwill.\nThere's also a newer way to find startups, which is to come to\nevents like Y Combinator's Demo Day, where a batch of newly created\nstartups presents to investors all at once. We",
    "presents to investors all at once. We have two Demo Days\na year, one in March and one in August. These are basically mass\nreferrals.\nBut events like Demo Day only account for a fraction of matches\nbetween startups and investors. The personal referral is still the\nmost common route. So if you want to hear about new startups, the\nbest way to do it is to get lots of referrals.\nThe best way to get",
    "is to get lots of referrals.\nThe best way to get lots of referrals is to invest in startups. No\nmatter how smart and nice you seem, insiders will be reluctant to\nsend you referrals until you've proven yourself by doing a couple\ninvestments. Some smart, nice guys turn out to be flaky,\nhigh-maintenance investors. But once you prove yourself as a good\ninvestor, the deal flow, as they call it, will",
    "the deal flow, as they call it, will increase rapidly in\nboth quality and quantity. At the extreme, for someone like Ron\nConway, it is basically identical with the deal flow of the whole\nValley.\nSo if you want to invest seriously, the way to get started is to\nbootstrap yourself off your existing connections, be a good investor\nin the startups you meet that way, and eventually you'll start a\nchain",
    "meet that way, and eventually you'll start a\nchain reaction. Good investors are rare, even in Silicon Valley.\nThere probably aren't more than a couple hundred serious angels in the whole\nValley, and yet they're probably the single most important ingredient\nin making the Valley what it is. Angels are the limiting reagent\nin startup formation.\nIf there are only a couple hundred serious angels in the",
    "are only a couple hundred serious angels in the Valley, \nthen by deciding to become one you could single-handedly make the pipeline\nfor startups in Silicon Valley significantly wider. That is kind\nof mind-blowing.\nBeing Good\nHow do you be a good angel investor? The first thing you need is\nto be decisive. When we talk to founders about good and bad\ninvestors, one of the ways we describe the good",
    "one of the ways we describe the good ones is to say \"he\nwrites checks.\" That doesn't mean the investor says yes to everyone.\nFar from it. It means he makes up his mind quickly,\nand follows through. You may be thinking, how hard could that be?\nYou'll see when you try it. It follows from the nature of angel\ninvesting that the decisions are hard. You have to guess early,\nat the stage when the most",
    "have to guess early,\nat the stage when the most promising ideas still seem counterintuitive,\nbecause if they were obviously good, VCs would already have funded\nthem.\nSuppose it's 1998. You come across a startup founded by a couple\ngrad students. They say they're going to work on Internet search.\nThere are already a bunch of big public companies doing search.\nHow can these grad students possibly",
    "doing search.\nHow can these grad students possibly compete with them? And does\nsearch even matter anyway? All the search engines are trying to\nget people to start calling them \"portals\" instead. Why would you\nwant to invest in a startup run by a couple of nobodies who are\ntrying to compete with large, aggressive companies in an area they\nthemselves have declared passe? And yet the grad students",
    "have declared passe? And yet the grad students seem\npretty smart. What do you do?\nThere's a hack for being decisive when you're inexperienced: ratchet\ndown the size of your investment till it's an amount you wouldn't\ncare too much about losing. For every rich person (you probably\nshouldn't try angel investing unless you think of yourself as rich)\nthere's some amount that would be painless, though",
    "some amount that would be painless, though annoying, to\nlose. Till you feel comfortable investing, don't invest more than\nthat per startup.\nFor example, if you have $5 million in investable assets, it would\nprobably be painless (though annoying) to lose $15,000. That's\nless than .3% of your net worth. So start by making 3 or 4 $15,000\ninvestments. Nothing will teach you about angel investing",
    "Nothing will teach you about angel investing like\nexperience. Treat the first few as an educational expense. $60,000\nis less than a lot of graduate programs. Plus you get equity.\nWhat's really uncool is to be strategically indecisive: to string\nfounders along while trying to gather more information about the\nstartup's trajectory. \n\n[\n10\n]\n\n There's always a temptation to do that,\nbecause you just",
    "always a temptation to do that,\nbecause you just have so little to go on, but you have to consciously\nresist it. In the long term it's to your advantage to be good.\nThe other component of being a good angel investor is simply to be\na good person. Angel investing is not a business where you make\nmoney by screwing people over. Startups create wealth, and\ncreating wealth is not a zero sum game. No",
    "and\ncreating wealth is not a zero sum game. No one has to lose for you\nto win. In fact, if you mistreat the founders you invest in, they'll\njust get demoralized and the company will do worse. Plus your\nreferrals will dry up. So I recommend being good.\nThe most successful angel investors I know are all basically good\npeople. Once they invest in a company, all they want to do is help\nit. And they'll",
    "all they want to do is help\nit. And they'll help people they haven't invested in too. When\nthey do favors they don't seem to keep track of them. It's too\nmuch overhead. They just try to help everyone, and assume good\nthings will flow back to them somehow. Empirically that seems to\nwork.\n\nNotes\n[\n1\n]\nConvertible debt can be either capped at a particular valuation,\nor can be done at a discount to",
    "valuation,\nor can be done at a discount to whatever the valuation turns out\nto be when it converts. E.g. convertible debt at a discount of 30%\nmeans when it converts you get stock as if you'd invested at a 30%\nlower valuation. That can be useful in cases where you can't or\ndon't want to figure out what the valuation should be. You leave\nit to the next investor. On the other hand, a lot of",
    "to the next investor. On the other hand, a lot of investors\nwant to know exactly what they're getting, so they will only do\nconvertible debt with a cap.\n[\n2\n]\nThe expensive part of creating an agreement from scratch is\nnot writing the agreement, but bickering at several hundred\ndollars an hour over the details. That's why the series AA paperwork\naims at a middle ground. You can just start from the",
    "at a middle ground. You can just start from the compromise\nyou'd have reached after lots of back and forth.\nWhen you fund a startup, both your lawyers should be specialists\nin startups. Do not use ordinary corporate lawyers for this. Their\ninexperience makes them overbuild: they'll create huge, overcomplicated\nagreements, and spend hours arguing over irrelevant things.\nIn the Valley, the top",
    "over irrelevant things.\nIn the Valley, the top startup law firms are Wilson Sonsini, Orrick,\nFenwick & West, Gunderson Dettmer, and Cooley Godward. In Boston\nthe best are Goodwin Procter, Wilmer Hale, and Foley Hoag.\n[\n3\n]\nYour mileage may vary.\n[\n4\n]\nThese anti-dilution provisions also protect you against\ntricks like a later investor trying to steal the company by doing\nanother round that values",
    "the company by doing\nanother round that values the company at $1. If you have a competent\nstartup lawyer handle the deal for you, you should be protected\nagainst such tricks initially. But it could become a problem later.\nIf a big VC firm wants to invest in the startup after you, they may\ntry to make you take out your anti-dilution protections. And if\nthey do the startup will be pressuring you to",
    "if\nthey do the startup will be pressuring you to agree. They'll tell\nyou that if you don't, you're going to kill their deal with the VC.\nI recommend you solve this problem by having a gentlemen's agreement\nwith the founders: agree with them in advance that you're not going\nto give up your anti-dilution protections. Then it's up to them\nto tell VCs early on.\nThe reason you don't want to give them",
    "early on.\nThe reason you don't want to give them up is the following scenario.\nThe VCs recapitalize the company, meaning they give it additional\nfunding at a pre-money valuation of zero. This wipes out the\nexisting shareholders, including both you and the founders. They\nthen grant the founders lots of options, because they need them to\nstay around, but you get nothing.\nObviously this is not a nice",
    "but you get nothing.\nObviously this is not a nice thing to do. It doesn't happen often.\nBrand-name VCs wouldn't recapitalize a company just to steal a few\npercent from an angel. But there's a continuum here. A less\nupstanding, lower-tier VC might be tempted to do it to steal a big\nchunk of stock.\nI'm not saying you should always absolutely refuse to give up your\nanti-dilution protections.",
    "refuse to give up your\nanti-dilution protections. Everything is a negotiation. If you're\npart of a powerful syndicate, you might be able to give up legal\nprotections and rely on social ones. If you invest in a deal led\nby a big angel like Ron Conway, for example, you're pretty well\nprotected against being mistreated, because any VC would think twice\nbefore crossing him. This kind of protection is",
    "crossing him. This kind of protection is one of the reasons\nangels like to invest in syndicates.\n[\n5\n]\nDon't invest so much, or at such a low valuation, that you\nend up with an excessively large share of a startup, unless you're\nsure your money will be the last they ever need. Later stage\ninvestors won't invest in a company if the founders don't have\nenough equity left to motivate them. I talked",
    "have\nenough equity left to motivate them. I talked to a VC recently who\nsaid he'd met with a company he really liked, but he turned\nthem down because investors already owned more than half of it.\nThose investors probably thought they'd been pretty clever by getting\nsuch a large chunk of this desirable company, but in fact they were\nshooting themselves in the foot.\n[\n6\n]\nAt any given time I know of",
    "in the foot.\n[\n6\n]\nAt any given time I know of at least 3 or 4 YC alumni who I\nbelieve will be big successes but who are running on vapor,\nfinancially, because investors don't yet get what they're doing.\n(And no, unfortunately, I can't tell you who they are. I can't\nrefer a startup to an investor I don't know.)\n[\n7\n]\nThere are some VCs who can predict instead of reacting. Not\nsurprisingly, these",
    "instead of reacting. Not\nsurprisingly, these are the most successful ones.\n[\n8\n]\nIt's somewhat sneaky of me to put it this way, because the\nmedian VC loses money. That's one of the most surprising things\nI've learned about VC while working on Y Combinator. Only a fraction\nof VCs even have positive returns. The rest exist to satisfy demand\namong fund managers for venture capital as an asset class.",
    "managers for venture capital as an asset class. Learning\nthis explained a lot about some of the VCs I encountered when we\nwere working on Viaweb.\n[\n9\n]\nVCs also generally say they prefer great markets to great\npeople. But what they're really saying is they want both. They're\nso selective that they only even consider great people. So when\nthey say they care above all about big markets, they mean",
    "they care above all about big markets, they mean that's\nhow they choose between great people.\n[\n10\n]\nFounders rightly dislike the sort of investor who says he's\ninterested in investing but doesn't want to lead. There are\ncircumstances where this is an acceptable excuse, but more often\nthan not what it means is \"No, but if you turn out to be a hot deal,\nI want to be able to claim retroactively I",
    "deal,\nI want to be able to claim retroactively I said yes.\"\nIf you like a startup enough to invest in it, then invest in it.\nJust use the standard \nseries \nAA\n terms and write them a check.\n\nThanks\n to Sam Altman, Paul Buchheit, Jessica Livingston,\nRobert Morris, and Fred Wilson for reading drafts of this.\n\nComment\n on this essay.",
    "Spam\n\nSpam\n\nA Plan for Spam\nPlan for Spam FAQ\nBetter Bayesian Filtering\nSo Far, So Good\nFilters that Fight Back\nWill Filters Kill Spam?\nStopping Spam\nSpam is Different\nFilters vs. Blacklists\nThe Destiny of Blacklists\nGetting Past Filters\nSpam Conference\nFiltering Research\nSpam Resources\nSpam Archives\nSpam Links",
    "Default Alive or Default Dead?\n\nDefault Alive or Default Dead?\n\nOctober 2015\nWhen I talk to a startup that's been operating for more than 8 or\n9 months, the first thing I want to know is almost always the same.\nAssuming their expenses remain constant and their revenue growth\nis what it has been over the last several months, do they make it to\nprofitability on the money they have left? Or to put it",
    "on the money they have left? Or to put it more\ndramatically, by default do they live or die?\nThe startling thing is how often the founders themselves don't know.\nHalf the founders I talk to don't know whether they're default alive\nor default dead.\nIf you're among that number, Trevor Blackwell has made a handy\n\ncalculator\n you can use to find out.\nThe reason I want to know first whether a startup",
    "reason I want to know first whether a startup is default alive\nor default dead is that the rest of the conversation depends on the\nanswer. If the company is default alive, we can talk about ambitious\nnew things they could do. If it's default dead, we probably need\nto talk about how to save it. We know the current trajectory ends\nbadly. How can they get off that trajectory?\nWhy do so few founders",
    "get off that trajectory?\nWhy do so few founders know whether they're default alive or default\ndead? Mainly, I think, because they're not used to asking that.\nIt's not a question that makes sense to ask early on, any more than\nit makes sense to ask a 3 year old how he plans to support\nhimself. But as the company grows older, the question switches from\nmeaningless to critical. That kind of switch",
    "from\nmeaningless to critical. That kind of switch often takes people\nby surprise.\nI propose the following solution: instead of starting to ask too\nlate whether you're default alive or default dead, start asking too\nearly. It's hard to say precisely when the question switches\npolarity. But it's probably not that dangerous to start worrying\ntoo early that you're default dead, whereas it's very",
    "early that you're default dead, whereas it's very dangerous to\nstart worrying too late.\nThe reason is a phenomenon I wrote about earlier: the\n\nfatal pinch\n.\nThe fatal pinch is default dead + slow growth + not enough\ntime to fix it. And the way founders end up in it is by not realizing\nthat's where they're headed.\nThere is another reason founders don't ask themselves whether they're\ndefault alive",
    "don't ask themselves whether they're\ndefault alive or default dead: they assume it will be easy to raise\nmore money. But that assumption is often false, and worse still, the\nmore you depend on it, the falser it becomes.\nMaybe it will help to separate facts from hopes. Instead of thinking\nof the future with vague optimism, explicitly separate the components.\nSay \"We're default dead, but we're",
    "the components.\nSay \"We're default dead, but we're counting on investors to save\nus.\" Maybe as you say that, it will set off the same alarms in your\nhead that it does in mine. And if you set off the alarms sufficiently\nearly, you may be able to avoid the fatal pinch.\nIt would be safe to be default dead if you could count on investors\nsaving you. As a rule their interest is a function of\ngrowth. If",
    "a rule their interest is a function of\ngrowth. If you have steep revenue growth, say over 5x a year, you\ncan start to count on investors being interested even if you're not\nprofitable.\n\n[\n1\n]\n\nBut investors are so fickle that you can never\ndo more than start to count on them. Sometimes something about your\nbusiness will spook investors even if your growth is great. So no\nmatter how good your",
    "your growth is great. So no\nmatter how good your growth is, you can never safely treat fundraising\nas more than a plan A. You should always have a plan B as well: you\nshould know (as in write down) precisely what you'll need to do to\nsurvive if you can't raise more money, and precisely when you'll \nhave to switch to plan B if plan A isn't working.\nIn any case, growing fast versus operating cheaply",
    "any case, growing fast versus operating cheaply is far from the\nsharp dichotomy many founders assume it to be. In practice there\nis surprisingly little connection between how much a startup spends\nand how fast it grows. When a startup grows fast, it's usually\nbecause the product hits a nerve, in the sense of hitting some big\nneed straight on. When a startup spends a lot, it's usually because\nthe",
    "a startup spends a lot, it's usually because\nthe product is expensive to develop or sell, or simply because\nthey're wasteful.\nIf you're paying attention, you'll be asking at this point not just\nhow to avoid the fatal pinch, but how to avoid being default dead.\nThat one is easy: don't hire too fast. Hiring too fast is by far\nthe biggest killer of startups that raise money.\n\n[\n2\n]\nFounders tell",
    "of startups that raise money.\n\n[\n2\n]\nFounders tell themselves they need to hire in order to grow. But\nmost err on the side of overestimating this need rather than\nunderestimating it. Why? Partly because there's so much work to\ndo. Naive founders think that if they can just hire enough\npeople, it will all get done. Partly because successful startups have\nlots of employees, so it seems like that's",
    "have\nlots of employees, so it seems like that's what one does in order\nto be successful. In fact the large staffs of successful startups\nare probably more the effect of growth than the cause. And\npartly because when founders have slow growth they don't want to\nface what is usually the real reason: the product is not appealing\nenough.\nPlus founders who've just raised money are often encouraged",
    "who've just raised money are often encouraged to\noverhire by the VCs who funded them. Kill-or-cure strategies are\noptimal for VCs because they're protected by the portfolio effect.\nVCs want to blow you up, in one sense of the phrase or the other.\nBut as a founder your incentives are different. You want above all\nto survive.\n\n[\n3\n]\nHere's a common way startups die. They make something",
    "a common way startups die. They make something moderately\nappealing and have decent initial growth. They raise their first\nround fairly easily, because the founders seem smart and the idea\nsounds plausible. But because the product is only moderately\nappealing, growth is ok but not great. The founders convince\nthemselves that hiring a bunch of people is the way to boost growth.\nTheir investors",
    "people is the way to boost growth.\nTheir investors agree. But (because the product is only moderately\nappealing) the growth never comes. Now they're rapidly running out\nof runway. They hope further investment will save them. But because\nthey have high expenses and slow growth, they're now unappealing\nto investors. They're unable to raise more, and the company dies.\nWhat the company should have",
    "and the company dies.\nWhat the company should have done is address the fundamental problem:\nthat the product is only moderately appealing. Hiring people is\nrarely the way to fix that. More often than not it makes it harder.\nAt this early stage, the product needs to evolve more than to be\n\"built out,\" and that's usually easier with fewer people.\n\n[\n4\n]\nAsking whether you're default alive or default",
    "whether you're default alive or default dead may save you\nfrom this. Maybe the alarm bells it sets off will counteract the\nforces that push you to overhire. Instead you'll be compelled to\nseek growth in other ways. For example, by \ndoing\nthings that don't scale\n, or by redesigning the product in the\nway only founders can.\nAnd for many if not most startups, these paths to growth will be\nthe ones",
    "startups, these paths to growth will be\nthe ones that actually work.\nAirbnb waited 4 months after raising money at the end of Y Combinator\nbefore they hired their first employee. In the meantime the founders\nwere terribly overworked. But they were overworked evolving Airbnb\ninto the astonishingly successful organism it is now.\nNotes\n[\n1\n]\nSteep usage growth will also interest investors.",
    "usage growth will also interest investors. Revenue\nwill ultimately be a constant multiple of usage, so x% usage growth\npredicts x% revenue growth. But in practice investors discount\nmerely predicted revenue, so if you're measuring usage you need a\nhigher growth rate to impress investors.\n[\n2\n]\nStartups that don't raise money are saved from hiring too\nfast because they can't afford to. But that",
    "too\nfast because they can't afford to. But that doesn't mean you should\navoid raising money in order to avoid this problem, any more than\nthat total abstinence is the only way to avoid becoming an alcoholic.\n[\n3\n]\nI would not be surprised if VCs' tendency to push founders\nto overhire is not even in their own interest. They don't know how\nmany of the companies that get killed by overspending might",
    "companies that get killed by overspending might have\ndone well if they'd survived. My guess is a significant number.\n[\n4\n]\nAfter reading a draft, Sam Altman wrote:\n\"I think you should make the hiring point more strongly. I think\nit's roughly correct to say that YC's most successful companies\nhave never been the fastest to hire, and one of the marks of a great\nfounder is being able to resist this",
    "of a great\nfounder is being able to resist this urge.\"\nPaul Buchheit adds:\n\"A related problem that I see a lot is premature scaling—founders\ntake a small business that isn't really working (bad unit economics,\ntypically) and then scale it up because they want impressive growth\nnumbers. This is similar to over-hiring in that it makes the business\nmuch harder to fix once it's big, plus they are",
    "harder to fix once it's big, plus they are bleeding cash really\nfast.\"\n\nThanks\n to Sam Altman, Paul Buchheit, Joe Gebbia, Jessica Livingston,\nand Geoff Ralston for reading drafts of this.",
    "Apple's Mistake\n\nApple's Mistake\n\nWant to start a startup?\n Get funded by\n\nY Combinator\n.\n\nNovember 2009\nI don't think Apple realizes how badly the App Store approval process\nis broken. Or rather, I don't think they realize how much it matters\nthat it's broken.\nThe way Apple runs the App Store has harmed their reputation with\nprogrammers more than anything else they've ever done. \nTheir reputation",
    "anything else they've ever done. \nTheir reputation with programmers used to be great.\nIt used to be the most common complaint you heard\nabout Apple was that their fans admired them too uncritically.\nThe App Store has changed that. Now a lot of programmers\nhave started to see Apple as evil.\nHow much of the goodwill Apple once had with programmers have they\nlost over the App Store? A third? Half?",
    "have they\nlost over the App Store? A third? Half? And that's just so far.\nThe App Store is an ongoing karma leak.\n* * *\nHow did Apple get into this mess? Their fundamental problem is\nthat they don't understand software.\nThey treat iPhone apps the way they treat the music they sell through\niTunes. Apple is the channel; they own the user; if you want to\nreach users, you do it on their terms. The",
    "want to\nreach users, you do it on their terms. The record labels agreed,\nreluctantly. But this model doesn't work for software. It doesn't\nwork for an intermediary to own the user. The software business\nlearned that in the early 1980s, when companies like VisiCorp showed\nthat although the words \"software\" and \"publisher\" fit together,\nthe underlying concepts don't. Software isn't like music or",
    "concepts don't. Software isn't like music or books.\nIt's too complicated for a third party to act as an intermediary\nbetween developer and user. And yet that's what Apple is trying\nto be with the App Store: a software publisher. And a particularly\noverreaching one at that, with fussy tastes and a rigidly enforced\nhouse style.\nIf software publishing didn't work in 1980, it works even less now\nthat",
    "didn't work in 1980, it works even less now\nthat software development has evolved from a small number of big\nreleases to a constant stream of small ones. But Apple doesn't\nunderstand that either. Their model of product development derives\nfrom hardware. They work on something till they think it's finished,\nthen they release it. You have to do that with hardware, but because\nsoftware is so easy to",
    "with hardware, but because\nsoftware is so easy to change, its design can benefit from evolution.\nThe standard way to develop applications now is to launch fast and\niterate. Which means it's a disaster to have long, random delays\neach time you release a new version.\nApparently Apple's attitude is that developers should be more careful\nwhen they submit a new version to the App Store. They would",
    "submit a new version to the App Store. They would say\nthat. But powerful as they are, they're not powerful enough to\nturn back the evolution of technology. Programmers don't use\nlaunch-fast-and-iterate out of laziness. They use it because it\nyields the best results. By obstructing that process, Apple is\nmaking them do bad work, and programmers hate that as much as Apple\nwould.\nHow would Apple like",
    "that as much as Apple\nwould.\nHow would Apple like it if when they discovered a serious bug in\nOS X, instead of releasing a software update immediately, they had\nto submit their code to an intermediary who sat on it for a month\nand then rejected it because it contained an icon they didn't like?\nBy breaking software development, Apple gets the opposite of what\nthey intended: the version of an app",
    "of what\nthey intended: the version of an app currently available in the App\nStore tends to be an old and buggy one. One developer told me:\n\n As a result of their process, the App Store is full of half-baked\n applications. I make a new version almost every day that I release\n to beta users. The version on the App Store feels old and crappy.\n I'm sure that a lot of developers feel this way: One",
    "sure that a lot of developers feel this way: One emotion is\n \"I'm not really proud about what's in the App Store\", and it's\n combined with the emotion \"Really, it's Apple's fault.\"\n\nAnother wrote:\n\n I believe that they think their approval process helps users by\n ensuring quality. In reality, bugs like ours get through all the\n time and then it can take 4-8 weeks to get that bug fix approved,",
    "can take 4-8 weeks to get that bug fix approved,\n leaving users to think that iPhone apps sometimes just don't work.\n Worse for Apple, these apps work just fine on other platforms\n that have immediate approval processes.\n\nActually I suppose Apple has a third misconception: that all the\ncomplaints about App Store approvals are not a serious problem.\nThey must hear developers complaining. But",
    "must hear developers complaining. But partners and suppliers\nare always complaining. It would be a bad sign if they weren't;\nit would mean you were being too easy on them. Meanwhile the iPhone\nis selling better than ever. So why do they need to fix anything?\nThey get away with maltreating developers, in the short term, because\nthey make such great hardware. I just bought a new 27\" iMac a\ncouple",
    "hardware. I just bought a new 27\" iMac a\ncouple days ago. It's fabulous. The screen's too shiny, and the\ndisk is surprisingly loud, but it's so beautiful that you can't\nmake yourself care.\nSo I bought it, but I bought it, for the first time, with misgivings.\nI felt the way I'd feel buying something made in a country with a\nbad human rights record. That was new. In the past when I bought\nthings",
    "That was new. In the past when I bought\nthings from Apple it was an unalloyed pleasure. Oh boy! They make\nsuch great stuff. This time it felt like a Faustian bargain. They\nmake such great stuff, but they're such assholes. Do I really want\nto support this company?\n* * *\nShould Apple care what people like me think? What difference does\nit make if they alienate a small minority of their users?\nThere",
    "alienate a small minority of their users?\nThere are a couple reasons they should care. One is that these\nusers are the people they want as employees. If your company seems\nevil, the best programmers won't work for you. That hurt Microsoft\na lot starting in the 90s. Programmers started to feel sheepish\nabout working there. It seemed like selling out. When people from\nMicrosoft were talking to other",
    "When people from\nMicrosoft were talking to other programmers and they mentioned where\nthey worked, there were a lot of self-deprecating jokes about having\ngone over to the dark side. But the real problem for Microsoft\nwasn't the embarrassment of the people they hired. It was the\npeople they never got. And you know who got them? Google and\nApple. If Microsoft was the Empire, they were the Rebel",
    "If Microsoft was the Empire, they were the Rebel Alliance.\nAnd it's largely because they got more of the best people that\nGoogle and Apple are doing so much better than Microsoft today.\nWhy are programmers so fussy about their employers' morals? Partly\nbecause they can afford to be. The best programmers can work\nwherever they want. They don't have to work for a company they\nhave qualms about.\nBut",
    "to work for a company they\nhave qualms about.\nBut the other reason programmers are fussy, I think, is that evil\nbegets stupidity. An organization that wins by exercising power\nstarts to lose the ability to win by doing better work. And it's\nnot fun for a smart person to work in a place where the best ideas\naren't the ones that win. I think the reason Google embraced \"Don't\nbe evil\" so eagerly was",
    "Google embraced \"Don't\nbe evil\" so eagerly was not so much to impress the outside world\nas to inoculate themselves against arrogance.\n\n[\n1\n]\nThat has worked for Google so far. They've become more\nbureaucratic, but otherwise they seem to have held true to their\noriginal principles. With Apple that seems less the case. When you\nlook at the famous \n\n1984 ad\n \nnow, it's easier to imagine Apple as",
    "1984 ad\n \nnow, it's easier to imagine Apple as the\ndictator on the screen than the woman with the hammer.\n\n[\n2\n]\n\nIn fact, if you read the dictator's speech it sounds uncannily like a\nprophecy of the App Store.\n\n We have triumphed over the unprincipled dissemination of facts.\nWe have created, for the first time in all history, a garden of\n pure ideology, where each worker may bloom secure from",
    "ideology, where each worker may bloom secure from the pests\n of contradictory and confusing truths.\n\nThe other reason Apple should care what programmers think of them\nis that when you sell a platform, developers make or break you. If\nanyone should know this, Apple should. VisiCalc made the Apple II.\nAnd programmers build applications for the platforms they use. Most\napplications—most startups,",
    "they use. Most\napplications—most startups, probably—grow out of personal projects.\nApple itself did. Apple made microcomputers because that's what\nSteve Wozniak wanted for himself. He couldn't have afforded a\nminicomputer. \n\n[\n3\n]\n\n Microsoft likewise started out making interpreters\nfor little microcomputers because\nBill Gates and Paul Allen were interested in using them. It's a\nrare startup that",
    "interested in using them. It's a\nrare startup that doesn't build something the founders use.\nThe main reason there are so many iPhone apps is that so many programmers\nhave iPhones. They may know, because they read it in an article,\nthat Blackberry has such and such market share. But in practice\nit's as if RIM didn't exist. If they're going to build something,\nthey want to be able to use it",
    "to build something,\nthey want to be able to use it themselves, and that means building\nan iPhone app.\nSo programmers continue to develop iPhone apps, even though Apple\ncontinues to maltreat them. They're like someone stuck in an abusive\nrelationship. They're so attracted to the iPhone that they can't\nleave. But they're looking for a way out. One wrote:\n\n While I did enjoy developing for the",
    "One wrote:\n\n While I did enjoy developing for the iPhone, the control they\n place on the App Store does not give me the drive to develop\n applications as I would like. In fact I don't intend to make any\n more iPhone applications unless absolutely necessary.\n\n[\n4\n]\n\nCan anything break this cycle? No device I've seen so far could.\nPalm and RIM haven't a hope. The only credible contender is",
    "RIM haven't a hope. The only credible contender is Android.\nBut Android is an orphan; Google doesn't really care about it, not\nthe way Apple cares about the iPhone. Apple cares about the iPhone\nthe way Google cares about search.\n* * *\nIs the future of handheld devices one locked down by Apple? It's\na worrying prospect. It would be a bummer to have another grim\nmonoculture like we had in the 1990s.",
    "another grim\nmonoculture like we had in the 1990s. In 1995, writing software\nfor end users was effectively identical with writing Windows\napplications. Our horror at that prospect was the single biggest\nthing that drove us to start building \nweb apps\n.\nAt least we know now what it would take to break Apple's lock.\nYou'd have to get iPhones out of programmers' hands. If programmers\nused some other",
    "programmers' hands. If programmers\nused some other device for mobile web access, they'd start to develop\napps for that instead.\nHow could you make a device programmers liked better than the iPhone?\nIt's unlikely you could make something better designed. Apple\nleaves no room there. So this alternative device probably couldn't\nwin on general appeal. It would have to win by virtue of some\nappeal it",
    "It would have to win by virtue of some\nappeal it had to programmers specifically.\nOne way to appeal to programmers is with software. If you\ncould think of an application programmers had to have, but that\nwould be impossible in the circumscribed world of the iPhone, \nyou could presumably get them to switch.\nThat would definitely happen if programmers started to use handhelds\nas development",
    "started to use handhelds\nas development machines—if handhelds displaced laptops the\nway laptops displaced desktops. You need more control of a development\nmachine than Apple will let you have over an iPhone.\nCould anyone make a device that you'd carry around in your pocket\nlike a phone, and yet would also work as a development machine?\nIt's hard to imagine what it would look like. But I've",
    "hard to imagine what it would look like. But I've learned\nnever to say never about technology. A phone-sized device that\nwould work as a development machine is no more miraculous by present\nstandards than the iPhone itself would have seemed by the standards\nof 1995.\nMy current development machine is a MacBook Air, which I use with\nan external monitor and keyboard in my office, and by itself",
    "monitor and keyboard in my office, and by itself when\ntraveling. If there was a version half the size I'd prefer it.\nThat still wouldn't be small enough to carry around everywhere like\na phone, but we're within a factor of 4 or so. Surely that gap is\nbridgeable. In fact, let's make it an\n\nRFS\n. Wanted: \nWoman with hammer.\nNotes\n[\n1\n]\nWhen Google adopted \"Don't be evil,\" they were still so",
    "Google adopted \"Don't be evil,\" they were still so small\nthat no one would have expected them to be, yet.\n\n[\n2\n]\nThe dictator in the 1984 ad isn't Microsoft, incidentally;\nit's IBM. IBM seemed a lot more frightening in those days, but\nthey were friendlier to developers than Apple is now.\n[\n3\n]\nHe couldn't even afford a \nmonitor\n. That's why the Apple\nI used a TV as a monitor.\n[\n4\n]\nSeveral people",
    "used a TV as a monitor.\n[\n4\n]\nSeveral people I talked to mentioned how much they liked the\niPhone SDK. The problem is not Apple's products but their policies.\nFortunately policies are software; Apple can change them instantly\nif they want to. Handy that, isn't it?\nThanks\n to Sam Altman, Trevor Blackwell, Ross Boucher, \nJames Bracy, Gabor Cselle,\nPatrick Collison, Jason Freedman, John Gruber, Joe",
    "Collison, Jason Freedman, John Gruber, Joe Hewitt, Jessica Livingston,\nRobert Morris, Teng Siong Ong, Nikhil Pandit, Savraj Singh, and Jared Tame for reading drafts of this.\nRussian Translation",
    "Arc\n\nArc\n\nArc is a new dialect of Lisp we're working on. You can \nfind an early release and ask questions at \n\narclanguage.org\n.\nThe Arc community is very newbie-friendly,\nbecause all the users are newbies to some extent.\nTo get an idea of where we eventually hope to take Arc,\nsee \nBeing Popular\n\nand \nThe Hundred-Year Language\n.\n\nForum\nTutorial\nGet Arc\nArc's Out\nTake the Arc Challenge\nFirst",
    "Arc\nArc's Out\nTake the Arc Challenge\nFirst Priority: Core Language\nArc FAQ\nHelp Us\nDesign Philosophy\nWhy Arc Isn't Especially Object-Oriented\nLFM and LFSP\nIdeas People Have Sent Us\nOld Arc Stuff",
    "Essays\n\nEssays\n\nIf you're not sure which to read, try \n\nHow to Do Great Work\n,\n\nHaving Kids\n,\nor \n\nHow to Lose Time and Money\n.\n\nWhat to Do\nThe Origins of Wokeness\nWrites and Write-Nots\nWhen To Do What You Love\nFounder Mode\nThe Right Kind of Stubborn\nThe Reddits\nHow to Start Google\nThe Best Essay\nSuperlinear Returns\nHow to Do Great Work\nHow to Get New Ideas\nThe Need to Read\nWhat You (Want to)*",
    "Get New Ideas\nThe Need to Read\nWhat You (Want to)* Want\nAlien Truth\nWhat I've Learned from Users\nHeresy\nPutting Ideas into Words\nIs There Such a Thing as Good Taste?\nBeyond Smart\nWeird Languages\nHow to Work Hard\nA Project of One's Own\nFierce Nerds\nCrazy New Ideas\nAn NFT That Saves Lives\nThe Real Reason to End the Death Penalty\nHow People Get Rich Now\nWrite Simply\nDonate Unrestricted\nWhat I Worked",
    "Now\nWrite Simply\nDonate Unrestricted\nWhat I Worked On\nEarnestness\nBillionaires Build\nThe Airbnbs\nHow to Think for Yourself\nEarly Work\nModeling a Wealth Tax\nThe Four Quadrants of Conformism\nOrthodox Privilege\nCoronavirus and Credibility\nHow to Write Usefully\nBeing a Noob\nHaters\nThe Two Kinds of Moderate\nFashionable Problems\nHaving Kids\nThe Lesson to Unlearn\nNovelty and Heresy\nThe Bus Ticket Theory",
    "Unlearn\nNovelty and Heresy\nThe Bus Ticket Theory of Genius\nGeneral and Surprising\nCharisma / Power\nThe Risk of Discovery\nHow to Make Pittsburgh a Startup Hub\nLife is Short\nEconomic Inequality\nThe Refragmentation\nJessica Livingston\nA Way to Detect Bias\nWrite Like You Talk\nDefault Alive or Default Dead?\nWhy It's Safe for Founders to Be Nice\nChange Your Name\nWhat Microsoft Is this the Altair Basic",
    "Your Name\nWhat Microsoft Is this the Altair Basic of?\nThe Ronco Principle\nWhat Doesn't Seem Like Work?\nDon't Talk to Corp Dev\nLet the Other 95% of Great Programmers In\nHow to Be an Expert in a Changing World\nHow You Know\nThe Fatal Pinch\nMean People Fail\nBefore the Startup\nHow to Raise Money\nInvestor Herd Dynamics\nHow to Convince Investors\nDo Things that Don't Scale\nStartup Investing Trends\nHow to",
    "that Don't Scale\nStartup Investing Trends\nHow to Get Startup Ideas\nThe Hardware Renaissance\nStartup = Growth\nBlack Swan Farming\nThe Top of My Todo List\nWriting and Speaking\nHow Y Combinator Started\nDefining Property\nFrighteningly Ambitious Startup Ideas\nA Word to the Resourceful\nSchlep Blindness\nSnapshot: Viaweb, June 1998\nWhy Startup Hubs Work\nThe Patent Pledge\nSubject: Airbnb\nFounder",
    "Work\nThe Patent Pledge\nSubject: Airbnb\nFounder Control\nTablets\nWhat We Look for in Founders\nThe New Funding Landscape\nWhere to See Silicon Valley\nHigh Resolution Fundraising \nWhat Happened to Yahoo \nThe Future of Startup Funding \nThe Acceleration of Addictiveness\nThe Top Idea in Your Mind \nHow to Lose Time and Money \nOrganic Startup Ideas\nApple's Mistake\nWhat Startups Are Really Like\nPersuade xor",
    "Mistake\nWhat Startups Are Really Like\nPersuade xor Discover \nPost-Medium Publishing\nThe List of N Things\nThe Anatomy of Determination \nWhat Kate Saw in Silicon Valley \nThe Trouble with the Segway\nRamen Profitable\nMaker's Schedule, Manager's Schedule \nA Local Revolution?\nWhy Twitter is a Big Deal\nThe Founder Visa\nFive Founders\nRelentlessly Resourceful\nHow to Be an Angel Investor\nWhy TV Lost\nCan You",
    "to Be an Angel Investor\nWhy TV Lost\nCan You Buy a Silicon Valley? Maybe.\nWhat I've Learned from Hacker News\nStartups in 13 Sentences\nKeep Your Identity Small \nAfter Credentials\nCould VC be a Casualty of the Recession?\nThe High-Res Society\nThe Other Half of \"Artists Ship\" \nWhy to Start a Startup in a Bad Economy\nA Fundraising Survival Guide\nThe Pooled-Risk Company Management Company\nCities and",
    "Pooled-Risk Company Management Company\nCities and Ambition\nDisconnecting Distraction\nLies We Tell Kids\nBe Good\nWhy There Aren't More Googles\nSome Heroes\nHow to Disagree\nYou Weren't Meant to Have a Boss\nA New Venture Animal\nTrolls\nSix Principles for Making New Things\nWhy to Move to a Startup Hub\nThe Future of Web Startups\nHow to Do Philosophy\nNews from the Front\nHow Not to Die\nHolding a Program in",
    "from the Front\nHow Not to Die\nHolding a Program in One's Head\nStuff\nThe Equity Equation\nAn Alternative Theory of Unions\nThe Hacker's Guide to Investors\nTwo Kinds of Judgement\nMicrosoft is Dead\nWhy to Not Not Start a Startup\nIs It Worth Being Wise?\nLearning from Founders\nHow Art Can Be Good\nThe 18 Mistakes That Kill Startups\nA Student's Guide to Startups\nHow to Present to Investors\nCopy What You",
    "Startups\nHow to Present to Investors\nCopy What You Like\nThe Island Test\nThe Power of the Marginal\nWhy Startups Condense in America\nHow to Be Silicon Valley\nThe Hardest Lessons for Startups to Learn\nSee Randomness\nAre Software Patents Evil?\n6,631,372\nWhy YC\nHow to Do What You Love\nGood and Bad Procrastination\nWeb 2.0\nHow to Fund a Startup\nThe Venture Capital Squeeze\nIdeas for Startups\nWhat I Did",
    "Capital Squeeze\nIdeas for Startups\nWhat I Did this Summer\nInequality and Risk\nAfter the Ladder\nWhat Business Can Learn from Open Source\nHiring is Obsolete\nThe Submarine\nWhy Smart People Have Bad Ideas\nReturn of the Mac\nWriting, Briefly\nUndergraduation\nA Unified Theory of VC Suckage\nHow to Start a Startup\nWhat You'll Wish You'd Known\nMade in USA\nIt's Charisma, Stupid\nBradley's Ghost\nA Version",
    "Charisma, Stupid\nBradley's Ghost\nA Version 1.0\nWhat the Bubble Got Right\nThe Age of the Essay\nThe Python Paradox\nGreat Hackers\nMind the Gap\nHow to Make Wealth\nThe Word \"Hacker\"\nWhat You Can't Say\nFilters that Fight Back\nHackers and Painters\nIf Lisp is So Great\nThe Hundred-Year Language\nWhy Nerds are Unpopular\nBetter Bayesian Filtering\nDesign and Research\nA Plan for Spam\nRevenge of the",
    "and Research\nA Plan for Spam\nRevenge of the Nerds\nSuccinctness is Power\nWhat Languages Fix\nTaste for Makers\nWhy Arc Isn't Especially Object-Oriented\nWhat Made Lisp Different\nThe Other Road Ahead\nThe Roots of Lisp\nFive Questions about Language Design\nBeing Popular\nJava's Cover\nBeating the Averages\nLisp for Web-Based Applications\nChapter 1 of Ansi Common Lisp\nChapter 2 of Ansi Common",
    "1 of Ansi Common Lisp\nChapter 2 of Ansi Common Lisp\nProgramming Bottom-Up\nThis Year We Can End the Death Penalty in California\n\nRSS\n feed",
    "The Other Half of \"Artists Ship\" \n\nThe Other Half of \"Artists Ship\" \n\nNovember 2008\nOne of the differences between big companies and startups is that\nbig companies tend to have developed procedures to protect themselves\nagainst mistakes. A startup walks like a toddler, bashing\ninto things and falling over all the time. A big company is more\ndeliberate.\nThe gradual accumulation of checks in an",
    "gradual accumulation of checks in an organization is a kind of\nlearning, based on disasters that have happened to it or others\nlike it. After giving a contract to a supplier who goes bankrupt\nand fails to deliver, for example, a company might require all\nsuppliers to prove they're solvent before submitting bids.\nAs companies grow they invariably get more such checks, either in\nresponse to",
    "get more such checks, either in\nresponse to disasters they've suffered, or (probably more often)\nby hiring people from bigger companies who bring with them customs\nfor protecting against new types of disasters.\nIt's natural for organizations to learn from mistakes. The problem\nis, people who propose new checks almost never consider that the\ncheck itself has a cost.\nEvery check has a cost.\n For",
    "itself has a cost.\nEvery check has a cost.\n For example, consider the case of making\nsuppliers verify their solvency. Surely that's mere prudence? But\nin fact it could have substantial costs. There's obviously the\ndirect cost in time of the people on both sides who supply and check\nproofs of the supplier's solvency. But the real costs are the ones\nyou never hear about: the company that would be",
    "never hear about: the company that would be the best supplier,\nbut doesn't bid because they can't spare the effort to get verified.\nOr the company that would be the best supplier, but falls just short\nof the threshold for solvency—which will of course have been set\non the high side, since there is no apparent cost of increasing it.\nWhenever someone in an organization proposes to add a new",
    "someone in an organization proposes to add a new check,\nthey should have to explain not just the benefit but the cost. No\nmatter how bad a job they did of analyzing it, this meta-check would\nat least remind everyone there had to \nbe\n a cost, and send them\nlooking for it.\nIf companies started doing that, they'd find some surprises. Joel\nSpolsky recently spoke at Y Combinator about selling software",
    "spoke at Y Combinator about selling software to\ncorporate customers. He said that in most companies software costing\nup to about $1000 could be bought by individual managers without\nany additional approvals. Above that threshold, software purchases\ngenerally had to be approved by a committee. But babysitting this\nprocess was so expensive for software vendors that it didn't make\nsense to charge",
    "vendors that it didn't make\nsense to charge less than $50,000. Which means if you're making\nsomething you might otherwise have charged $5000 for, you have to\nsell it for $50,000 instead.\nThe purpose of the committee is presumably to ensure that the company\ndoesn't waste money. And yet the result is that the company pays\n10 times as much.\nChecks on purchases will always be expensive, because the",
    "on purchases will always be expensive, because the harder\nit is to sell something to you, the more it has to cost. And not\nmerely linearly, either. If you're hard enough to sell to, the\npeople who are best at making things don't want to bother. The\nonly people who will sell to you are companies that specialize in\nselling to you. Then you've sunk to a whole new level of inefficiency.\nMarket",
    "sunk to a whole new level of inefficiency.\nMarket mechanisms no longer protect you, because the good suppliers\nare no longer in the market.\nSuch things happen constantly to the biggest organizations of all,\ngovernments. But checks instituted by governments can cause much\nworse problems than merely overpaying. Checks instituted by\ngovernments can cripple a country's whole economy. Up till",
    "can cripple a country's whole economy. Up till about\n1400, China was richer and more technologically advanced than Europe.\nOne reason Europe pulled ahead was that the Chinese government\nrestricted long trading voyages. So it was left to the Europeans\nto explore and eventually to dominate the rest of the world, including\nChina.\nIn more recent times, Sarbanes-Oxley has practically destroyed the\nUS",
    "Sarbanes-Oxley has practically destroyed the\nUS IPO market. That wasn't the intention of the legislators who\nwrote it. They just wanted to add a few more checks on public\ncompanies. But they forgot to consider the cost. They forgot that\ncompanies about to go public are usually rather stretched, and that\nthe weight of a few extra checks that might be easy for General\nElectric to bear are enough to",
    "be easy for General\nElectric to bear are enough to prevent younger companies from being\npublic at all.\nOnce you start to think about the cost of checks, you can start to\nask other interesting questions. Is the cost increasing or decreasing?\nIs it higher in some areas than others? Where does it increase\ndiscontinuously? If large organizations started to ask questions\nlike that, they'd learn some",
    "to ask questions\nlike that, they'd learn some frightening things.\nI think the cost of checks may actually be increasing. The reason\nis that software plays an increasingly important role in companies,\nand the people who write software are particularly harmed by checks.\nProgrammers are unlike many types of workers in that the best ones\nactually prefer to work hard. This doesn't seem to be the case",
    "to work hard. This doesn't seem to be the case in\nmost types of work. When I worked in fast food, we didn't prefer\nthe busy times. And when I used to mow lawns, I definitely didn't\nprefer it when the grass was long after a week of rain.\nProgrammers, though, like it better when they write more code. Or\nmore precisely, when they release more code. Programmers like to\nmake a difference. Good ones,",
    "Programmers like to\nmake a difference. Good ones, anyway.\nFor good programmers, one of the best things about working for a\nstartup is that there are few checks on releases. In true startups,\nthere are no external checks at all. If you have an idea for a new\nfeature in the morning, you can write it and push it to the production\nservers before lunch. And when you can do that, you have more\nideas.\nAt",
    "And when you can do that, you have more\nideas.\nAt big companies, software has to go through various approvals\nbefore it can be launched. And the cost of doing this can be\nenormous—in fact, discontinuous. I was talking recently to a\ngroup of three programmers whose startup had been acquired a few\nyears before by a big company. When they'd been independent, they\ncould release changes instantly. Now,",
    "they\ncould release changes instantly. Now, they said, the absolute\nfastest they could get code released on the production servers was\ntwo weeks.\nThis didn't merely make them less productive. It made them hate\nworking for the acquirer.\nHere's a sign of how much programmers like to be able to work hard:\nthese guys would have \npaid\n to be able to release code immediately,\nthe way they used to. I",
    "release code immediately,\nthe way they used to. I asked them if they'd trade 10% of the\nacquisition price for the ability to release code immediately, and\nall three instantly said yes. Then I asked what was the maximum\npercentage of the acquisition price they'd trade for it. They said\nthey didn't want to think about it, because they didn't want to\nknow how high they'd go, but I got the impression",
    "how high they'd go, but I got the impression it might be as\nmuch as half.\nThey'd have sacrificed hundreds of thousands of dollars, perhaps\nmillions, just to be able to deliver more software to users. And\nyou know what? It would have been perfectly safe to let them. In\nfact, the acquirer would have been better off; not only wouldn't\nthese guys have broken anything, they'd have gotten a lot more",
    "broken anything, they'd have gotten a lot more done.\nSo the acquirer is in fact getting worse performance at greater\ncost. Just like the committee approving software purchases.\nAnd just as the greatest danger of being hard to sell to is not\nthat you overpay but that the best suppliers won't even sell to\nyou, the greatest danger of applying too many checks to your\nprogrammers is not that you'll",
    "many checks to your\nprogrammers is not that you'll make them unproductive, but that\ngood programmers won't even want to work for you.\nSteve Jobs's famous maxim \"artists ship\" works both ways. Artists\naren't merely capable of shipping. They insist on it. So if you\ndon't let people ship, you won't have any artists.",
    "Beating the Averages\n\nBeating the Averages\n\nWant to start a startup?\n Get funded by\n\nY Combinator\n.\n\nApril 2001, rev. April 2003\n(This article is derived from a talk given at the 2001 Franz\nDeveloper Symposium.)\n\nIn the summer of 1995, my friend Robert Morris and I\nstarted a startup called \n\nViaweb\n. \nOur plan was to write\nsoftware that would let end users build online stores.\nWhat was novel about",
    "users build online stores.\nWhat was novel about this software, at the time, was\nthat it ran on our server, using ordinary Web pages\nas the interface.\nA lot of people could have been having this idea at the\nsame time, of course, but as far as I know, Viaweb was\nthe first Web-based application. It seemed such\na novel idea to us that we named the company after it:\nViaweb, because our software worked",
    "after it:\nViaweb, because our software worked via the Web,\ninstead of running on your desktop computer.\nAnother unusual thing about this software was that it\nwas written primarily in a programming language called\nLisp. It was one of the first big end-user\napplications to be written in Lisp, which up till then\nhad been used mostly in universities and research labs. [1]\nThe Secret Weapon\nEric",
    "and research labs. [1]\nThe Secret Weapon\nEric Raymond has written an essay called \"How to Become a Hacker,\"\nand in it, among other things, he tells would-be hackers what\nlanguages they should learn. He suggests starting with Python and\nJava, because they are easy to learn. The serious hacker will also\nwant to learn C, in order to hack Unix, and Perl for system\nadministration and cgi scripts.",
    "Perl for system\nadministration and cgi scripts. Finally, the truly serious hacker\nshould consider learning Lisp:\n\n Lisp is worth learning for the profound enlightenment experience\n you will have when you finally get it; that experience will make\n you a better programmer for the rest of your days, even if you\n never actually use Lisp itself a lot.\n\nThis is the same argument you tend to hear for",
    "is the same argument you tend to hear for learning Latin. It\nwon't get you a job, except perhaps as a classics professor, but\nit will improve your mind, and make you a better writer in languages\nyou do want to use, like English.\nBut wait a minute. This metaphor doesn't stretch that far. The\nreason Latin won't get you a job is that no one speaks it. If you\nwrite in Latin, no one can understand you.",
    "If you\nwrite in Latin, no one can understand you. But Lisp is a computer\nlanguage, and computers speak whatever language you, the programmer,\ntell them to.\nSo if Lisp makes you a better programmer, like he says, why wouldn't\nyou want to use it? If a painter were offered a brush that would\nmake him a better painter, it seems to me that he would want to\nuse it in all his paintings, wouldn't he? I'm",
    "to\nuse it in all his paintings, wouldn't he? I'm not trying to make\nfun of Eric Raymond here. On the whole, his advice is good. What\nhe says about Lisp is pretty much the conventional wisdom. But\nthere is a contradiction in the conventional wisdom: Lisp will\nmake you a better programmer, and yet you won't use it.\nWhy not? Programming languages are just tools, after all. If Lisp\nreally does yield",
    "just tools, after all. If Lisp\nreally does yield better programs, you should use it. And if it\ndoesn't, then who needs it?\nThis is not just a theoretical question. Software is a very\ncompetitive business, prone to natural monopolies. A company that\ngets software written faster and better will, all other things\nbeing equal, put its competitors out of business. And when you're\nstarting a startup,",
    "of business. And when you're\nstarting a startup, you feel this very keenly. Startups tend to\nbe an all or nothing proposition. You either get rich, or you get\nnothing. In a startup, if you bet on the wrong technology, your\ncompetitors will crush you.\nRobert and I both knew Lisp well, and we couldn't see any reason\nnot to trust our instincts and go with Lisp. We knew that everyone\nelse was writing",
    "with Lisp. We knew that everyone\nelse was writing their software in C++ or Perl. But we also knew\nthat that didn't mean anything. If you chose technology that way,\nyou'd be running Windows. When you choose technology, you have to\nignore what other people are doing, and consider only what will\nwork the best.\nThis is especially true in a startup. In a big company, you can\ndo what all the other big",
    "a big company, you can\ndo what all the other big companies are doing. But a startup can't\ndo what all the other startups do. I don't think a lot of people\nrealize this, even in startups.\nThe average big company grows at about ten percent a year. So if\nyou're running a big company and you do everything the way the\naverage big company does it, you can expect to do as well as the\naverage big",
    "you can expect to do as well as the\naverage big company-- that is, to grow about ten percent a year.\nThe same thing will happen if you're running a startup, of course.\nIf you do everything the way the average startup does it, you should\nexpect average performance. The problem here is, average performance\nmeans that you'll go out of business. The survival rate for startups\nis way less than fifty",
    "survival rate for startups\nis way less than fifty percent. So if you're running a startup,\nyou had better be doing something odd. If not, you're in trouble.\nBack in 1995, we knew something that I don't think our competitors\nunderstood, and few understand even now: when you're writing\nsoftware that only has to run on your own servers, you can use\nany language you want. When you're writing desktop",
    "language you want. When you're writing desktop software,\nthere's a strong bias toward writing applications in the same\nlanguage as the operating system. Ten years ago, writing applications\nmeant writing applications in C. But with Web-based software,\nespecially when you have the source code of both the language and\nthe operating system, you can use whatever language you want.\nThis new freedom is a",
    "whatever language you want.\nThis new freedom is a double-edged sword, however. Now that you\ncan use any language, you have to think about which one to use.\nCompanies that try to pretend nothing has changed risk finding that\ntheir competitors do not.\nIf you can use any language, which do you use? We chose Lisp.\nFor one thing, it was obvious that rapid development would be\nimportant in this market.",
    "development would be\nimportant in this market. We were all starting from scratch, so\na company that could get new features done before its competitors\nwould have a big advantage. We knew Lisp was a really good language\nfor writing software quickly, and server-based applications magnify\nthe effect of rapid development, because you can release software\nthe minute it's done.\nIf other companies didn't",
    "minute it's done.\nIf other companies didn't want to use Lisp, so much the better.\nIt might give us a technological edge, and we needed all the help\nwe could get. When we started Viaweb, we had no experience in\nbusiness. We didn't know anything about marketing, or hiring\npeople, or raising money, or getting customers. Neither of us had\never even had what you would call a real job. The only thing",
    "had what you would call a real job. The only thing we\nwere good at was writing software. We hoped that would save us.\nAny advantage we could get in the software department, we would\ntake.\nSo you could say that using Lisp was an experiment. Our hypothesis\nwas that if we wrote our software in Lisp, we'd be able to get\nfeatures done faster than our competitors, and also to do things\nin our software",
    "competitors, and also to do things\nin our software that they couldn't do. And because Lisp was so\nhigh-level, we wouldn't need a big development team, so our costs\nwould be lower. If this were so, we could offer a better product\nfor less money, and still make a profit. We would end up getting\nall the users, and our competitors would get none, and eventually\ngo out of business. That was what we",
    "eventually\ngo out of business. That was what we hoped would happen, anyway.\nWhat were the results of this experiment? Somewhat surprisingly,\nit worked. We eventually had many competitors, on the order of\ntwenty to thirty of them, but none of their software could compete\nwith ours. We had a wysiwyg online store builder that ran on the\nserver and yet felt like a desktop application. Our",
    "and yet felt like a desktop application. Our competitors\nhad cgi scripts. And we were always far ahead of them in features.\nSometimes, in desperation, competitors would try to introduce\nfeatures that we didn't have. But with Lisp our development cycle\nwas so fast that we could sometimes duplicate a new feature within\na day or two of a competitor announcing it in a press release. By\nthe time",
    "announcing it in a press release. By\nthe time journalists covering the press release got round to calling\nus, we would have the new feature too.\nIt must have seemed to our competitors that we had some kind of\nsecret weapon-- that we were decoding their Enigma traffic or\nsomething. In fact we did have a secret weapon, but it was simpler\nthan they realized. No one was leaking news of their features",
    "No one was leaking news of their features to\nus. We were just able to develop software faster than anyone\nthought possible.\nWhen I was about nine I happened to get hold of a copy of \nThe Day\nof the Jackal,\n by Frederick Forsyth. The main character is an\nassassin who is hired to kill the president of France. The assassin\nhas to get past the police to get up to an apartment that overlooks\nthe",
    "to get up to an apartment that overlooks\nthe president's route. He walks right by them, dressed up as an\nold man on crutches, and they never suspect him.\nOur secret weapon was similar. We wrote our software in a weird\nAI language, with a bizarre syntax full of parentheses. For years\nit had annoyed me to hear Lisp described that way. But now it\nworked to our advantage. In business, there is nothing",
    "to our advantage. In business, there is nothing more valuable\nthan a technical advantage your competitors don't understand. In\nbusiness, as in war, surprise is worth as much as force.\nAnd so, I'm a little embarrassed to say, I never said anything\npublicly about Lisp while we were working on Viaweb. We never\nmentioned it to the press, and if you searched for Lisp on our Web\nsite, all you'd find",
    "searched for Lisp on our Web\nsite, all you'd find were the titles of two books in my bio. This\nwas no accident. A startup should give its competitors as little\ninformation as possible. If they didn't know what language our\nsoftware was written in, or didn't care, I wanted to keep it that\nway.[2]\nThe people who understood our technology best were the customers.\nThey didn't care what language Viaweb",
    "customers.\nThey didn't care what language Viaweb was written in either, but\nthey noticed that it worked really well. It let them build great\nlooking online stores literally in minutes. And so, by word of\nmouth mostly, we got more and more users. By the end of 1996 we\nhad about 70 stores online. At the end of 1997 we had 500. Six\nmonths later, when Yahoo bought us, we had 1070 users. Today,",
    "when Yahoo bought us, we had 1070 users. Today, as\nYahoo Store, this software continues to dominate its market. It's\none of the more profitable pieces of Yahoo, and the stores built\nwith it are the foundation of Yahoo Shopping. I left Yahoo in\n1999, so I don't know exactly how many users they have now, but\nthe last I heard there were about 20,000.\n\nThe Blub Paradox\nWhat's so great about Lisp? And",
    "Blub Paradox\nWhat's so great about Lisp? And if Lisp is so great, why doesn't\neveryone use it? These sound like rhetorical questions, but actually\nthey have straightforward answers. Lisp is so great not because\nof some magic quality visible only to devotees, but because it is\nsimply the most powerful language available. And the reason everyone\ndoesn't use it is that programming languages are not",
    "use it is that programming languages are not merely\ntechnologies, but habits of mind as well, and nothing changes\nslower. Of course, both these answers need explaining.\nI'll begin with a shockingly controversial statement: programming\nlanguages vary in power.\nFew would dispute, at least, that high level languages are more\npowerful than machine language. Most programmers today would agree\nthat you",
    "Most programmers today would agree\nthat you do not, ordinarily, want to program in machine language.\nInstead, you should program in a high-level language, and have a\ncompiler translate it into machine language for you. This idea is\neven built into the hardware now: since the 1980s, instruction sets\nhave been designed for compilers rather than human programmers.\nEveryone knows it's a mistake to",
    "programmers.\nEveryone knows it's a mistake to write your whole program by hand\nin machine language. What's less often understood is that there\nis a more general principle here: that if you have a choice of\nseveral languages, it is, all other things being equal, a mistake\nto program in anything but the most powerful one. [3]\nThere are many exceptions to this rule. If you're writing a program\nthat",
    "to this rule. If you're writing a program\nthat has to work very closely with a program written in a certain\nlanguage, it might be a good idea to write the new program in the\nsame language. If you're writing a program that only has to do\nsomething very simple, like number crunching or bit manipulation,\nyou may as well use a less abstract language, especially since it\nmay be slightly faster. And if",
    "especially since it\nmay be slightly faster. And if you're writing a short, throwaway\nprogram, you may be better off just using whatever language has\nthe best library functions for the task. But in general, for\napplication software, you want to be using the most powerful\n(reasonably efficient) language you can get, and using anything\nelse is a mistake, of exactly the same kind, though possibly in",
    "of exactly the same kind, though possibly in a\nlesser degree, as programming in machine language.\nYou can see that machine language is very low level. But, at least\nas a kind of social convention, high-level languages are often all\ntreated as equivalent. They're not. Technically the term \"high-level\nlanguage\" doesn't mean anything very definite. There's no dividing\nline with machine languages on",
    "There's no dividing\nline with machine languages on one side and all the high-level\nlanguages on the other. Languages fall along a continuum [4] of\nabstractness, from the most powerful all the way down to machine\nlanguages, which themselves vary in power.\nConsider Cobol. Cobol is a high-level language, in the sense that\nit gets compiled into machine language. Would anyone seriously\nargue that Cobol",
    "language. Would anyone seriously\nargue that Cobol is equivalent in power to, say, Python? It's\nprobably closer to machine language than Python.\nOr how about Perl 4? Between Perl 4 and Perl 5, lexical closures\ngot added to the language. Most Perl hackers would agree that Perl\n5 is more powerful than Perl 4. But once you've admitted that,\nyou've admitted that one high level language can be more",
    "admitted that one high level language can be more powerful\nthan another. And it follows inexorably that, except in special\ncases, you ought to use the most powerful you can get.\nThis idea is rarely followed to its conclusion, though. After a\ncertain age, programmers rarely switch languages voluntarily.\nWhatever language people happen to be used to, they tend to consider\njust good",
    "to be used to, they tend to consider\njust good enough.\nProgrammers get very attached to their favorite languages, and I\ndon't want to hurt anyone's feelings, so to explain this point I'm\ngoing to use a hypothetical language called Blub. Blub falls right\nin the middle of the abstractness continuum. It is not the most\npowerful language, but it is more powerful than Cobol or machine\nlanguage.\nAnd in",
    "powerful than Cobol or machine\nlanguage.\nAnd in fact, our hypothetical Blub programmer wouldn't use either\nof them. Of course he wouldn't program in machine language. That's\nwhat compilers are for. And as for Cobol, he doesn't know how\nanyone can get anything done with it. It doesn't even have x (Blub\nfeature of your choice).\nAs long as our hypothetical Blub programmer is looking down the\npower",
    "Blub programmer is looking down the\npower continuum, he knows he's looking down. Languages less powerful\nthan Blub are obviously less powerful, because they're missing some\nfeature he's used to. But when our hypothetical Blub programmer\nlooks in the other direction, up the power continuum, he doesn't\nrealize he's looking up. What he sees are merely weird languages.\nHe probably considers them about",
    "weird languages.\nHe probably considers them about equivalent in power to Blub, but\nwith all this other hairy stuff thrown in as well. Blub is good\nenough for him, because he thinks in Blub.\nWhen we switch to the point of view of a programmer using any of\nthe languages higher up the power continuum, however, we find that\nhe in turn looks down upon Blub. How can you get anything done in\nBlub? It",
    "Blub. How can you get anything done in\nBlub? It doesn't even have y.\nBy induction, the only programmers in a position to see all the\ndifferences in power between the various languages are those who\nunderstand the most powerful one. (This is probably what Eric\nRaymond meant about Lisp making you a better programmer.) You can't\ntrust the opinions of the others, because of the Blub paradox:\nthey're",
    "the others, because of the Blub paradox:\nthey're satisfied with whatever language they happen to use, because\nit dictates the way they think about programs.\nI know this from my own experience, as a high school kid writing\nprograms in Basic. That language didn't even support recursion.\nIt's hard to imagine writing programs without using recursion, but\nI didn't miss it at the time. I thought in",
    "but\nI didn't miss it at the time. I thought in Basic. And I was a\nwhiz at it. Master of all I surveyed.\nThe five languages that Eric Raymond recommends to hackers fall at\nvarious points on the power continuum. Where they fall relative\nto one another is a sensitive topic. What I will say is that I\nthink Lisp is at the top. And to support this claim I'll tell you\nabout one of the things I find",
    "claim I'll tell you\nabout one of the things I find missing when I look at the other\nfour languages. How can you get anything done in them, I think,\nwithout macros? [5]\nMany languages have something called a macro. But Lisp macros are\nunique. And believe it or not, what they do is related to the\nparentheses. The designers of Lisp didn't put all those parentheses\nin the language just to be",
    "all those parentheses\nin the language just to be different. To the Blub programmer, Lisp\ncode looks weird. But those parentheses are there for a reason.\nThey are the outward evidence of a fundamental difference between\nLisp and other languages.\nLisp code is made out of Lisp data objects. And not in the trivial\nsense that the source files contain characters, and strings are\none of the data types",
    "characters, and strings are\none of the data types supported by the language. Lisp code, after\nit's read by the parser, is made of data structures that you can\ntraverse.\nIf you understand how compilers work, what's really going on is\nnot so much that Lisp has a strange syntax as that Lisp has no\nsyntax. You write programs in the parse trees that get generated\nwithin the compiler when other",
    "that get generated\nwithin the compiler when other languages are parsed. But these\nparse trees are fully accessible to your programs. You can write\nprograms that manipulate them. In Lisp, these programs are called\nmacros. They are programs that write programs.\nPrograms that write programs? When would you ever want to do that?\nNot very often, if you think in Cobol. All the time, if you think\nin",
    "you think in Cobol. All the time, if you think\nin Lisp. It would be convenient here if I could give an example\nof a powerful macro, and say there! how about that? But if I did,\nit would just look like gibberish to someone who didn't know Lisp;\nthere isn't room here to explain everything you'd need to know to\nunderstand what it meant. In \n\nAnsi Common Lisp\n I tried to move\nthings along as fast as I",
    "Lisp\n I tried to move\nthings along as fast as I could, and even so I didn't get to macros\nuntil page 160.\nBut I think I can give a kind of argument that might be convincing.\nThe source code of the Viaweb editor was probably about 20-25%\nmacros. Macros are harder to write than ordinary Lisp functions,\nand it's considered to be bad style to use them when they're not\nnecessary. So every macro in that",
    "when they're not\nnecessary. So every macro in that code is there because it has to\nbe. What that means is that at least 20-25% of the code in this\nprogram is doing things that you can't easily do in any other\nlanguage. However skeptical the Blub programmer might be about my\nclaims for the mysterious powers of Lisp, this ought to make him\ncurious. We weren't writing this code for our own amusement.",
    "weren't writing this code for our own amusement. We\nwere a tiny startup, programming as hard as we could in order to\nput technical barriers between us and our competitors.\nA suspicious person might begin to wonder if there was some\ncorrelation here. A big chunk of our code was doing things that\nare very hard to do in other languages. The resulting software\ndid things our competitors' software",
    "software\ndid things our competitors' software couldn't do. Maybe there was\nsome kind of connection. I encourage you to follow that thread.\nThere may be more to that old man hobbling along on his crutches\nthan meets the eye.\nAikido for Startups\nBut I don't expect to convince anyone \n(\nover 25\n) \nto go out and learn\nLisp. The purpose of this article is not to change anyone's mind,\nbut to reassure",
    "is not to change anyone's mind,\nbut to reassure people already interested in using Lisp-- people\nwho know that Lisp is a powerful language, but worry because it\nisn't widely used. In a competitive situation, that's an advantage.\nLisp's power is multiplied by the fact that your competitors don't\nget it.\nIf you think of using Lisp in a startup, you shouldn't worry that\nit isn't widely understood.",
    "shouldn't worry that\nit isn't widely understood. You should hope that it stays that\nway. And it's likely to. It's the nature of programming languages\nto make most people satisfied with whatever they currently use.\nComputer hardware changes so much faster than personal habits that\nprogramming practice is usually ten to twenty years behind the\nprocessor. At places like MIT they were writing programs",
    "At places like MIT they were writing programs in\nhigh-level languages in the early 1960s, but many companies continued\nto write code in machine language well into the 1980s. I bet a\nlot of people continued to write machine language until the processor,\nlike a bartender eager to close up and go home, finally kicked them\nout by switching to a risc instruction set.\nOrdinarily technology changes fast.",
    "set.\nOrdinarily technology changes fast. But programming languages are\ndifferent: programming languages are not just technology, but what\nprogrammers think in. They're half technology and half religion.[6]\nAnd so the median language, meaning whatever language the median\nprogrammer uses, moves as slow as an iceberg. Garbage collection,\nintroduced by Lisp in about 1960, is now widely considered to",
    "by Lisp in about 1960, is now widely considered to be\na good thing. Runtime typing, ditto, is growing in popularity.\nLexical closures, introduced by Lisp in the early 1970s, are now,\njust barely, on the radar screen. Macros, introduced by Lisp in the\nmid 1960s, are still terra incognita.\nObviously, the median language has enormous momentum. I'm not\nproposing that you can fight this powerful force.",
    "that you can fight this powerful force. What I'm proposing\nis exactly the opposite: that, like a practitioner of Aikido, you\ncan use it against your opponents.\nIf you work for a big company, this may not be easy. You will have\na hard time convincing the pointy-haired boss to let you build\nthings in Lisp, when he has just read in the paper that some other\nlanguage is poised, like Ada was twenty",
    "some other\nlanguage is poised, like Ada was twenty years ago, to take over\nthe world. But if you work for a startup that doesn't have\npointy-haired bosses yet, you can, like we did, turn the Blub\nparadox to your advantage: you can use technology that your\ncompetitors, glued immovably to the median language, will never be\nable to match.\nIf you ever do find yourself working for a startup, here's a",
    "do find yourself working for a startup, here's a handy\ntip for evaluating competitors. Read their job listings. Everything\nelse on their site may be stock photos or the prose equivalent,\nbut the job listings have to be specific about what they want, or\nthey'll get the wrong candidates.\nDuring the years we worked on Viaweb I read a lot of job descriptions.\nA new competitor seemed to emerge out of",
    "new competitor seemed to emerge out of the woodwork every month\nor so. The first thing I would do, after checking to see if they\nhad a live online demo, was look at their job listings. After a\ncouple years of this I could tell which companies to worry about\nand which not to. The more of an IT flavor the job descriptions\nhad, the less dangerous the company was. The safest kind were the\nones that",
    "company was. The safest kind were the\nones that wanted Oracle experience. You never had to worry about\nthose. You were also safe if they said they wanted C++ or Java\ndevelopers. If they wanted Perl or Python programmers, that would\nbe a bit frightening-- that's starting to sound like a company\nwhere the technical side, at least, is run by real hackers. If I\nhad ever seen a job posting looking for",
    "If I\nhad ever seen a job posting looking for Lisp hackers, I would have\nbeen really worried.\n\nNotes\n[1] Viaweb at first had two parts: the editor, written in Lisp,\nwhich people used to build their sites, and the ordering system,\nwritten in C, which handled orders. The first version was mostly\nLisp, because the ordering system was small. Later we added two\nmore modules, an image generator written",
    "added two\nmore modules, an image generator written in C, and a back-office\nmanager written mostly in Perl.\nIn January 2003, Yahoo released a new version of the editor \nwritten in C++ and Perl. It's hard to say whether the program is no\nlonger written in Lisp, though, because to translate this program\ninto C++ they literally had to write a Lisp interpreter: the source\nfiles of all the",
    "a Lisp interpreter: the source\nfiles of all the page-generating templates are still, as far as I\nknow, Lisp code. (See \nGreenspun's Tenth Rule\n.)\n[2] Robert Morris says that I didn't need to be secretive, because\neven if our competitors had known we were using Lisp, they wouldn't\nhave understood why: \"If they were that smart they'd already be\nprogramming in Lisp.\"\n[3] All languages are equally",
    "in Lisp.\"\n[3] All languages are equally powerful in the sense of being Turing\nequivalent, but that's not the sense of the word programmers care\nabout. (No one wants to program a Turing machine.) The kind of\npower programmers care about may not be formally definable, but\none way to explain it would be to say that it refers to features\nyou could only get in the less powerful language by writing",
    "only get in the less powerful language by writing an\ninterpreter for the more powerful language in it. If language A\nhas an operator for removing spaces from strings and language B\ndoesn't, that probably doesn't make A more powerful, because you\ncan probably write a subroutine to do it in B. But if A supports,\nsay, recursion, and B doesn't, that's not likely to be something\nyou can fix by writing",
    "not likely to be something\nyou can fix by writing library functions.\n[4] Note to nerds: or possibly a lattice, narrowing toward the top;\nit's not the shape that matters here but the idea that there is at\nleast a partial order.\n[5] It is a bit misleading to treat macros as a separate feature.\nIn practice their usefulness is greatly enhanced by other Lisp\nfeatures like lexical closures and rest",
    "other Lisp\nfeatures like lexical closures and rest parameters.\n[6] As a result, comparisons of programming languages either take\nthe form of religious wars or undergraduate textbooks so determinedly\nneutral that they're really works of anthropology. People who\nvalue their peace, or want tenure, avoid the topic. But the question\nis only half a religious one; there is something there worth\nstudying,",
    "one; there is something there worth\nstudying, especially if you want to design new languages.\nMore Technical Details\nJapanese Translation\nTurkish Translation\nUzbek Translation\nOrbitz Uses Lisp Too\nHow To Become A Hacker\nA Scheme Story\nItalian Translation\n\nYou'll find this essay and 14 others in\n\nHackers & Painters\n.",
    "Why to Start a Startup in a Bad Economy\n\nWhy to Start a Startup in a Bad Economy\n\nWant to start a startup?\n Get funded by\n\nY Combinator\n.\n\nOctober 2008\nThe economic situation is apparently so grim that some experts fear\nwe may be in for a stretch as bad as the mid seventies.\nWhen Microsoft and Apple were founded.\nAs those examples suggest, a recession may not be such a bad time\nto start a startup.",
    "may not be such a bad time\nto start a startup. I'm not claiming it's a particularly good time\neither. The truth is more boring: the state of the economy doesn't\nmatter much either way.\nIf we've learned one thing from funding so many startups, it's that\nthey succeed or fail based on the qualities of the founders. The\neconomy has some effect, certainly, but as a predictor of success\nit's rounding",
    "but as a predictor of success\nit's rounding error compared to the founders.\nWhich means that what matters is who you are, not when you do it.\nIf you're the right sort of person, you'll win even in a bad economy.\nAnd if you're not, a good economy won't save you. Someone who\nthinks \"I better not start a startup now, because the economy is\nso bad\" is making the same mistake as the people who thought",
    "making the same mistake as the people who thought during\nthe Bubble \"all I have to do is start a startup, and I'll be rich.\"\nSo if you want to improve your chances, you should think far more\nabout who you can recruit as a cofounder than the state of the\neconomy. And if you're worried about threats to the survival of\nyour company, don't look for them in the news. Look in the mirror.\nBut for any",
    "them in the news. Look in the mirror.\nBut for any given team of founders, would it not pay to wait till\nthe economy is better before taking the leap? If you're starting\na restaurant, maybe, but not if you're working on technology.\nTechnology progresses more or less independently of the stock market.\nSo for any given idea, the payoff for acting fast in a bad economy\nwill be higher than for waiting.",
    "in a bad economy\nwill be higher than for waiting. Microsoft's first product was a\nBasic interpreter for the Altair. That was exactly what the world\nneeded in 1975, but if Gates and Allen had decided to wait a few\nyears, it would have been too late.\nOf course, the idea you have now won't be the last you have. There\nare always new ideas. But if you have a specific idea you want to\nact on, act",
    "you have a specific idea you want to\nact on, act now.\nThat doesn't mean you can ignore the economy. Both customers and investors\nwill be feeling pinched. It's not necessarily a problem if customers\nfeel pinched: you may even be able to benefit from it, by making\nthings that \nsave money\n. \nStartups often make things cheaper, so in\nthat respect they're better positioned to prosper in a",
    "respect they're better positioned to prosper in a recession\nthan big companies.\nInvestors are more of a problem. Startups generally need to raise\nsome amount of external funding, and investors tend to be less\nwilling to invest in bad times. They shouldn't be. Everyone knows\nyou're supposed to buy when times are bad and sell when times are\ngood. But of course what makes investing so",
    "are\ngood. But of course what makes investing so counterintuitive is\nthat in equity markets, good times are defined as everyone thinking\nit's time to buy. You have to be a contrarian to be correct, and\nby definition only a minority of investors can be.\nSo just as investors in 1999 were tripping over one another trying\nto buy into lousy startups, investors in 2009 will presumably be\nreluctant to",
    "investors in 2009 will presumably be\nreluctant to invest even in good ones.\nYou'll have to adapt to this. But that's nothing new: startups\nalways have to adapt to the whims of investors. Ask any founder\nin any economy if they'd describe investors as fickle, and watch\nthe face they make. Last year you had to be prepared to explain\nhow your startup was viral. Next year you'll have to explain",
    "was viral. Next year you'll have to explain how\nit's recession-proof.\n(Those are both good things to be. The mistake investors make is\nnot the criteria they use but that they always tend to focus on one\nto the exclusion of the rest.)\nFortunately the way to make a startup recession-proof is to do\nexactly what you should do anyway: run it as cheaply as possible.\nFor years I've been telling founders",
    "as possible.\nFor years I've been telling founders that the surest route to success\nis to be the cockroaches of the corporate world. The immediate\ncause of death in a startup is always running out of money. So the\ncheaper your company is to operate, the harder it is to kill.\nAnd fortunately it has gotten very cheap to run a startup. A recession\nwill if anything make it cheaper still.\nIf nuclear",
    "if anything make it cheaper still.\nIf nuclear winter really is here, it may be safer to be a cockroach\neven than to keep your job. Customers may drop off individually\nif they can no longer afford you, but you're not going to lose them\nall at once; markets don't \"reduce headcount.\"\nWhat if you quit your job to start a startup that fails, and you\ncan't find another? That could be a problem if you",
    "find another? That could be a problem if you work in sales or\nmarketing. In those fields it can take months to find a new\njob in a bad economy. But hackers seem to be more liquid. Good\nhackers can always get some kind of job. It might not be your dream\njob, but you're not going to starve.\nAnother advantage of bad times is that there's less competition.\nTechnology trains leave the station at",
    "trains leave the station at regular intervals. If \neveryone else is cowering in a corner, you may have a whole car to\nyourself.\nYou're an investor too. As a founder, you're buying stock with\nwork: the reason Larry and Sergey are so rich is not so much that\nthey've done work worth tens of billions of dollars, but that they\nwere the first investors in Google. And like any investor you\nshould buy",
    "in Google. And like any investor you\nshould buy when times are bad.\nWere you nodding in agreement, thinking \"stupid investors\" a few\nparagraphs ago when I was talking about how investors are reluctant\nto put money into startups in bad markets, even though that's the\ntime they should rationally be most willing to buy? Well, founders\naren't much better. When times get bad, hackers go to grad",
    "better. When times get bad, hackers go to grad school.\nAnd no doubt that will happen this time too. In fact, what makes\nthe preceding paragraph true is that most readers won't believe\nit—at least to the extent of acting on it.\nSo maybe a recession is a good time to start a startup. It's hard\nto say whether advantages like lack of competition outweigh\ndisadvantages like reluctant investors. But it",
    "like reluctant investors. But it doesn't matter much\neither way. It's the people that matter. And for a given set of\npeople working on a given technology, the time to act is always\nnow.\nRussian Translation\nChinese Translation\nJapanese Translation",
    "Before the Startup\n\nBefore the Startup\n\nWant to start a startup?\n Get funded by\n\nY Combinator\n.\n\nOctober 2014\n(This essay is derived from a guest lecture in Sam Altman's \nstartup class\n at\nStanford. It's intended for college students, but much of it is\napplicable to potential founders at other ages.)\nOne of the advantages of having kids is that when you have to give\nadvice, you can ask yourself",
    "when you have to give\nadvice, you can ask yourself \"what would I tell my own kids?\" My\nkids are little, but I can imagine what I'd tell them about startups\nif they were in college, and that's what I'm going to tell you.\nStartups are very counterintuitive. I'm not sure why. Maybe it's\njust because knowledge about them hasn't permeated our culture yet.\nBut whatever the reason, starting a startup is",
    "whatever the reason, starting a startup is a task where you\ncan't always trust your instincts.\nIt's like skiing in that way. When you first try skiing and you\nwant to slow down, your instinct is to lean back. But if you lean\nback on skis you fly down the hill out of control. So part of\nlearning to ski is learning to suppress that impulse. Eventually\nyou get new habits, but at first it takes a",
    "get new habits, but at first it takes a conscious effort. At\nfirst there's a list of things you're trying to remember as you\nstart down the hill.\nStartups are as unnatural as skiing, so there's a similar list for\nstartups. Here I'm going to give you the first part of it — the things\nto remember if you want to prepare yourself to start a startup.\n\nCounterintuitive\nThe first item on it is the fact I",
    "first item on it is the fact I already mentioned: that startups\nare so weird that if you trust your instincts, you'll make a lot\nof mistakes. If you know nothing more than this, you may at least\npause before making them.\nWhen I was running Y Combinator I used to joke that our function\nwas to tell founders things they would ignore. It's really true.\nBatch after batch, the YC partners warn founders",
    "after batch, the YC partners warn founders about mistakes\nthey're about to make, and the founders ignore them, and then come\nback a year later and say \"I wish we'd listened.\"\nWhy do the founders ignore the partners' advice? Well, that's the\nthing about counterintuitive ideas: they contradict your intuitions.\nThey seem wrong. So of course your first impulse is to disregard\nthem. And in fact my",
    "first impulse is to disregard\nthem. And in fact my joking description is not merely the curse\nof Y Combinator but part of its raison d'etre. If founders' instincts\nalready gave them the right answers, they wouldn't need us. You\nonly need other people to give you advice that surprises you. That's\nwhy there are a lot of ski instructors and not many running\ninstructors.\n\n[\n1\n]\nYou can, however, trust",
    "can, however, trust your instincts about people. And in fact\none of the most common mistakes young founders make is not to\ndo that enough. They get involved with people who seem impressive,\nbut about whom they feel some misgivings personally. Later when\nthings blow up they say \"I knew there was something off about him,\nbut I ignored it because he seemed so impressive.\"\nIf you're thinking about",
    "he seemed so impressive.\"\nIf you're thinking about getting involved with someone — as a\ncofounder, an employee, an investor, or an acquirer — and you\nhave misgivings about them, trust your gut. If someone seems\nslippery, or bogus, or a jerk, don't ignore it.\nThis is one case where it pays to be self-indulgent. Work with\npeople you genuinely like, and you've known long enough to be",
    "genuinely like, and you've known long enough to be sure.\n\nExpertise\nThe second counterintuitive point is that it's not that important\nto know a lot about startups. The way to succeed in a startup is\nnot to be an expert on startups, but to be an expert on your users\nand the problem you're solving for them.\nMark Zuckerberg didn't succeed because he was an expert on startups.\nHe succeeded despite",
    "he was an expert on startups.\nHe succeeded despite being a complete noob at startups, because he\nunderstood his users really well.\nIf you don't know anything about, say, how to raise an angel round,\ndon't feel bad on that account. That sort of thing you can learn\nwhen you need to, and forget after you've done it.\nIn fact, I worry it's not merely unnecessary to learn in great\ndetail about the",
    "unnecessary to learn in great\ndetail about the mechanics of startups, but possibly somewhat\ndangerous. If I met an undergrad who knew all about convertible\nnotes and employee agreements and (God forbid) class FF stock, I\nwouldn't think \"here is someone who is way ahead of their peers.\"\nIt would set off alarms. Because another of the characteristic\nmistakes of young founders is to go through the",
    "of young founders is to go through the motions of starting\na startup. They make up some plausible-sounding idea, raise money\nat a good valuation, rent a cool office, hire a bunch of people.\nFrom the outside that seems like what startups do. But the next\nstep after rent a cool office and hire a bunch of people is: gradually\nrealize how completely fucked they are, because while imitating all\nthe",
    "fucked they are, because while imitating all\nthe outward forms of a startup they have neglected the one thing\nthat's actually essential: making something people want.\n\nGame\nWe saw this happen so often that we made up a name for it: playing\nhouse. Eventually I realized why it was happening. The reason\nyoung founders go through the motions of starting a startup is\nbecause that's what they've been",
    "a startup is\nbecause that's what they've been trained to do for their whole lives\nup to that point. Think about what you have to do to get into\ncollege, for example. Extracurricular activities, check. Even in\ncollege classes most of the work is as artificial as running laps.\nI'm not attacking the educational system for being this way. There\nwill always be a certain amount of fakeness in the work",
    "always be a certain amount of fakeness in the work you do when\nyou're being taught something, and if you measure their performance\nit's inevitable that people will exploit the difference to the point\nwhere much of what you're measuring is artifacts of the fakeness.\nI confess I did it myself in college. I found that in a lot of\nclasses there might only be 20 or 30 ideas that were the right shape\nto",
    "be 20 or 30 ideas that were the right shape\nto make good exam questions. The way I studied for exams in these\nclasses was not (except incidentally) to master the material taught\nin the class, but to make a list of potential exam questions and\nwork out the answers in advance. When I walked into the final, the\nmain thing I'd be feeling was curiosity about which of my questions\nwould turn up on the",
    "about which of my questions\nwould turn up on the exam. It was like a game.\nIt's not surprising that after being trained for their whole lives\nto play such games, young founders' first impulse on starting a\nstartup is to try to figure out the tricks for winning at this new\ngame. Since fundraising appears to be the measure of success for\nstartups (another classic noob mistake), they always want to",
    "classic noob mistake), they always want to know what the\ntricks are for convincing investors. We tell them the best way to\n\nconvince investors\n is to make a startup\nthat's actually doing well, meaning \ngrowing fast\n, and then simply\ntell investors so. Then they want to know what the tricks are for\ngrowing fast. And we have to tell them the best way to do that is\nsimply to make something people",
    "way to do that is\nsimply to make something people want.\nSo many of the conversations YC partners have with young founders\nbegin with the founder asking \"How do we...\" and the partner replying\n\"Just...\"\nWhy do the founders always make things so complicated? The reason,\nI realized, is that they're looking for the trick.\nSo this is the third counterintuitive thing to remember about\nstartups: starting",
    "thing to remember about\nstartups: starting a startup is where gaming the system stops\nworking. Gaming the system may continue to work if you go to work\nfor a big company. Depending on how broken the company is, you can\nsucceed by sucking up to the right people, giving the impression\nof productivity, and so on. \n\n[\n2\n]\n\nBut that doesn't work with startups.\nThere is no boss to trick, only users, and",
    "is no boss to trick, only users, and all users care about is\nwhether your product does what they want. Startups are as impersonal\nas physics. You have to make something people want, and you prosper\nonly to the extent you do.\nThe dangerous thing is, faking does work to some degree on investors.\nIf you're super good at sounding like you know what you're talking\nabout, you can fool investors for at",
    "talking\nabout, you can fool investors for at least one and perhaps even two\nrounds of funding. But it's not in your interest to. The company\nis ultimately doomed. All you're doing is wasting your own time\nriding it down.\nSo stop looking for the trick. There are tricks in startups, as\nthere are in any domain, but they are an order of magnitude less\nimportant than solving the real problem. A founder",
    "than solving the real problem. A founder who knows nothing\nabout fundraising but has made something users love will have an\neasier time raising money than one who knows every trick in the\nbook but has a flat usage graph. And more importantly, the founder\nwho has made something users love is the one who will go on to\nsucceed after raising the money.\nThough in a sense it's bad news in that you're",
    "in a sense it's bad news in that you're deprived of one of\nyour most powerful weapons, I think it's exciting that gaming the\nsystem stops working when you start a startup. It's exciting that\nthere even exist parts of the world where you win by doing good\nwork. Imagine how depressing the world would be if it were all\nlike school and big companies, where you either have to spend a lot\nof time on",
    "where you either have to spend a lot\nof time on bullshit things or lose to people who do.\n\n[\n3\n]\n\nI would\nhave been delighted if I'd realized in college that there were parts\nof the real world where gaming the system mattered less than others,\nand a few where it hardly mattered at all. But there are, and this\nvariation is one of the most important things to consider when\nyou're thinking about your",
    "things to consider when\nyou're thinking about your future. How do you win in each type of\nwork, and what would you like to win by doing?\n\n[\n4\n]\n\nAll-Consuming\nThat brings us to our fourth counterintuitive point: startups are\nall-consuming. If you start a startup, it will take over your life\nto a degree you cannot imagine. And if your startup succeeds, it\nwill take over your life for a long time:",
    "it\nwill take over your life for a long time: for several years at the\nvery least, maybe for a decade, maybe for the rest of your working\nlife. So there is a real opportunity cost here.\nLarry Page may seem to have an enviable life, but there are aspects\nof it that are unenviable. Basically at 25 he started running as\nfast as he could and it must seem to him that he hasn't stopped to\ncatch his",
    "seem to him that he hasn't stopped to\ncatch his breath since. Every day new shit happens in the Google\nempire that only the CEO can deal with, and he, as CEO, has to deal\nwith it. If he goes on vacation for even a week, a whole week's\nbacklog of shit accumulates. And he has to bear this uncomplainingly,\npartly because as the company's daddy he can never show fear or\nweakness, and partly because",
    "never show fear or\nweakness, and partly because billionaires get less than zero sympathy\nif they talk about having difficult lives. Which has the strange\nside effect that the difficulty of being a successful startup founder\nis concealed from almost everyone except those who've done it.\nY Combinator has now funded several companies that can be called\nbig successes, and in every single case the",
    "called\nbig successes, and in every single case the founders say the same\nthing. It never gets any easier. The nature of the problems change.\nYou're worrying about construction delays at your London office\ninstead of the broken air conditioner in your studio apartment.\nBut the total volume of worry never decreases; if anything it\nincreases.\nStarting a successful startup is similar to having kids in",
    "a successful startup is similar to having kids in that\nit's like a button you push that changes your life irrevocably.\nAnd while it's truly wonderful having kids, there are a lot of\nthings that are easier to do before you have them than after. Many\nof which will make you a better parent when you do have kids. And\nsince you can delay pushing the button for a while, most people in\nrich countries",
    "button for a while, most people in\nrich countries do.\nYet when it comes to startups, a lot of people seem to think they're\nsupposed to start them while they're still in college. Are you\ncrazy? And what are the universities thinking? They go out of\ntheir way to ensure their students are well supplied with contraceptives,\nand yet they're setting up entrepreneurship programs and startup\nincubators",
    "entrepreneurship programs and startup\nincubators left and right.\nTo be fair, the universities have their hand forced here. A lot\nof incoming students are interested in startups. Universities are,\nat least de facto, expected to prepare them for their careers. So\nstudents who want to start startups hope universities can teach\nthem about startups. And whether universities can do this or not,\nthere's",
    "whether universities can do this or not,\nthere's some pressure to claim they can, lest they lose applicants\nto other universities that do.\nCan universities teach students about startups? Yes and no. They\ncan teach students about startups, but as I explained before, this\nis not what you need to know. What you need to learn about are the\nneeds of your own users, and you can't do that until you",
    "of your own users, and you can't do that until you actually\nstart the company.\n\n[\n5\n]\n\nSo starting a startup is intrinsically\nsomething you can only really learn by doing it. And it's impossible\nto do that in college, for the reason I just explained: startups\ntake over your life. You can't start a startup for real as a\nstudent, because if you start a startup for real you're not a student\nanymore.",
    "a startup for real you're not a student\nanymore. You may be nominally a student for a bit, but you won't even\nbe that for long.\n\n[\n6\n]\nGiven this dichotomy, which of the two paths should you take? Be\na real student and not start a startup, or start a real startup and\nnot be a student? I can answer that one for you. Do not start a\nstartup in college. How to start a startup is just a subset of",
    "How to start a startup is just a subset of a\nbigger problem you're trying to solve: how to have a good life.\nAnd though starting a startup can be part of a good life for a lot\nof ambitious people, age 20 is not the optimal time to do it.\nStarting a startup is like a brutally fast depth-first search. Most\npeople should still be searching breadth-first at 20.\nYou can do things in your early 20s that",
    "at 20.\nYou can do things in your early 20s that you can't do as well before\nor after, like plunge deeply into projects on a whim and travel\nsuper cheaply with no sense of a deadline. For unambitious people,\nthis sort of thing is the dreaded \"failure to launch,\" but for the\nambitious ones it can be an incomparably valuable sort of exploration.\nIf you start a startup at 20 and you're sufficiently",
    "you start a startup at 20 and you're sufficiently successful,\nyou'll never get to do it.\n\n[\n7\n]\nMark Zuckerberg will never get to bum around a foreign country. He\ncan do other things most people can't, like charter jets to fly him\nto foreign countries. But success has taken a lot of the serendipity\nout of his life. Facebook is running him as much as he's running\nFacebook. And while it can be very",
    "as he's running\nFacebook. And while it can be very cool to be in the grip of a\nproject you consider your life's work, there are advantages to\nserendipity too, especially early in life. Among other things it\ngives you more options to choose your life's work from.\nThere's not even a tradeoff here. You're not sacrificing anything\nif you forgo starting a startup at 20, because you're more likely\nto",
    "a startup at 20, because you're more likely\nto succeed if you wait. In the unlikely case that you're 20 and\none of your side projects takes off like Facebook did, you'll face\na choice of running with it or not, and it may be reasonable to run\nwith it. But the usual way startups take off is for the founders\nto \nmake them\n take off, and it's gratuitously\nstupid to do that at 20.\n\nTry\nShould you do",
    "to do that at 20.\n\nTry\nShould you do it at any age? I realize I've made startups sound\npretty hard. If I haven't, let me try again: starting a startup\nis really hard. What if it's too hard? How can you tell if you're\nup to this challenge?\nThe answer is the fifth counterintuitive point: you can't tell. Your\nlife so far may have given you some idea what your prospects might\nbe if you tried to become",
    "your prospects might\nbe if you tried to become a mathematician, or a professional football\nplayer. But unless you've had a very strange life you haven't done\nmuch that was \nlike\n being a startup founder.\nStarting a startup will change you a lot. So what you're trying\nto estimate is not just what you are, but what you could grow into,\nand who can do that?\nFor the past 9 years it was my job to",
    "can do that?\nFor the past 9 years it was my job to predict whether people would\nhave what it took to start successful startups. It was easy to\ntell how smart they were, and most people reading this will be over\nthat threshold. The hard part was predicting how \ntough and ambitious they would become. There\nmay be no one who has more experience at trying to predict that,\nso I can tell you how much an",
    "to predict that,\nso I can tell you how much an expert can know about it, and the\nanswer is: not much. I learned to keep a completely open mind about\nwhich of the startups in each batch would turn out to be the stars.\nThe founders sometimes think they know. Some arrive feeling sure\nthey will ace Y Combinator just as they've aced every one of the (few,\nartificial, easy) tests they've faced in life",
    "easy) tests they've faced in life so far. Others arrive\nwondering how they got in, and hoping YC doesn't discover whatever\nmistake caused it to accept them. But there is little correlation\nbetween founders' initial attitudes and how well their companies\ndo.\nI've read that the same is true in the military — that the\nswaggering recruits are no more likely to turn out to be really\ntough than the",
    "likely to turn out to be really\ntough than the quiet ones. And probably for the same reason: that\nthe tests involved are so different from the ones in their previous\nlives.\nIf you're absolutely terrified of starting a startup, you probably\nshouldn't do it. But if you're merely unsure whether you're up to\nit, the only way to find out is to try. Just not now.\n\nIdeas\nSo if you want to start a startup",
    "not now.\n\nIdeas\nSo if you want to start a startup one day, what should you do in\ncollege? There are only two things you need initially: an idea and\ncofounders. And the m.o. for getting both is the same. Which leads\nto our sixth and last counterintuitive point: that the way to get\nstartup ideas is not to try to think of startup ideas.\nI've written a whole \nessay\n on this,\nso I won't repeat it all",
    "a whole \nessay\n on this,\nso I won't repeat it all here. But the short version is that if\nyou make a conscious effort to think of startup ideas, the ideas\nyou come up with will not merely be bad, but bad and plausible-sounding,\nmeaning you'll waste a lot of time on them before realizing they're\nbad.\nThe way to come up with good startup ideas is to take a step back.\nInstead of making a conscious",
    "to take a step back.\nInstead of making a conscious effort to think of startup ideas,\nturn your mind into the type that startup ideas form in without any\nconscious effort. In fact, so unconsciously that you don't even\nrealize at first that they're startup ideas.\nThis is not only possible, it's how Apple, Yahoo, Google, and\nFacebook all got started. None of these companies were even meant\nto be",
    "None of these companies were even meant\nto be companies at first. They were all just side projects. The\nbest startups almost have to start as side projects, because great\nideas tend to be such outliers that your conscious mind would reject\nthem as ideas for companies.\nOk, so how do you turn your mind into the type that startup ideas\nform in unconsciously? (1) Learn a lot about things that",
    "unconsciously? (1) Learn a lot about things that matter,\nthen (2) work on problems that interest you (3) with people you\nlike and respect. The third part, incidentally, is how you get\ncofounders at the same time as the idea.\nThe first time I wrote that paragraph, instead of \"learn a lot about\nthings that matter,\" I wrote \"become good at some technology.\" But\nthat prescription, though sufficient,",
    "But\nthat prescription, though sufficient, is too narrow. What was\nspecial about Brian Chesky and Joe Gebbia was not that they were\nexperts in technology. They were good at design, and perhaps even\nmore importantly, they were good at organizing groups and making\nprojects happen. So you don't have to work on technology per se,\nso long as you work on problems demanding enough to stretch you.\nWhat",
    "on problems demanding enough to stretch you.\nWhat kind of problems are those? That is very hard to answer in\nthe general case. History is full of examples of young people who\nwere working on important problems that \nno\none else\n at the time thought were important, and in particular\nthat their parents didn't think were important. On the other hand,\nhistory is even fuller of examples of parents who",
    "is even fuller of examples of parents who thought their\nkids were wasting their time and who were right. So how do you\nknow when you're working on real stuff?\n\n[\n8\n]\nI know how \nI\n know. Real problems are interesting, and I am\nself-indulgent in the sense that I always want to work on interesting\nthings, even if no one else cares about them (in fact, especially\nif no one else cares about them), and",
    "especially\nif no one else cares about them), and find it very hard to make\nmyself work on boring things, even if they're supposed to be\nimportant.\nMy life is full of case after case where I worked on something just\nbecause it seemed interesting, and it turned out later to be useful\nin some worldly way. \nY\nCombinator itself\n was something I only did because it seemed\ninteresting. So I seem to have",
    "because it seemed\ninteresting. So I seem to have some sort of internal compass that\nhelps me out. But I don't know what other people have in their\nheads. Maybe if I think more about this I can come up with heuristics\nfor recognizing genuinely interesting problems, but for the moment\nthe best I can offer is the hopelessly question-begging advice that\nif you have a taste for genuinely interesting",
    "that\nif you have a taste for genuinely interesting problems, indulging\nit energetically is the best way to prepare yourself for a startup.\nAnd indeed, probably also the best way to live.\n\n[\n9\n]\nBut although I can't explain in the general case what counts as an\ninteresting problem, I can tell you about a large subset of them.\nIf you think of technology as something that's spreading like a\nsort of",
    "as something that's spreading like a\nsort of fractal stain, every moving point on the edge represents\nan interesting problem. So one guaranteed way to turn your mind\ninto the type that has good startup ideas is to get yourself to the\nleading edge of some technology — to cause yourself, as Paul\nBuchheit put it, to \"live in the future.\" When you reach that point,\nideas that will seem to other people",
    "that point,\nideas that will seem to other people uncannily prescient will seem\nobvious to you. You may not realize they're startup ideas, but\nyou'll know they're something that ought to exist.\nFor example, back at Harvard in the mid 90s a fellow grad student\nof my friends Robert and Trevor wrote his own voice over IP software.\nHe didn't mean it to be a startup, and he never tried to turn it\ninto",
    "be a startup, and he never tried to turn it\ninto one. He just wanted to talk to his girlfriend in Taiwan without\npaying for long distance calls, and since he was an expert on\nnetworks it seemed obvious to him that the way to do it was turn\nthe sound into packets and ship it over the Internet. He never did\nany more with his software than talk to his girlfriend, but this\nis exactly the way the best",
    "girlfriend, but this\nis exactly the way the best startups get started.\nSo strangely enough the optimal thing to do in college if you want\nto be a successful startup founder is not some sort of new, vocational\nversion of college focused on \"entrepreneurship.\" It's the classic\nversion of college as education for its own sake. If you want to\nstart a startup after college, what you should do in",
    "a startup after college, what you should do in college is\nlearn powerful things. And if you have genuine intellectual\ncuriosity, that's what you'll naturally tend to do if you just\nfollow your own inclinations.\n\n[\n10\n]\nThe component of entrepreneurship that really matters is domain\nexpertise. The way to become Larry Page was to become an expert\non search. And the way to become an expert on search",
    "search. And the way to become an expert on search was to be\ndriven by genuine curiosity, not some ulterior motive.\nAt its best, starting a startup is merely an ulterior motive for\ncuriosity. And you'll do it best if you introduce the ulterior\nmotive toward the end of the process.\nSo here is the ultimate advice for young would-be startup founders,\nboiled down to two words: just",
    "startup founders,\nboiled down to two words: just learn.\n\nNotes\n[\n1\n]\nSome founders listen more than others, and this tends to be a\n\npredictor of success\n. One of the things I\nremember about the Airbnbs during YC is how intently they listened.\n[\n2\n]\nIn fact, this is one of the reasons startups are possible. If\nbig companies weren't plagued by internal inefficiencies, they'd\nbe proportionately more",
    "inefficiencies, they'd\nbe proportionately more effective, leaving less room for startups.\n[\n3\n]\nIn a startup you have to spend a lot of time on \nschleps\n, but this sort of work is merely\nunglamorous, not bogus.\n[\n4\n]\nWhat should you do if your true calling is gaming the system?\nManagement consulting.\n[\n5\n]\nThe company may not be incorporated, but if you start to get\nsignificant numbers of users,",
    "if you start to get\nsignificant numbers of users, you've started it, whether you realize\nit yet or not.\n[\n6\n]\nIt shouldn't be that surprising that colleges can't teach\nstudents how to be good startup founders, because they can't teach\nthem how to be good employees either.\nThe way universities \"teach\" students how to be employees is to\nhand off the task to companies via internship programs. But",
    "the task to companies via internship programs. But you\ncouldn't do the equivalent thing for startups, because by definition\nif the students did well they would never come back.\n[\n7\n]\nCharles Darwin was 22 when he received an invitation to travel\naboard the HMS Beagle as a naturalist. It was only because he was\notherwise unoccupied, to a degree that alarmed his family, that he\ncould accept it. And",
    "alarmed his family, that he\ncould accept it. And yet if he hadn't we probably would not know\nhis name.\n[\n8\n]\nParents can sometimes be especially conservative in this\ndepartment. There are some whose definition of important problems\nincludes only those on the critical path to med school.\n[\n9\n]\nI did manage to think of a heuristic for detecting whether you\nhave a taste for interesting ideas: whether",
    "you\nhave a taste for interesting ideas: whether you find known boring\nideas intolerable. Could you endure studying literary theory, or\nworking in middle management at a large company?\n[\n10\n]\nIn fact, if your goal is to start a startup, you can stick\neven more closely to the ideal of a liberal education than past\ngenerations have. Back when students focused mainly on getting a\njob after college,",
    "focused mainly on getting a\njob after college, they thought at least a little about how the\ncourses they took might look to an employer. And perhaps even\nworse, they might shy away from taking a difficult class lest they\nget a low grade, which would harm their all-important GPA. Good\nnews: users \ndon't care\n what your GPA\nwas. And I've never heard of investors caring either. Y Combinator\ncertainly",
    "of investors caring either. Y Combinator\ncertainly never asks what classes you took in college or what grades\nyou got in them.\n\nThanks\n to Sam Altman, Paul Buchheit, John Collison, Patrick\nCollison, Jessica Livingston, Robert Morris, Geoff Ralston, and\nFred Wilson for reading drafts of this.\nArabic Translation",
    "Bel\n\nBel\n\nOct 2019\nBel is a spec for a new dialect of Lisp, written in itself. This should sound familiar to people who know about Lisp's origins, because it's \nthe way Lisp began\n.\nIt consists of two text files meant to be read in parallel: a \nguide to the Bel language\n, and the \nBel source\n.\nFor those who just want to see some code examples, there's a \nfile of those\n. But of course the Bel",
    "there's a \nfile of those\n. But of course the Bel source is also a code example, since it's written in itself.\nConsidering the rate at which I was discovering bugs before publishing Bel, there are bound to be more remaining. So this first version is version C, after Cunningham's Law.",
    "The Best Essay\n\nThe Best Essay\n\nMarch 2024\nDespite its title this isn't meant to be the best essay. My goal\nhere is to figure out what the best essay would be like.\nIt would be well-written, but you can write well about any topic.\nWhat made it special would be what it was about.\nObviously some topics would be better than others. It probably\nwouldn't be about this year's lipstick colors. But it",
    "be about this year's lipstick colors. But it wouldn't be\nvaporous talk about elevated themes either. A good essay has to be\nsurprising. It has to tell people something they don't already know.\nThe best essay would be on the most important topic you could tell\npeople something surprising about.\nThat may sound obvious, but it has some unexpected consequences.\nOne is that science enters the picture",
    "is that science enters the picture like an elephant stepping\ninto a rowboat. For example, Darwin first described the idea of\nnatural selection in an essay written in 1844.\nTalk about an\nimportant topic you could tell people something surprising about.\nIf that's the test of a great essay, this was surely the best one\nwritten in 1844. \nAnd indeed, the best possible essay at any given\ntime would",
    "the best possible essay at any given\ntime would usually be one describing the most important scientific\nor technological discovery it was possible to make.\n\n[\n1\n]\nAnother unexpected consequence: I imagined when I started writing\nthis that the best essay would be fairly timeless — that the best\nessay you could write in 1844 would be much the same as the best\none you could write now. But in fact the",
    "the best\none you could write now. But in fact the opposite seems to be true.\nIt might be true that the best painting would be timeless in this\nsense. But it wouldn't be impressive to write an essay introducing\nnatural selection now. The best essay \nnow\n would be one describing\na great discovery we didn't yet know about.\nIf the question of how to write the best possible essay reduces to\nthe",
    "to write the best possible essay reduces to\nthe question of how to make great discoveries, then I started with\nthe wrong question. Perhaps what this exercise shows is that we\nshouldn't waste our time writing essays but instead focus on making\ndiscoveries in some specific domain. But I'm interested in essays\nand what can be done with them, so I want to see if there's some\nother question I could",
    "want to see if there's some\nother question I could have asked.\nThere is, and on the face of it, it seems almost identical to the\none I started with. Instead of asking \nwhat would the best essay\nbe?\n I should have asked \nhow do you write essays well?\n Though\nthese seem only phrasing apart, their answers diverge. The answer\nto the first question, as we've seen, isn't really about essay\nwriting. The",
    "we've seen, isn't really about essay\nwriting. The second question forces it to be.\nWriting essays, at its best, is a way of discovering ideas. How do\nyou do that well? How do you discover by writing?\nAn essay should ordinarily start with what I'm going to call a\nquestion, though I mean this in a very general sense: it doesn't\nhave to be a question grammatically, just something that acts like\none",
    "grammatically, just something that acts like\none in the sense that it spurs some response.\nHow do you get this initial question? It probably won't work to\nchoose some important-sounding topic at random and go at it.\nProfessional traders won't even trade unless they have what they\ncall an \nedge\n — a convincing story about why in some class of\ntrades they'll win more than they lose. Similarly, you",
    "they'll win more than they lose. Similarly, you shouldn't\nattack a topic unless you have a way in — some new insight about\nit or way of approaching it.\nYou don't need to have a complete thesis; you just need some kind\nof gap you can explore. In fact, merely having questions about\nsomething other people take for granted can be edge enough.\nIf you come across a question that's sufficiently puzzling,",
    "across a question that's sufficiently puzzling, it could\nbe worth exploring even if it doesn't seem very momentous. Many an\nimportant discovery has been made by pulling on a thread that seemed\ninsignificant at first. How can they \nall\n be finches? \n\n[\n2\n]\nOnce you've got a question, then what? You start thinking out loud\nabout it. Not literally out loud, but you commit to a specific\nstring of",
    "out loud, but you commit to a specific\nstring of words in response, as you would if you were talking. This\ninitial response is usually mistaken or incomplete. Writing converts\nyour ideas from vague to bad. But that's a step forward, because\nonce you can see the brokenness, you can fix it.\nPerhaps beginning writers are alarmed at the thought of starting\nwith something mistaken or incomplete, but",
    "something mistaken or incomplete, but you shouldn't be, because\nthis is why essay writing works. Forcing yourself to commit to some\nspecific string of words gives you a starting point, and if it's\nwrong, you'll see that when you reread it. At least half of essay\nwriting is rereading what you've written and asking \nis this correct\nand complete?\n You have to be very strict when rereading, not",
    "You have to be very strict when rereading, not just\nbecause you want to keep yourself honest, but because a gap between\nyour response and the truth is often a sign of new ideas to be\ndiscovered.\nThe prize for being strict with what you've written is not just\nrefinement. When you take a roughly correct answer and try to make\nit exactly right, sometimes you find that you can't, and that the\nreason",
    "you find that you can't, and that the\nreason is that you were depending on a false assumption. And when\nyou discard it, the answer turns out to be completely different.\n\n[\n3\n]\nIdeally the response to a question is two things: the first step\nin a process that converges on the truth, and a source of additional\nquestions (in my very general sense of the word). So the process\ncontinues recursively, as",
    "word). So the process\ncontinues recursively, as response spurs response. \n\n[\n4\n]\nUsually there are several possible responses to a question, which\nmeans you're traversing a tree. But essays are linear, not tree-shaped,\nwhich means you have to choose one branch to follow at each point.\nHow do you choose? Usually you should follow whichever offers the\ngreatest combination of generality and novelty.",
    "combination of generality and novelty. I don't consciously\nrank branches this way; I just follow whichever seems most exciting;\nbut generality and novelty are what make a branch exciting. \n\n[\n5\n]\nIf you're willing to do a lot of rewriting, you don't have to guess\nright. You can follow a branch and see how it turns out, and if it\nisn't good enough, cut it and backtrack. I do this all the time.\nIn",
    "cut it and backtrack. I do this all the time.\nIn this essay I've already cut a 17-paragraph subtree, in addition\nto countless shorter ones. Maybe I'll reattach it at the end, or\nboil it down to a footnote, or spin it off as its own essay; we'll\nsee. \n\n[\n6\n]\nIn general you want to be quick to cut. One of the most dangerous\ntemptations in writing (and in software and painting) is to keep\nsomething",
    "in software and painting) is to keep\nsomething that isn't right, just because it contains a few good bits\nor cost you a lot of effort.\nThe most surprising new question being thrown off at this point is\n\ndoes it really matter what the initial question is?\n If the space\nof ideas is highly connected, it shouldn't, because you should be\nable to get from any question to the most valuable ones in a",
    "from any question to the most valuable ones in a few\nhops. And we see evidence that it's highly connected in the way,\nfor example, that people who are obsessed with some topic can turn\nany conversation toward it. But that only works if you know where\nyou want to go, and you don't in an essay. That's the whole point.\nYou don't want to be the obsessive conversationalist, or all your\nessays will be",
    "conversationalist, or all your\nessays will be about the same thing. \n\n[\n7\n]\nThe other reason the initial question matters is that you usually\nfeel somewhat obliged to stick to it. I don't think about this when\nI decide which branch to follow. I just follow novelty and generality.\nSticking to the question is enforced later, when I notice I've\nwandered too far and have to backtrack. But I think this",
    "too far and have to backtrack. But I think this is\nthe optimal solution. You don't want the hunt for novelty and\ngenerality to be constrained in the moment. Go with it and see what\nyou get.\n\n[\n8\n]\nSince the initial question does constrain you, in the best case it\nsets an upper bound on the quality of essay you'll write. If you\ndo as well as you possibly can on the chain of thoughts that",
    "as you possibly can on the chain of thoughts that follow\nfrom the initial question, the initial question itself is the only\nplace where there's room for variation.\nIt would be a mistake to let this make you too conservative though,\nbecause you can't predict where a question will lead. Not if you're\ndoing things right, because doing things right means making\ndiscoveries, and by definition you can't",
    "making\ndiscoveries, and by definition you can't predict those. So the way\nto respond to this situation is not to be cautious about which\ninitial question you choose, but to write a lot of essays. Essays\nare for taking risks.\nAlmost any question can get you a good essay. Indeed, it took some\neffort to think of a sufficiently unpromising topic in the third\nparagraph, because any essayist's first",
    "the third\nparagraph, because any essayist's first impulse on hearing that the\nbest essay couldn't be about x would be to try to write it. But if\nmost questions yield good essays, only some yield great ones.\nCan we predict which questions will yield great essays? Considering\nhow long I've been writing essays, it's alarming how novel that\nquestion feels.\nOne thing I like in an initial question is",
    "feels.\nOne thing I like in an initial question is outrageousness. I love\nquestions that seem naughty in some way — for example, by seeming\ncounterintuitive or overambitious or heterodox. Ideally all three.\nThis essay is an example. Writing about the best essay implies there\nis such a thing, which pseudo-intellectuals will dismiss as reductive,\nthough it follows necessarily from the possibility of",
    "it follows necessarily from the possibility of one essay\nbeing better than another. And thinking about how to do something\nso ambitious is close enough to doing it that it holds your attention.\nI like to start an essay with a gleam in my eye. This could be just\na taste of mine, but there's one aspect of it that probably isn't:\nto write a really good essay on some topic, you have to be",
    "a really good essay on some topic, you have to be interested\nin it. A good writer can write well about anything, but to stretch\nfor the novel insights that are the raison d'etre of the essay, you\nhave to care.\nIf caring about it is one of the criteria for a good initial question,\nthen the optimal question varies from person to person. It also\nmeans you're more likely to write great essays if you",
    "you're more likely to write great essays if you care about a\nlot of different things. The more curious you are, the greater the\nprobable overlap between the set of things you're curious about and\nthe set of topics that yield great essays.\nWhat other qualities would a great initial question have? It's\nprobably good if it has implications in a lot of different areas.\nAnd I find it's a good sign if",
    "of different areas.\nAnd I find it's a good sign if it's one that people think has already\nbeen thoroughly explored. But the truth is that I've barely thought\nabout how to choose initial questions, because I rarely do it. I\nrarely \nchoose\n what to write about; I just start thinking about\nsomething, and sometimes it turns into an essay.\nAm I going to stop writing essays about whatever I happen to",
    "to stop writing essays about whatever I happen to be\nthinking about and instead start working my way through some\nsystematically generated list of topics? That doesn't sound like\nmuch fun. And yet I want to write good essays, and if the initial\nquestion matters, I should care about it.\nPerhaps the answer is to go one step earlier: to write about whatever\npops into your head, but try to ensure that",
    "into your head, but try to ensure that what pops into your\nhead is good. Indeed, now that I think about it, this has to be the\nanswer, because a mere list of topics wouldn't be any use if you\ndidn't have edge with any of them. To start writing an essay, you\nneed a topic plus some initial insight about it, and you can't\ngenerate those systematically. If only. \n\n[\n9\n]\nYou can probably cause yourself",
    "If only. \n\n[\n9\n]\nYou can probably cause yourself to have more of them, though. The\nquality of the ideas that come out of your head depends on what goes\nin, and you can improve that in two dimensions, breadth and depth.\nYou can't learn everything, so getting breadth implies learning\nabout topics that are very different from one another. When I tell\npeople about my book-buying trips to Hay and they",
    "about my book-buying trips to Hay and they ask what I buy\nbooks about, I usually feel a bit sheepish answering, because the\ntopics seem like a laundry list of unrelated subjects. But perhaps\nthat's actually optimal in this business.\nYou can also get ideas by talking to people, by doing and building\nthings, and by going places and seeing things. I don't think it's\nimportant to talk to new people so",
    "think it's\nimportant to talk to new people so much as the sort of people who\nmake you have new ideas. I get more new ideas after talking for an\nafternoon with Robert Morris than from talking to 20 new smart\npeople. I know because that's what a block of office hours at Y\nCombinator consists of.\nWhile breadth comes from reading and talking and seeing, depth comes\nfrom doing. The way to really learn",
    "depth comes\nfrom doing. The way to really learn about some domain is to have\nto solve problems in it. Though this could take the form of writing,\nI suspect that to be a good essayist you also have to do, or have\ndone, some other kind of work. That may not be true for most other\nfields, but essay writing is different. You could spend half your\ntime working on something else and be net ahead, so",
    "working on something else and be net ahead, so long as it was\nhard.\nI'm not proposing that as a recipe so much as an encouragement to\nthose already doing it. If you've spent all your life so far working\non other things, you're already halfway there. Though of course to\nbe good at writing you have to like it, and if you like writing\nyou'd probably have spent at least some time doing it.\nEverything",
    "have spent at least some time doing it.\nEverything I've said about initial questions applies also to the\nquestions you encounter in writing the essay. They're the same\nthing; every subtree of an essay is usually a shorter essay, just\nas every subtree of a Calder mobile is a smaller mobile. So any\ntechnique that gets you good initial questions also gets you good\nwhole essays.\nAt some point the",
    "also gets you good\nwhole essays.\nAt some point the cycle of question and response reaches what feels\nlike a natural end. Which is a little suspicious; shouldn't every\nanswer suggest more questions? I think what happens is that you\nstart to feel sated. Once you've covered enough interesting ground,\nyou start to lose your appetite for new questions. Which is just\nas well, because the reader is",
    "Which is just\nas well, because the reader is probably feeling sated too. And it's\nnot lazy to stop asking questions, because you could instead be\nasking the initial question of a new essay.\nThat's the ultimate source of drag on the connectedness of ideas:\nthe discoveries you make along the way. If you discover enough\nstarting from question A, you'll never make it to question B. Though\nif you keep",
    "never make it to question B. Though\nif you keep writing essays you'll gradually fix this problem by\nburning off such discoveries. So bizarrely enough, writing lots of\nessays makes it as if the space of ideas were more highly connected.\nWhen a subtree comes to an end, you can do one of two things. You\ncan either stop, or pull the Cubist trick of laying separate subtrees\nend to end by returning to a",
    "separate subtrees\nend to end by returning to a question you skipped earlier. Usually\nit requires some sleight of hand to make the essay flow continuously\nat this point, but not this time. This time I actually need an\nexample of the phenomenon. For example, we discovered earlier that\nthe best possible essay wouldn't usually be timeless in the way the\nbest painting would. This seems surprising",
    "way the\nbest painting would. This seems surprising enough to be\nworth investigating further.\nThere are two senses in which an essay can be timeless: to be about\na matter of permanent importance, and always to have the same effect\non readers. With art these two senses blend together. Art that\nlooked beautiful to the ancient Greeks still looks beautiful to us.\nBut with essays the two senses diverge,",
    "to us.\nBut with essays the two senses diverge, because essays\nteach, and you can't teach people something they already know.\nNatural selection is certainly a matter of permanent importance,\nbut an essay explaining it couldn't have the same effect on us that\nit would have had on Darwin's contemporaries, precisely because his\nideas were so successful that everyone already knows about them.\n\n[\n10\n]\nI",
    "that everyone already knows about them.\n\n[\n10\n]\nI imagined when I started writing this that the best possible essay\nwould be timeless in the stricter, evergreen sense: that it would\ncontain some deep, timeless wisdom that would appeal equally to\nAristotle and Feynman. That doesn't seem to be true. But if the\nbest possible essay wouldn't usually be timeless in this stricter\nsense, what would it",
    "be timeless in this stricter\nsense, what would it take to write essays that were?\nThe answer to that turns out to be very strange: to be the evergreen\nkind of timeless, an essay has to be ineffective, in the sense that\nits discoveries aren't assimilated into our shared culture. Otherwise\nthere will be nothing new in it for the second generation of readers.\nIf you want to surprise readers not just",
    "readers.\nIf you want to surprise readers not just now but in the future as\nwell, you have to write essays that won't stick — essays that,\nno matter how good they are, won't become part of what people in\nthe future learn before they read them. \n\n[\n11\n]\nI can imagine several ways to do that. One would be to write about\nthings people never learn. For example, it's a long-established\npattern for",
    "For example, it's a long-established\npattern for ambitious people to chase after various types of prizes,\nand only later, perhaps too late, to realize that some of them\nweren't worth as much as they thought. If you write about that, you\ncan be confident of a conveyor belt of future readers to be surprised\nby it.\nDitto if you write about the tendency of the inexperienced to overdo\nthings — of young",
    "of the inexperienced to overdo\nthings — of young engineers to produce overcomplicated solutions,\nfor example. There are some kinds of mistakes people never learn\nto avoid except by making them. Any of those should be a timeless\ntopic.\nSometimes when we're slow to grasp things it's not just because\nwe're obtuse or in denial but because we've been deliberately lied\nto. There are a lot of things",
    "deliberately lied\nto. There are a lot of things adults \nlie\n \nto kids about, and when\nyou reach adulthood, they don't take you aside and hand you a list\nof them. They don't remember which lies they told you, and most\nwere implicit anyway. So contradicting such lies will be a source\nof surprises for as long as adults keep telling them.\nSometimes it's systems that lie to you. For example, the",
    "it's systems that lie to you. For example, the educational\nsystems in most countries train you to win by \n\nhacking the test\n. But\nthat's not how you win at the most important real-world tests, and\nafter decades of training, this is hard for new arrivals in the real\nworld to grasp. Helping them overcome such institutional lies will\nwork as long as the institutions remain broken. \n\n[\n12\n]\nAnother",
    "the institutions remain broken. \n\n[\n12\n]\nAnother recipe for timelessness is to write about things readers\nalready know, but in much more detail than can be transmitted\nculturally. \"Everyone knows,\" for example, that it can be rewarding\nto have \nkids\n. But till you have them you don't know precisely what\nforms that takes, and even then much of what you know you may never\nhave put into words.\nI've",
    "you know you may never\nhave put into words.\nI've written about all these kinds of topics. But I didn't do it\nin a deliberate attempt to write essays that were timeless in the\nstricter sense. And indeed, the fact that this depends on one's ideas\nnot sticking suggests that it's not worth making a deliberate attempt\nto. You should write about topics of timeless importance, yes, but\nif you do such a",
    "of timeless importance, yes, but\nif you do such a good job that your conclusions stick and future\ngenerations find your essay obvious instead of novel, so much the\nbetter. You've crossed into Darwin territory.\nWriting about topics of timeless importance is an instance of\nsomething even more general, though: breadth of applicability. And\nthere are more kinds of breadth than chronological — applying",
    "kinds of breadth than chronological — applying to\nlots of different fields, for example. So breadth is the ultimate\naim.\nI already aim for it. Breadth and novelty are the two things I'm\nalways chasing. But I'm glad I understand where timelessness fits.\nI understand better where a lot of things fit now. This essay has\nbeen a kind of tour of essay writing. I started out hoping to get\nadvice about",
    "writing. I started out hoping to get\nadvice about topics; if you assume good writing, the only thing\nleft to differentiate the best essay is its topic. And I did get\nadvice about topics: discover natural selection. Yeah, that would\nbe nice. But when you step back and ask what's the best you can do\nshort of making some great discovery like that, the answer turns\nout to be about procedure.",
    "that, the answer turns\nout to be about procedure. Ultimately the quality of an essay is a\nfunction of the ideas discovered in it, and the way you get them\nis by casting a wide net for questions and then being very exacting\nwith the answers.\nThe most striking feature of this map of essay writing are the\nalternating stripes of inspiration and effort required. The questions\ndepend on inspiration, but",
    "required. The questions\ndepend on inspiration, but the answers can be got by sheer persistence.\nYou don't have to get an answer right the first time, but there's\nno excuse for not getting it right eventually, because you can keep\nrewriting till you do. And this is not just a theoretical possibility.\nIt's a pretty accurate description of the way I work. I'm rewriting\nas we speak.\nBut although I",
    "I work. I'm rewriting\nas we speak.\nBut although I wish I could say that writing great essays depends mostly\non effort, in the limit case it's inspiration that makes the\ndifference. In the limit case, the questions are the harder thing\nto get. That pool has no bottom.\nHow to get more questions? That is the most important question of\nall.\nNotes\n[\n1\n]\nThere might be some resistance to this conclusion",
    "might be some resistance to this conclusion on the\ngrounds that some of these discoveries could only be understood by\na small number of readers. But you get into all sorts of difficulties\nif you want to disqualify essays on this account. How do you decide\nwhere the cutoff should be? If a virus kills off everyone except a \nhandful of people sequestered at Los Alamos,\ncould an essay that had been",
    "at Los Alamos,\ncould an essay that had been disqualified now be eligible? Etc.\nDarwin's 1844 essay was derived from an earlier version written in 1839.\nExtracts from it were published in 1858.\n[\n2\n]\nWhen you find yourself very curious about an apparently minor\nquestion, that's an exciting sign. Evolution has designed you to\npay attention to things that matter. So when you're very curious\nabout",
    "that matter. So when you're very curious\nabout something random, that could mean you've unconsciously noticed\nit's less random than it seems.\n[\n3\n]\nCorollary: If you're not intellectually honest, your writing\nwon't just be biased, but also boring, because you'll miss all the\nideas you'd have discovered if you pushed for the truth.\n[\n4\n]\nSometimes this process begins before you start",
    "this process begins before you start writing.\nSometimes you've already figured out the first few things you want\nto say. Schoolchildren are often taught they should decide \neverything\n\nthey want to say, and write this down as an outline before they\nstart writing the essay itself. Maybe that's a good way to get them\nstarted — or not, I don't know — but it's antithetical to the\nspirit of essay",
    "— but it's antithetical to the\nspirit of essay writing. The more detailed your outline, the less\nyour ideas can benefit from the sort of discovery that essays are for.\n[\n5\n]\nThe problem with this type of \"greedy\" algorithm is that you\ncan end up on a local maximum. If the most valuable question is\npreceded by a boring one, you'll overlook it. But I can't imagine\na better strategy. There's no",
    "But I can't imagine\na better strategy. There's no lookahead except by writing. So use\na greedy algorithm and a lot of time.\n[\n6\n]\nI ended up reattaching the first 5 of the 17 paragraphs, and\ndiscarding the rest.\n[\n7\n]\nStephen Fry confessed to making use of this phenomenon when\ntaking exams at Oxford. He had in his head a standard essay about\nsome general literary topic, and he would find a way to",
    "general literary topic, and he would find a way to turn the\nexam question toward it and then just reproduce it again.\nStrictly speaking it's the graph of ideas that would be highly\nconnected, not the space, but that usage would confuse people who\ndon't know graph theory, whereas people who do know it will get\nwhat I mean if I say \"space\".\n[\n8\n]\nToo far doesn't depend just on the distance from the",
    "far doesn't depend just on the distance from the original\ntopic. It's more like that distance divided by the value of whatever\nI've discovered in the subtree.\n[\n9\n]\nOr can you? I should try writing about this. Even if the\nchance of succeeding is small, the expected value is huge.\n[\n10\n]\nThere was a vogue in the 20th century for saying that the\npurpose of art was also to teach. Some artists tried",
    "of art was also to teach. Some artists tried to justify\ntheir work by explaining that their goal was not to produce something\ngood, but to challenge our preconceptions about art. And to be fair,\nart can teach somewhat. The ancient Greeks' naturalistic sculptures\nrepresented a new idea, and must have been extra exciting to\ncontemporaries on that account. But they still look good to",
    "on that account. But they still look good to us.\n[\n11\n]\nBertrand Russell caused huge controversy in the early 20th\ncentury with his ideas about \"trial marriage.\" But they make boring\nreading now, because they prevailed. \"Trial marriage\" is what we\ncall \"dating.\"\n[\n12\n]\nIf you'd asked me 10 years ago, I'd have predicted that schools\nwould continue to teach hacking the test for centuries. But now",
    "to teach hacking the test for centuries. But now it\nseems plausible that students will soon be taught individually by\nAIs, and that exams will be replaced by ongoing, invisible\nmicro-assessments.\nThanks\n to Sam Altman, Trevor Blackwell, \nJessica Livingston, Robert\nMorris, Courtenay Pipkin, and Harj Taggar for reading drafts of\nthis.",
    "Better Bayesian Filtering\n\nBetter Bayesian Filtering\n\nJanuary 2003\n(This article was given as a talk at the 2003 Spam Conference.\nIt describes the work I've done to improve the performance of\nthe algorithm described in \nA Plan for Spam\n,\nand what I plan to do in the future.)\nThe first discovery I'd like to present here is an algorithm for\nlazy evaluation of research papers. Just\nwrite whatever you",
    "of research papers. Just\nwrite whatever you want and don't cite any previous work, and\nindignant readers will send you references to all the papers you\nshould have cited. I discovered this algorithm\nafter ``A Plan for Spam'' [1] was on Slashdot.\nSpam filtering is a subset of text classification,\nwhich is a well established field, but the first papers about\nBayesian\nspam filtering per se seem to",
    "about\nBayesian\nspam filtering per se seem to have been two\ngiven at the same conference in 1998,\none by Pantel and Lin [2],\nand another by a group from\nMicrosoft Research [3].\nWhen I heard about this work I was a bit surprised. If\npeople had been onto Bayesian filtering four years ago,\nwhy wasn't everyone using it?\nWhen I read the papers I found out why. Pantel and Lin's filter was the\nmore",
    "out why. Pantel and Lin's filter was the\nmore effective of the two, but it\nonly caught 92% of spam, with 1.16% false positives.\nWhen I tried writing a Bayesian spam filter,\nit caught 99.5% of spam with less than .03% false\npositives [4].\nIt's always alarming when two people\ntrying the same experiment get widely divergent results.\nIt's especially alarming here because those two sets of",
    "especially alarming here because those two sets of numbers\nmight yield opposite conclusions.\nDifferent users have different requirements, but I think for\nmany people a filtering rate of 92% with 1.16% false positives means\nthat filtering is not an acceptable solution, whereas\n99.5% with less than .03% false positives means that it is.\nSo why did we get such different numbers?\nI haven't tried to",
    "we get such different numbers?\nI haven't tried to reproduce Pantel and Lin's results, but\nfrom reading the paper I see five things that probably account\nfor the difference.\nOne is simply that they trained their filter on very little\ndata: 160 spam and 466 nonspam mails.\nFilter performance should still be climbing with data\nsets that small. So their numbers may not even be an accurate\nmeasure of",
    "numbers may not even be an accurate\nmeasure of the performance of their algorithm, let alone of\nBayesian spam filtering in general.\nBut I think the most important difference is probably\nthat they ignored message headers. To anyone who has worked\non spam filters, this will seem a perverse decision.\nAnd yet in the very first filters I tried writing, I ignored the\nheaders too. Why? Because I wanted",
    "I ignored the\nheaders too. Why? Because I wanted to keep the problem neat.\nI didn't know much about mail headers then, and they seemed to me\nfull of random stuff. There is a lesson here for filter\nwriters: don't ignore data. You'd think this lesson would\nbe too obvious to mention, but I've had to learn it several times.\nThird, Pantel and Lin stemmed the tokens, meaning they reduced e.g.",
    "Lin stemmed the tokens, meaning they reduced e.g. both\n``mailing'' and ``mailed'' to the root ``mail''. They may\nhave felt they were forced to do this by the small size\nof their corpus, but if so this is a kind of premature \noptimization.\nFourth, they calculated probabilities differently.\nThey used all the tokens, whereas I only\nuse the 15 most significant. If you use all the tokens\nyou'll tend to",
    "If you use all the tokens\nyou'll tend to miss longer spams, the type where someone tells you their life\nstory up to the point where they got rich from some multilevel\nmarketing scheme. And such an algorithm\nwould be easy for spammers to spoof: just add a big\nchunk of random text to counterbalance the spam terms.\nFinally, they didn't bias against false positives.\nI think\nany spam filtering",
    "false positives.\nI think\nany spam filtering algorithm ought to have a convenient\nknob you can twist to decrease the\nfalse positive rate at the expense of the filtering rate.\nI do this by counting the occurrences\nof tokens in the nonspam corpus double. \n\nI don't think it's a good idea to treat spam filtering as\na straight text classification problem. You can use\ntext classification techniques, but",
    "You can use\ntext classification techniques, but solutions can and should\nreflect the fact that the text is email, and spam\nin particular. Email is not just text; it has structure.\nSpam filtering is not just classification, because\nfalse positives are so much worse than false negatives\nthat you should treat them as a different kind of error.\nAnd the source of error is not just random variation,",
    "the source of error is not just random variation, but\na live human spammer working actively to defeat your filter.\nTokens\nAnother project I heard about\nafter the Slashdot article was Bill Yerazunis' \n\nCRM114\n [5].\nThis is the counterexample to the design principle I\njust mentioned. It's a straight text classifier,\nbut such a stunningly effective one that it manages to filter\nspam almost perfectly",
    "that it manages to filter\nspam almost perfectly without even knowing that's\nwhat it's doing.\nOnce I understood how CRM114 worked, it seemed\ninevitable that I would eventually have to move from filtering based\non single words to an approach like this. But first, I thought,\nI'll see how far I can get with single words. And the answer is,\nsurprisingly far.\nMostly I've been working on smarter",
    "far.\nMostly I've been working on smarter tokenization. On\ncurrent spam, I've been able to achieve filtering rates that\napproach CRM114's. These techniques are mostly orthogonal to Bill's;\nan optimal solution might incorporate both.\n``A Plan for Spam'' uses a very simple\ndefinition of a token. Letters, digits, dashes, apostrophes,\nand dollar signs are constituent characters, and everything\nelse is",
    "are constituent characters, and everything\nelse is a token separator. I also ignored case.\nNow I have a more complicated definition of a token:\n\n Case is preserved.\n Exclamation points are constituent characters.\n Periods and commas are constituents if they occur\n between two digits. This lets me get ip addresses\n and prices intact.\n A price range like $20-25 yields two tokens,\n $20 and $25.",
    "like $20-25 yields two tokens,\n $20 and $25.\n Tokens that occur within the\n To, From, Subject, and Return-Path lines, or within urls,\n get marked accordingly. E.g. ``foo'' in the Subject line\n becomes ``Subject*foo''. (The asterisk could\n be any character you don't allow as a constituent.)\n\nSuch measures increase the filter's vocabulary, which\nmakes it more discriminating. For example, in the",
    "it more discriminating. For example, in the current\nfilter, ``free'' in the Subject line\nhas a spam probability of 98%, whereas the same token\nin the body has a spam probability of only 65%.\nHere are some of the current probabilities [6]:\n\nSubject*FREE 0.9999\nfree!! 0.9999\nTo*free 0.9998\nSubject*free 0.9782\nfree! 0.9199\nFree 0.9198\nUrl*free 0.9091\nFREE 0.8747\nFrom*free 0.7636\nfree 0.6546\n\nIn the",
    "0.8747\nFrom*free 0.7636\nfree 0.6546\n\nIn the Plan for Spam filter, all these tokens would have had the\nsame probability, .7602. That filter recognized about 23,000\ntokens. The current one recognizes about 187,000.\nThe disadvantage of having a larger universe of tokens\nis that there is more\nchance of misses.\nSpreading your corpus out over more tokens\nhas the same effect as making it smaller.\nIf you",
    "the same effect as making it smaller.\nIf you consider exclamation points as\nconstituents, for example, then you could end up\nnot having a spam probability for free with seven exclamation\npoints, even though you know that free with just two \nexclamation points has a probability of 99.99%.\nOne solution to this is what I call degeneration. If you\ncan't find an exact match for a token,\ntreat it as if",
    "find an exact match for a token,\ntreat it as if it were a less specific\nversion. I consider terminal exclamation\npoints, uppercase letters, and occurring in one of the\nfive marked contexts as making a token more specific.\nFor example, if I don't find a probability for\n``Subject*free!'', I look for probabilities for\n``Subject*free'', ``free!'', and ``free'', and take whichever one\nis farthest from",
    "``free'', and take whichever one\nis farthest from .5.\nHere are the alternatives [7]\nconsidered if the filter sees ``FREE!!!'' in the\nSubject line and doesn't have a probability for it.\n\nSubject*Free!!!\nSubject*free!!!\nSubject*FREE!\nSubject*Free!\nSubject*free!\nSubject*FREE\nSubject*Free\nSubject*free\nFREE!!!\nFree!!!\nfree!!!\nFREE!\nFree!\nfree!\nFREE\nFree\nfree \n\nIf you do this, be sure to consider",
    "If you do this, be sure to consider versions with initial\ncaps as well as all uppercase and all lowercase. Spams\ntend to have more sentences in imperative mood, and in\nthose the first word is a verb. So verbs with initial caps\nhave higher spam probabilities than they would in all \nlowercase. In my filter, the spam probability of ``Act''\nis 98% and for ``act'' only 62%.\nIf you increase your",
    "98% and for ``act'' only 62%.\nIf you increase your filter's vocabulary, you can end up\ncounting the same word multiple times, according to your old\ndefinition of ``same''.\nLogically, they're not the\nsame token anymore. But if this still bothers you, let\nme add from experience that the words you seem to be\ncounting multiple times tend to be exactly the ones you'd\nwant to.\nAnother effect of a larger",
    "the ones you'd\nwant to.\nAnother effect of a larger vocabulary is that when you\nlook at an incoming mail you find more interesting tokens,\nmeaning those with probabilities far from .5. I use the\n15 most interesting to decide if mail is spam.\nBut you can run into a problem when you use a fixed number\nlike this. If you find a lot of maximally interesting tokens,\nthe result can end up being decided by",
    "tokens,\nthe result can end up being decided by whatever random factor\ndetermines the ordering of equally interesting tokens.\nOne way to deal with this is to treat some\nas more interesting than others.\nFor example, the\ntoken ``dalco'' occurs 3 times in my spam corpus and never\nin my legitimate corpus. The token ``Url*optmails''\n(meaning ``optmails'' within a url) occurs 1223 times.\nAnd yet, as I",
    "within a url) occurs 1223 times.\nAnd yet, as I used to calculate probabilities for tokens,\nboth would have the same spam probability, the threshold of .99.\nThat doesn't feel right. There are theoretical\narguments for giving these two tokens substantially different\nprobabilities (Pantel and Lin do), but I haven't tried that yet.\nIt does seem at least that if we find more than 15 tokens\nthat only",
    "that if we find more than 15 tokens\nthat only occur in one corpus or the other, we ought to\ngive priority to the ones that occur a lot. So now\nthere are two threshold values. For tokens that occur only\nin the spam corpus, the probability is .9999 if they\noccur more than 10 times and .9998 otherwise. Ditto\nat the other end of the scale for tokens found\nonly in the legitimate corpus.\nI may later",
    "found\nonly in the legitimate corpus.\nI may later scale token probabilities substantially,\nbut this tiny amount of scaling at least ensures that \ntokens get sorted the right way.\nAnother possibility would be to consider not\njust 15 tokens, but all the tokens over a certain\nthreshold of interestingness. Steven Hauser does this\nin his statistical spam filter [8].\nIf you use a threshold, make it very",
    "filter [8].\nIf you use a threshold, make it very high, or\nspammers could spoof you by packing messages with\nmore innocent words.\nFinally, what should one do\nabout html? I've tried the whole spectrum of options, from\nignoring it to parsing it all. Ignoring html is a bad idea,\nbecause it's full of useful spam signs. But if you parse \nit all, your filter might degenerate into a mere html \nrecognizer.",
    "might degenerate into a mere html \nrecognizer. The most effective approach\nseems to be the middle course, to notice some tokens but not\nothers. I look at a, img, and font tags, and ignore the\nrest. Links and images you should certainly look at, because\nthey contain urls.\nI could probably be smarter about dealing with html, but I\ndon't think it's worth putting a lot of time into this.\nSpams full of",
    "putting a lot of time into this.\nSpams full of html are easy to filter. The smarter\nspammers already avoid it. So\nperformance in the future should not depend much on how\nyou deal with html.\nPerformance\nBetween December 10 2002 and January 10 2003 I got about\n1750 spams. \nOf these, 4 got through. That's a filtering\nrate of about 99.75%.\nTwo of the four spams I missed got through because",
    "of the four spams I missed got through because they\nhappened to use words that occur often in my legitimate\nemail.\nThe third was one of those that exploit\nan insecure cgi script to send mail to third parties.\nThey're hard to filter based just\non the content because the headers are innocent and \nthey're careful about the words they use. Even so I can\nusually catch them. This one squeaked by with",
    "can\nusually catch them. This one squeaked by with a\nprobability of .88, just under the threshold of .9.\nOf course, looking at multiple token sequences\nwould catch it easily. ``Below is the result of\nyour feedback form'' is an instant giveaway.\nThe fourth spam was what I call\na spam-of-the-future, because this is what I expect spam to\nevolve into: some completely neutral\ntext followed by a url. In",
    "some completely neutral\ntext followed by a url. In this case it was was from\nsomeone saying they had finally finished their homepage\nand would I go look at it. (The page was of course an \nad for a porn site.)\nIf the spammers are careful about the headers and use a\nfresh url, there is nothing in spam-of-the-future for filters\nto notice. We can of course counter by sending a\ncrawler to look at the",
    "course counter by sending a\ncrawler to look at the page. But that might not be necessary.\nThe response rate for spam-of-the-future must\nbe low, or everyone would be doing it.\nIf it's low enough,\nit \nwon't pay\n for spammers to send it, and we won't \nhave to work too hard on filtering it.\nNow for the really shocking news: during that same one-month\nperiod I got \nthree\n false positives.\nIn a way",
    "I got \nthree\n false positives.\nIn a way it's\na relief to get some false positives. When I wrote ``A Plan\nfor Spam'' I hadn't had any, and I didn't know what they'd\nbe like. Now that I've had a few, I'm relieved to find\nthey're not as bad as I feared.\nFalse positives yielded by statistical\nfilters turn out to be mails that sound a lot like spam, and\nthese tend to be the ones you would least mind",
    "and\nthese tend to be the ones you would least mind missing [9].\nTwo of the false positives were newsletters\nfrom companies I've bought things from. I never\nasked to receive them, so arguably they\nwere spams, but I count them as false positives because\nI hadn't been deleting them as spams before. The reason\nthe filters caught them was that both companies in \nJanuary switched to commercial email",
    "companies in \nJanuary switched to commercial email senders\ninstead of sending the mails from their own servers, \nand both the headers and the bodies became much spammier.\nThe third false positive was a bad one, though. It was \nfrom someone in Egypt and written in all uppercase. This was\na direct result of making tokens case sensitive; the Plan\nfor Spam filter wouldn't have caught it.\nIt's hard to",
    "Spam filter wouldn't have caught it.\nIt's hard to say what the overall false positive rate is,\nbecause we're up in the noise, statistically.\nAnyone who has worked on filters (at least, effective filters) will\nbe aware of this problem.\nWith some emails it's\nhard to say whether they're spam or not, and these are\nthe ones you end up looking at when you get filters \nreally tight. For example, so far",
    "you get filters \nreally tight. For example, so far the filter has\ncaught two emails that were sent to my address because\nof a typo, and one sent to me in the belief that I was \nsomeone else. Arguably, these are neither my spam\nnor my nonspam mail.\nAnother false positive was from a vice president at Virtumundo.\nI wrote to them pretending to be a customer,\nand since the reply came back through",
    "a customer,\nand since the reply came back through Virtumundo's \nmail servers it had the most incriminating\nheaders imaginable. Arguably this isn't a real false\npositive either, but a sort of Heisenberg uncertainty\neffect: I only got it because I was writing about spam \nfiltering.\nNot counting these, I've had a total of five false positives\nso far, out of about 7740 legitimate emails, a rate of",
    "out of about 7740 legitimate emails, a rate of .06%.\nThe other two were a notice that something I bought\nwas back-ordered, and a party reminder from Evite.\nI don't think this number can be trusted, partly\nbecause the sample is so small, and partly because\nI think I can fix the filter not to catch\nsome of these.\nFalse positives seem to me a different kind of error from\nfalse negatives.\nFiltering",
    "kind of error from\nfalse negatives.\nFiltering rate is a measure of performance. False\npositives I consider more like bugs. I approach improving the\nfiltering rate as optimization, and decreasing false\npositives as debugging.\nSo these five false positives are my bug list. For example, \nthe mail from Egypt got nailed because the uppercase text\nmade it look to the filter like a Nigerian spam.\nThis",
    "it look to the filter like a Nigerian spam.\nThis really is kind of a bug. As with\nhtml, the email being all uppercase is really conceptually \none\n\nfeature, not one for each word. I need to handle case in a\nmore sophisticated way.\nSo what to make of this .06%? Not much, I think. You could\ntreat it as an upper bound, bearing in mind the small sample size.\nBut at this stage it is more a measure of",
    "size.\nBut at this stage it is more a measure of the bugs\nin my implementation than some intrinsic false positive rate\nof Bayesian filtering.\nFuture\nWhat next? Filtering is an optimization problem,\nand the key to optimization is profiling. Don't\ntry to guess where your code is slow, because you'll\nguess wrong. \nLook\n at where your code is slow,\nand fix that. In filtering, this translates to: \nlook",
    "fix that. In filtering, this translates to: \nlook at the spams you miss, and figure out what you\ncould have done to catch them.\nFor example, spammers are now working aggressively to \nevade filters, and one of the things they're doing is\nbreaking up and misspelling words to prevent filters from\nrecognizing them. But working on this is not my first\npriority, because I still have no trouble catching",
    "because I still have no trouble catching these\nspams [10].\nThere are two kinds of spams I currently do\nhave trouble with.\nOne is the type that pretends to be an email from \na woman inviting you to go chat with her or see her profile on a dating\nsite. These get through because they're the one type of\nsales pitch you can make without using sales talk. They use\nthe same vocabulary as ordinary",
    "talk. They use\nthe same vocabulary as ordinary email.\nThe other kind of spams I have trouble filtering are those\nfrom companies in e.g. Bulgaria offering contract programming \nservices. These get through because I'm a programmer too, and\nthe spams are full of the same words as my real mail.\nI'll probably focus on the personal ad type first. I think if\nI look closer I'll be able to find statistical",
    "if\nI look closer I'll be able to find statistical differences\nbetween these and my real mail. The style of writing is\ncertainly different, though it may take multiword filtering\nto catch that.\nAlso, I notice they tend to repeat the url,\nand someone including a url in a legitimate mail wouldn't do that [11].\nThe outsourcing type are going to be hard to catch. Even if \nyou sent a crawler to the",
    "hard to catch. Even if \nyou sent a crawler to the site, you wouldn't find a smoking\nstatistical gun.\nMaybe the only answer is a central list of\ndomains advertised in spams [12]. But there can't be that\nmany of this type of mail. If the only\nspams left were unsolicited offers of contract programming\nservices from Bulgaria, we could all probably move on to\nworking on something else.\nWill statistical",
    "on to\nworking on something else.\nWill statistical filtering actually get us to that point?\nI don't know. Right now, for me personally, spam is\nnot a problem. But spammers haven't yet made a serious\neffort to spoof statistical filters. What will happen when they do?\nI'm not optimistic about filters that work at the\nnetwork level [13].\nWhen there is a static obstacle worth getting past, spammers\nare",
    "a static obstacle worth getting past, spammers\nare pretty efficient at getting past it. There\nis already a company called Assurance Systems that will\nrun your mail through Spamassassin and tell you whether \nit will get filtered out.\nNetwork-level filters won't be completely useless.\nThey may be enough to kill all the \"opt-in\"\nspam, meaning spam from companies like Virtumundo and\nEqualamail who",
    "from companies like Virtumundo and\nEqualamail who claim that they're really running opt-in lists.\nYou can filter those based just on the headers, no\nmatter what they say in the body. But anyone willing to\nfalsify headers or use open relays, presumably including\nmost porn spammers, should be able to get some message past\nnetwork-level filters if they want to. (By no means the\nmessage they'd like to",
    "want to. (By no means the\nmessage they'd like to send though, which is something.)\nThe kind of filters I'm optimistic about are ones that\ncalculate probabilities based on each individual user's mail.\nThese can be much more effective, not only in\navoiding false positives, but in filtering too: for example,\nfinding the recipient's email address base-64 encoded anywhere in\na message is a very good",
    "encoded anywhere in\na message is a very good spam indicator.\nBut the real advantage of individual filters is that they'll all be\ndifferent. If everyone's filters have different probabilities,\nit will make the spammers' optimization loop, what programmers\nwould call their edit-compile-test cycle, appallingly slow. \nInstead of just tweaking a spam till it gets through a copy of\nsome filter they have",
    "it gets through a copy of\nsome filter they have on their desktop, they'll have to do a\ntest mailing for each tweak. It would be like programming in\na language without an interactive toplevel, \nand I wouldn't wish that\non anyone.\nNotes\n[1]\nPaul Graham. ``A Plan for Spam.'' August 2002.\nhttp://paulgraham.com/spam.html.\nProbabilities in this algorithm are\ncalculated using a degenerate case of Bayes'",
    "are\ncalculated using a degenerate case of Bayes' Rule. There are\ntwo simplifying assumptions: that the probabilities\nof features (i.e. words) are independent, and that we know\nnothing about the prior probability of an email being\nspam.\nThe first assumption is widespread in text classification.\nAlgorithms that use it are called ``naive Bayesian.''\nThe second assumption I made because the proportion",
    "second assumption I made because the proportion of spam in\nmy incoming mail fluctuated so much from day to day (indeed,\nfrom hour to hour) that the overall prior ratio seemed\nworthless as a predictor. If you assume that P(spam) and\nP(nonspam) are both .5, they cancel out and you can\nremove them from the formula.\nIf you were doing Bayesian filtering in a situation where \nthe ratio of spam to",
    "in a situation where \nthe ratio of spam to nonspam was consistently very high or\n(especially) very low, you could probably improve filter\nperformance by incorporating prior probabilities. To do\nthis right you'd have to track ratios by time of day, because\nspam and legitimate mail volume both have distinct daily\npatterns.\n[2]\nPatrick Pantel and Dekang Lin. ``SpamCop-- A Spam\nClassification &",
    "Dekang Lin. ``SpamCop-- A Spam\nClassification & Organization Program.'' Proceedings of AAAI-98\nWorkshop on Learning for Text Categorization.\n[3]\nMehran Sahami, Susan Dumais, David Heckerman and Eric Horvitz.\n``A Bayesian Approach to Filtering Junk E-Mail.'' Proceedings of AAAI-98\nWorkshop on Learning for Text Categorization.\n[4] At the time I had zero false positives out of about 4,000 \nlegitimate",
    "false positives out of about 4,000 \nlegitimate emails. If the next legitimate email was\na false positive, this would give us .03%. These false positive\nrates are untrustworthy, as I explain later. I quote\na number here only to emphasize that whatever the false positive rate\nis, it is less than 1.16%.\n\n[5] Bill Yerazunis. ``Sparse Binary Polynomial Hash Message\nFiltering and The CRM114",
    "Polynomial Hash Message\nFiltering and The CRM114 Discriminator.'' Proceedings of 2003\nSpam Conference.\n[6] In ``A Plan for Spam'' I used thresholds of .99 and .01.\nIt seems justifiable to use thresholds proportionate to the\nsize of the corpora. Since I now have on the order of 10,000 of each\ntype of mail, I use .9999 and .0001.\n[7] There is a flaw here I should probably fix. Currently,\nwhen",
    "a flaw here I should probably fix. Currently,\nwhen ``Subject*foo'' degenerates to just ``foo'', what that means is\nyou're getting the stats for occurrences of ``foo'' in\nthe body or header lines other than those I mark.\nWhat I should do is keep track of statistics for ``foo''\noverall as well as specific versions, and degenerate from\n``Subject*foo'' not to ``foo'' but to ``Anywhere*foo''. Ditto",
    "not to ``foo'' but to ``Anywhere*foo''. Ditto for\ncase: I should degenerate from uppercase to any-case, not\nlowercase.\nIt would probably be a win to do this with prices\ntoo, e.g. to degenerate from ``$129.99'' to ``$--9.99'', ``$--.99'',\nand ``$--''.\nYou could also degenerate from words to their stems,\nbut this would probably only improve filtering rates early on \nwhen you had small corpora.\n[8]",
    "rates early on \nwhen you had small corpora.\n[8] Steven Hauser. ``Statistical Spam Filter Works for Me.''\nhttp://www.sofbot.com.\n[9] False positives are not all equal, and we should remember\nthis when comparing techniques for stopping spam.\nWhereas many of the false positives caused by filters\nwill be near-spams that you wouldn't mind missing,\nfalse positives caused by blacklists, for example, will",
    "positives caused by blacklists, for example, will be just\nmail from people who chose the wrong ISP. In both\ncases you catch mail that's near spam, but for blacklists nearness\nis physical, and for filters it's textual.\n\n[10] If spammers get good enough at obscuring tokens \nfor this to be a problem, we can respond by simply removing\nwhitespace, periods, commas, etc. and using a dictionary to\npick",
    "commas, etc. and using a dictionary to\npick the words out of the resulting sequence.\nAnd of course finding words this way that weren't visible in\nthe original text would in itself be evidence of spam.\nPicking out the words won't be trivial. It will require \nmore than just reconstructing word boundaries; spammers\nboth add (``xHot nPorn cSite'') and omit (``P#rn'') letters.\nVision research may be",
    "omit (``P#rn'') letters.\nVision research may be useful here, since human vision is\nthe limit that such tricks will approach.\n[11] \nIn general, spams are more repetitive than regular email. \nThey want to pound that message home. I currently don't\nallow duplicates in the top 15 tokens, because\nyou could get a false positive if the sender happens to use\nsome bad word multiple times. (In my current",
    "use\nsome bad word multiple times. (In my current filter, ``dick'' has\na spam probabilty of .9999, but it's also a name.)\nIt seems we should at least notice duplication though,\nso I may try allowing up to two of each token, as Brian Burton does in\nSpamProbe.\n[12] This is what approaches like Brightmail's will\ndegenerate into once spammers are pushed into using mad-lib\ntechniques to generate",
    "pushed into using mad-lib\ntechniques to generate everything else in the message.\n[13]\nIt's sometimes argued that we should be working on filtering\nat the network level, because it is more efficient. What people\nusually mean when they say this is: we currently filter at the\nnetwork level, and we don't want to start over from scratch.\nBut you can't dictate the problem to fit your",
    "you can't dictate the problem to fit your solution.\nHistorically, scarce-resource arguments have been the losing\nside in debates about software design.\nPeople only tend to use them to justify choices\n(inaction in particular) made for other reasons.\nThanks\n to Sarah Harlin, Trevor Blackwell, and\nDan Giffin for reading drafts of this paper, and to Dan again\nfor most of the infrastructure that this",
    "Dan again\nfor most of the infrastructure that this filter runs on.\nRelated:\nA Plan for Spam\nPlan for Spam FAQ\n2003 Spam Conference Proceedings\nJapanese Translation\nChinese Translation\nTest of These Suggestions",
    "A Way to Detect Bias\n\nA Way to Detect Bias\n\nOctober 2015\nThis will come as a surprise to a lot of people, but in some cases\nit's possible to detect bias in a selection process without knowing\nanything about the applicant pool. Which is exciting because among\nother things it means third parties can use this technique to detect\nbias whether those doing the selecting want them to or not.\nYou can use",
    "the selecting want them to or not.\nYou can use this technique whenever (a) you have at least\na random sample of the applicants that were selected, (b) their\nsubsequent performance is measured, and (c) the groups of\napplicants you're comparing have roughly equal distribution of ability.\nHow does it work? Think about what it means to be biased. What\nit means for a selection process to be biased",
    "What\nit means for a selection process to be biased against applicants\nof type x is that it's harder for them to make it through. Which\nmeans applicants of type x have to be better to get selected than\napplicants not of type x.\n\n[\n1\n]\n\nWhich means applicants of type x\nwho do make it through the selection process will outperform other\nsuccessful applicants. And if the performance of all the",
    "applicants. And if the performance of all the successful\napplicants is measured, you'll know if they do.\nOf course, the test you use to measure performance must be a valid\none. And in particular it must not be invalidated by the bias you're\ntrying to measure.\nBut there are some domains where performance can be measured, and\nin those detecting bias is straightforward. Want to know if the\nselection",
    "is straightforward. Want to know if the\nselection process was biased against some type of applicant? Check\nwhether they outperform the others. This is not just a heuristic\nfor detecting bias. It's what bias means.\nFor example, many suspect that venture capital firms are biased\nagainst female founders. This would be easy to detect: among their\nportfolio companies, do startups with female founders",
    "companies, do startups with female founders outperform\nthose without? A couple months ago, one VC firm (almost certainly\nunintentionally) published a study showing bias of this type. First\nRound Capital found that among its portfolio companies, startups\nwith female founders \noutperformed\n\nthose without by 63%. \n\n[\n2\n]\nThe reason I began by saying that this technique would come as a\nsurprise to",
    "that this technique would come as a\nsurprise to many people is that we so rarely see analyses of this\ntype. I'm sure it will come as a surprise to First Round that they\nperformed one. I doubt anyone there realized that by limiting their\nsample to their own portfolio, they were producing a study not of\nstartup trends but of their own biases when selecting companies.\nI predict we'll see this",
    "when selecting companies.\nI predict we'll see this technique used more in the future. The\ninformation needed to conduct such studies is increasingly available.\nData about who applies for things is usually closely guarded by the\norganizations selecting them, but nowadays data about who gets\nselected is often publicly available to anyone who takes the trouble\nto aggregate it.\n\nNotes\n[\n1\n]\nThis",
    "the trouble\nto aggregate it.\n\nNotes\n[\n1\n]\nThis technique wouldn't work if the selection process looked\nfor different things from different types of applicants—for\nexample, if an employer hired men based on their ability but women\nbased on their appearance.\n[\n2\n]\nAs Paul Buchheit points out, First Round excluded their most \nsuccessful investment, Uber, from the study. And while it \nmakes sense to",
    "Uber, from the study. And while it \nmakes sense to exclude outliers from some types of studies, \nstudies of returns from startup investing, which is all about \nhitting outliers, are not one of them.\n\nThanks\n to Sam Altman, Jessica Livingston, and Geoff Ralston for reading\ndrafts of this.\nArabic Translation\nSwedish Translation",
    "Bio\n\nBio\n\nPaul Graham is a programmer, writer, and investor.\nIn 1995, he and Robert Morris started Viaweb, the first software\nas a service company. Viaweb was acquired by \n\nYahoo\n in 1998, \nwhere it became Yahoo Store. In 2001 he started publishing\nessays on \npaulgraham.com\n,\nwhich now gets around 25 million page views per year.\nIn 2005 he and\nJessica Livingston, Robert Morris, and Trevor",
    "and\nJessica Livingston, Robert Morris, and Trevor Blackwell\nstarted \nY Combinator\n, the first of a new type of startup\nincubator. Since 2005 Y Combinator has funded over 3000 startups,\nincluding Airbnb, Dropbox, Stripe, and Reddit. In 2019 he published a\nnew Lisp dialect written in itself called \nBel\n.\nPaul\nis the author of \n\nOn Lisp\n (Prentice Hall,\n 1993),\n\nANSI Common Lisp\n \n(Prentice Hall,",
    "Hall,\n 1993),\n\nANSI Common Lisp\n \n(Prentice Hall, 1995), and\n\nHackers &\nPainters\n (O'Reilly, 2004).\nHe has an AB from Cornell and a\n PhD in Computer Science from Harvard, and studied painting\nat RISD and the Accademia di Belle Arti in Florence.\n\nPhoto by Dave Thomas, released under the \nAttribution Creative Commons license.\nClick for full-size version.",
    "Books\n\nBooks\n\nOn Lisp\nANSI Common Lisp\nHackers & Painters",
    "You Weren't Meant to Have a Boss\n\nYou Weren't Meant to Have a Boss\n\nWant to start a startup?\n Get funded by\n\nY Combinator\n.\n\nMarch 2008, rev. June 2008\nTechnology tends to separate normal from natural. Our bodies\nweren't designed to eat the foods that people in rich countries eat, or\nto get so little exercise. \nThere may be a similar problem with the way we work: \na normal job may be as bad for us",
    "way we work: \na normal job may be as bad for us intellectually as white flour\nor sugar is for us physically.\nI began to suspect this after spending several years working \nwith startup founders. I've now worked with over 200 of them, and I've\nnoticed a definite difference between programmers working on their\nown startups and those working for large organizations.\nI wouldn't say founders seem",
    "large organizations.\nI wouldn't say founders seem happier, necessarily;\nstarting a startup can be very stressful. Maybe the best way to put\nit is to say that they're happier in the sense that your body is\nhappier during a long run than sitting on a sofa eating\ndoughnuts.\nThough they're statistically abnormal, startup founders seem to be\nworking in a way that's more natural for humans.\nI was in",
    "in a way that's more natural for humans.\nI was in Africa last year and saw a lot of animals in the wild that\nI'd only seen in zoos before. It was remarkable how different they\nseemed. Particularly lions. Lions in the wild seem about ten times\nmore alive. They're like different animals. I suspect that working\nfor oneself feels better to humans in much the same way that living\nin the wild must feel",
    "the same way that living\nin the wild must feel better to a wide-ranging predator like a lion.\nLife in a zoo is easier, but it isn't the life they were designed\nfor.\n\nTrees\nWhat's so unnatural about working for a big company? The root of\nthe problem is that humans weren't meant to work in such large\ngroups.\nAnother thing you notice when you see animals in the wild is that\neach species thrives in",
    "in the wild is that\neach species thrives in groups of a certain size. A herd of impalas\nmight have 100 adults; baboons maybe 20; lions rarely 10. Humans\nalso seem designed to work in groups, and what I've read about\nhunter-gatherers accords with research on organizations and my own\nexperience to suggest roughly what the ideal size is: groups of 8\nwork well; by 20 they're getting hard to manage;",
    "8\nwork well; by 20 they're getting hard to manage; and a group of 50\nis really unwieldy.\n\n[\n1\n]\n\nWhatever the upper limit is, we are clearly not meant to work in\ngroups of several hundred. And yet—for reasons having more\nto do with technology than human nature—a great many people\nwork for companies with hundreds or thousands of employees.\nCompanies know groups that large wouldn't work, so they",
    "know groups that large wouldn't work, so they divide\nthemselves into units small enough to work together. But to\ncoordinate these they have to introduce something new: bosses.\nThese smaller groups are always arranged in a tree structure. Your\nboss is the point where your group attaches to the tree. But when\nyou use this trick for dividing a large group into smaller ones,\nsomething strange happens",
    "group into smaller ones,\nsomething strange happens that I've never heard anyone mention\nexplicitly. In the group one level up from yours, your boss\nrepresents your entire group. A group of 10 managers is not merely\na group of 10 people working together in the usual way. It's really\na group of groups. Which means for a group of 10 managers to work\ntogether as if they were simply a group of 10",
    "work\ntogether as if they were simply a group of 10 individuals, the group\nworking for each manager would have to work as if they were a single\nperson—the workers and manager would each share only one\nperson's worth of freedom between them.\nIn practice a group of people are never able to act as if they were\none person. But in a large organization divided into groups in\nthis way, the pressure is",
    "divided into groups in\nthis way, the pressure is always in that direction. Each group\ntries its best to work as if it were the small group of individuals\nthat humans were designed to work in. That was the point of creating\nit. And when you propagate that constraint, the result is that\neach person gets freedom of action in inverse proportion to the\nsize of the entire tree.\n\n[\n2\n]\nAnyone who's",
    "the\nsize of the entire tree.\n\n[\n2\n]\nAnyone who's worked for a large organization has felt this. You\ncan feel the difference between working for a company with 100\nemployees and one with 10,000, even if your group has only 10 people.\n\nCorn Syrup\nA group of 10 people within a large organization is a kind of fake\ntribe. The number of people you interact with is about right. But\nsomething is missing:",
    "with is about right. But\nsomething is missing: individual initiative. Tribes of hunter-gatherers\nhave much more freedom. The leaders have a little more power than other\nmembers of the tribe, but they don't generally tell them what to\ndo and when the way a boss can.\nIt's not your boss's fault. The real problem is that in the group\nabove you in the hierarchy, your entire group is one virtual",
    "in the hierarchy, your entire group is one virtual person.\nYour boss is just the way that constraint is imparted to you.\nSo working in a group of 10 people within a large organization feels\nboth right and wrong at the same time. On the surface it feels\nlike the kind of group you're meant to work in, but something major\nis missing. A job at a big company is like high fructose corn\nsyrup: it has",
    "company is like high fructose corn\nsyrup: it has some of the qualities of things you're meant to like,\nbut is disastrously lacking in others.\nIndeed, food is an excellent metaphor to explain what's wrong with\nthe usual sort of job.\nFor example, working for a big company is the default thing to do,\nat least for programmers. How bad could it be? Well, food shows\nthat pretty clearly. If you were",
    "Well, food shows\nthat pretty clearly. If you were dropped at a random point in\nAmerica today, nearly all the food around you would be bad for you.\nHumans were not designed to eat white flour, refined sugar, high\nfructose corn syrup, and hydrogenated vegetable oil. And yet if\nyou analyzed the contents of the average grocery store you'd probably\nfind these four ingredients accounted for most of the",
    "these four ingredients accounted for most of the calories.\n\"Normal\" food is terribly bad for you. The only people who eat\nwhat humans were actually designed to eat are a few Birkenstock-wearing\nweirdos in Berkeley.\nIf \"normal\" food is so bad for us, why is it so common? There are\ntwo main reasons. One is that it has more immediate appeal. You\nmay feel lousy an hour after eating that pizza, but",
    "feel lousy an hour after eating that pizza, but eating the first\ncouple bites feels great. The other is economies of scale.\nProducing junk food scales; producing fresh vegetables doesn't.\nWhich means (a) junk food can be very cheap, and (b) it's worth\nspending a lot to market it.\nIf people have to choose between something that's cheap, heavily\nmarketed, and appealing in the short term, and",
    "and appealing in the short term, and something that's\nexpensive, obscure, and appealing in the long term, which do you\nthink most will choose?\nIt's the same with work. The average MIT graduate wants to work\nat Google or Microsoft, because it's a recognized brand, it's safe,\nand they'll get paid a good salary right away. It's the job\nequivalent of the pizza they had for lunch. The drawbacks",
    "of the pizza they had for lunch. The drawbacks will\nonly become apparent later, and then only in a vague sense of\nmalaise.\nAnd founders and early employees of startups, meanwhile, are like\nthe Birkenstock-wearing weirdos of Berkeley: though a tiny minority\nof the population, they're the ones living as humans are meant to.\nIn an artificial world, only extremists live naturally.\n\nProgrammers\nThe",
    "only extremists live naturally.\n\nProgrammers\nThe restrictiveness of big company jobs is particularly hard on\nprogrammers, because the essence of programming is to build new\nthings. Sales people make much the same pitches every day; support\npeople answer much the same questions; but once you've written a\npiece of code you don't need to write it again. So a programmer\nworking as programmers are",
    "again. So a programmer\nworking as programmers are meant to is always making new things.\nAnd when you're part of an organization whose structure gives each\nperson freedom in inverse proportion to the size of the tree, you're\ngoing to face resistance when you do something new.\nThis seems an inevitable consequence of bigness. It's true even\nin the smartest companies. I was talking recently to a",
    "smartest companies. I was talking recently to a founder who\nconsidered starting a startup right out of college, but went to\nwork for Google instead because he thought he'd learn more there.\nHe didn't learn as much as he expected. Programmers learn by doing,\nand most of the things he wanted to do, he couldn't—sometimes\nbecause the company wouldn't let him, but often because the company's\ncode",
    "let him, but often because the company's\ncode wouldn't let him. Between the drag of legacy code, the overhead\nof doing development in such a large organization, and the restrictions\nimposed by interfaces owned by other groups, he could only try a\nfraction of the things he would have liked to. He said he has\nlearned much more in his own startup, despite the fact that he has\nto do all the company's",
    "the fact that he has\nto do all the company's errands as well as programming, because at\nleast when he's programming he can do whatever he wants.\nAn obstacle downstream propagates upstream. If you're not allowed\nto implement new ideas, you stop having them. And vice versa: when\nyou can do whatever you want, you have more ideas about what to do.\nSo working for yourself makes your brain more powerful",
    "for yourself makes your brain more powerful in the same\nway a low-restriction exhaust system makes an engine more powerful.\nWorking for yourself doesn't have to mean starting a startup, of\ncourse. But a programmer deciding between a regular job at a big\ncompany and their own startup is probably going to learn more doing\nthe startup.\nYou can adjust the amount of freedom you get by scaling the",
    "the amount of freedom you get by scaling the size\nof company you work for. If you start the company, you'll have the\nmost freedom. If you become one of the first 10 employees you'll\nhave almost as much freedom as the founders. Even a company with\n100 people will feel different from one with 1000.\nWorking for a small company doesn't ensure freedom. The tree\nstructure of large organizations sets an",
    "The tree\nstructure of large organizations sets an upper bound on freedom,\nnot a lower bound. The head of a small company may still choose\nto be a tyrant. The point is that a large organization is compelled\nby its structure to be one.\n\nConsequences\nThat has real consequences for both organizations and individuals.\nOne is that companies will inevitably slow down as they grow larger,\nno matter how",
    "slow down as they grow larger,\nno matter how hard they try to keep their startup mojo. It's a\nconsequence of the tree structure that every large organization is\nforced to adopt.\nOr rather, a large organization could only avoid slowing down if\nthey avoided tree structure. And since human nature limits the\nsize of group that can work together, the only way I can imagine\nfor larger groups to avoid",
    "only way I can imagine\nfor larger groups to avoid tree structure would be to have no\nstructure: to have each group actually be independent, and to work\ntogether the way components of a market economy do.\nThat might be worth exploring. I suspect there are already some\nhighly partitionable businesses that lean this way. But I don't\nknow any technology companies that have done it.\nThere is one thing",
    "companies that have done it.\nThere is one thing companies can do short of structuring themselves\nas sponges: they can stay small. If I'm right, then it really\npays to keep a company as small as it can be at every stage.\nParticularly a technology company. Which means it's doubly important\nto hire the best people. Mediocre hires hurt you twice: they get\nless done, but they also make you big, because",
    "get\nless done, but they also make you big, because you need more of\nthem to solve a given problem.\nFor individuals the upshot is the same: aim small. It will always\nsuck to work for large organizations, and the larger the organization,\nthe more it will suck.\nIn an \nessay\n I wrote a couple years ago \nI advised graduating seniors\nto work for a couple years for another company before starting",
    "a couple years for another company before starting their\nown. I'd modify that now. Work for another company if you want\nto, but only for a small one, and if you want to start your own\nstartup, go ahead.\nThe reason I suggested college graduates not start startups immediately\nwas that I felt most would fail. And they will. But ambitious\nprogrammers are better off doing their own thing and failing",
    "are better off doing their own thing and failing than\ngoing to work at a big company. Certainly they'll learn more. They\nmight even be better off financially. A lot of people in their\nearly twenties get into debt, because their expenses grow even\nfaster than the salary that seemed so high when they left school.\nAt least if you start a startup and fail your net worth will be\nzero rather than",
    "and fail your net worth will be\nzero rather than negative. \n\n[\n3\n]\nWe've now funded so many different types of founders that we have\nenough data to see patterns, and there seems to be no benefit from\nworking for a big company. The people who've worked for a few years\ndo seem better than the ones straight out of college, but only\nbecause they're that much older.\nThe people who come to us from big",
    "much older.\nThe people who come to us from big companies often seem kind of\nconservative. It's hard to say how much is because big companies\nmade them that way, and how much is the natural conservatism that\nmade them work for the big companies in the first place. But\ncertainly a large part of it is learned. I know because I've seen\nit burn off.\nHaving seen that happen so many times is one of the",
    "seen that happen so many times is one of the things that\nconvinces me that working for oneself, or at least for a small\ngroup, is the natural way for programmers to live. Founders arriving\nat Y Combinator often have the downtrodden air of refugees. Three\nmonths later they're transformed: they have so much more \n\nconfidence\n\nthat they seem as if they've grown several inches taller. \n\n[\n4\n]\n\nStrange",
    "grown several inches taller. \n\n[\n4\n]\n\nStrange as this sounds, they seem both more worried and happier at the same\ntime. Which is exactly how I'd describe the way lions seem in the\nwild.\nWatching employees get transformed into founders makes it clear\nthat the difference between the two is due mostly to environment—and\nin particular that the environment in big companies is toxic to\nprogrammers. In",
    "in big companies is toxic to\nprogrammers. In the first couple weeks of working on their own\nstartup they seem to come to life, because finally they're working\nthe way people are meant to.\nNotes\n[\n1\n]\nWhen I talk about humans being meant or designed to live a\ncertain way, I mean by evolution.\n[\n2\n]\nIt's not only the leaves who suffer. The constraint propagates\nup as well as down. So managers are",
    "propagates\nup as well as down. So managers are constrained too; instead of\njust doing things, they have to act through subordinates.\n[\n3\n]\nDo not finance your startup with credit cards. Financing a\nstartup with debt is usually a stupid move, and credit card debt\nstupidest of all. Credit card debt is a bad idea, period. It is\na trap set by evil companies for the desperate and the foolish.\n[\n4\n]\nThe",
    "for the desperate and the foolish.\n[\n4\n]\nThe founders we fund used to be younger (initially we encouraged\nundergrads to apply), and the first couple times I saw this I used\nto wonder if they were actually getting physically taller.\nThanks\n to Trevor Blackwell, Ross Boucher, Aaron Iba, Abby\nKirigin, Ivan Kirigin, Jessica Livingston, and Robert Morris for\nreading drafts of this.\nFrench",
    "Robert Morris for\nreading drafts of this.\nFrench Translation\nRussian Translation",
    "Why Smart People Have Bad Ideas\n\nWhy Smart People Have Bad Ideas\n\nWant to start a startup?\n Get funded by\n\nY Combinator\n.\n\nApril 2005\nThis summer, as an \nexperiment, some \nfriends and I are giving \nseed\nfunding\n to a bunch of new startups. It's an experiment because\nwe're prepared to fund younger founders than most investors would.\nThat's why we're doing it during the summer—so even",
    "why we're doing it during the summer—so even college\nstudents can participate.\nWe know from Google and Yahoo that grad students can start successful\nstartups. And we know from experience that some undergrads are as\ncapable as most grad students. The accepted age for startup founders\nhas been creeping downward. We're trying to find the lower bound.\n\nThe deadline has now passed, and we're sifting",
    "deadline has now passed, and we're sifting through 227 applications.\n\nWe expected to divide them into two categories, promising\nand unpromising. But we soon saw we needed a third: promising\npeople with unpromising ideas.\n\n[\n1\n]\nThe Artix Phase\nWe should have expected this. It's very common for a group of\nfounders to go through one lame idea before realizing that a startup\nhas to make something",
    "realizing that a startup\nhas to make something people will pay for. In fact, we ourselves\ndid.\nViaweb wasn't the first startup Robert Morris and I started. In\nJanuary 1995, we and a couple friends started a company called\nArtix. The plan was to put art galleries on the Web. In retrospect,\nI wonder how we could have wasted our time on anything so stupid.\nGalleries are not especially \nexcited\n about",
    "are not especially \nexcited\n about being on\nthe Web even now, ten years later. They don't want to have their\nstock visible to any random visitor, like an antique store. \n\n[\n2\n]\nBesides which, art dealers are the most technophobic people on\nearth. They didn't become art dealers after a difficult choice\nbetween that and a career in the hard sciences. Most of them had\nnever seen the Web before we",
    "Most of them had\nnever seen the Web before we came to tell them why they should be\non it. Some didn't even have computers. It doesn't do justice to\nthe situation to describe it as a hard \nsell\n; we soon sank\nto building sites for free, and it was hard to convince galleries\neven to do that.\nGradually it dawned on us that \ninstead of trying to make Web sites for\npeople who didn't want them, we could",
    "sites for\npeople who didn't want them, we could make sites for\npeople who did. In fact, software that would let people who wanted\nsites make their own. So we ditched Artix and\nstarted a new company, Viaweb, to make software for building online stores.\nThat one succeeded.\nWe're in good company here. Microsoft was not the first company\nPaul Allen and Bill Gates started either. The first was",
    "Allen and Bill Gates started either. The first was called\nTraf-o-data. \nIt does not seem to have done as well as Micro-soft.\n\nIn Robert's defense, he was skeptical about Artix. I dragged him\ninto it. \n\n[\n3\n]\n\nBut there were moments when he was optimistic. And\nif we, who were 29 and 30 at the time, could get excited about such\na thoroughly boneheaded idea, we should not be surprised that",
    "boneheaded idea, we should not be surprised that hackers\naged 21 or 22 are pitching us ideas with little hope of making money.\nThe Still Life Effect\nWhy does this happen? Why do good hackers have bad business ideas?\nLet's look at our case. One reason we had such a lame idea was\nthat it was the first thing we thought of. I was in New York trying\nto be a starving artist at the time (the starving",
    "be a starving artist at the time (the starving part is actually\nquite easy), so I was haunting galleries anyway. When I learned\nabout the Web, it seemed natural to mix the two. Make Web sites\nfor galleries—that's the ticket!\nIf you're going to spend years working on something, you'd think\nit might be wise to spend at least a couple days considering different\nideas, instead of going with the first",
    "different\nideas, instead of going with the first that comes into your head.\nYou'd think. But people don't. In fact, this is a constant problem\nwhen you're painting still lifes. You plonk down a bunch of stuff\non a table, and maybe spend five or ten minutes rearranging it to \nlook interesting. But you're so impatient to get started painting\nthat ten minutes of rearranging feels very long. So you",
    "ten minutes of rearranging feels very long. So you start\npainting. Three days later, having spent twenty hours staring at\nit, you're kicking yourself for having set up such an awkward and \nboring composition, but by then it's too late.\nPart of the problem is that big projects tend to grow out of small\nones. You set up a still life to make a quick sketch when you have\na spare hour, and days later",
    "sketch when you have\na spare hour, and days later you're still working on it. I once\nspent a month painting three versions of a still life I set up in\nabout four minutes. At each point (a day, a week, a month) I thought\nI'd already put in so much time that it was too late to change.\nSo the biggest cause of bad ideas is the still life effect: you \ncome up with a random idea, plunge into it, and",
    "come up with a random idea, plunge into it, and then at each point\n(a day, a week, a month) feel you've put so much time into it that\nthis must be \nthe\n idea.\nHow do we fix that? I don't think we should discard plunging. \nPlunging into an idea is a good thing. The solution is at the other\nend: to realize that having invested time in something doesn't make\nit good.\nThis is clearest in the case of",
    "make\nit good.\nThis is clearest in the case of names. Viaweb was originally\ncalled Webgen, but we discovered someone else had a product called\nthat. We were so attached to our name that we offered him \n5%\nof the company\n if he'd let us have it. But he wouldn't, so\nwe had to think of another. \n\n[\n4\n]\n\nThe best we could do was Viaweb,\nwhich we disliked at first. It was like having a new mother. But",
    "at first. It was like having a new mother. But \nwithin three days we loved it, and Webgen sounded lame and\nold-fashioned.\nIf it's hard to change something so simple as a name, imagine\nhow hard it is to garbage-collect an idea. A name only has one \npoint of attachment into your head. An idea for a company gets\nwoven into your thoughts. So you must consciously discount for \nthat. Plunge in, by all",
    "consciously discount for \nthat. Plunge in, by all means, but remember later to look at your \nidea in the harsh light of morning and ask: is this something people\nwill pay for? Is this, of all the things we could make, the thing\npeople will pay most for?\nMuck\nThe second mistake we made with Artix is also very common. Putting\ngalleries on the Web seemed cool.\nOne of the most valuable things my",
    "seemed cool.\nOne of the most valuable things my father taught me is an old\nYorkshire saying: where there's muck, there's brass. Meaning that \nunpleasant work pays. And more to the point here, vice versa. Work\npeople like doesn't pay well, for reasons of supply and demand.\nThe most extreme case is developing programming languages, which\ndoesn't pay at all, because people like it so much they do it",
    "at all, because people like it so much they do it for \nfree.\nWhen we started Artix, I was still ambivalent about business. I\nwanted to keep one foot in the art world. Big, big, mistake. Going\ninto business is like a hang-glider launch: you'd better do it \nwholeheartedly, or not at all. The purpose of a company, and a\nstartup especially, is to make money. You can't have divided\nloyalties.\nWhich is",
    "money. You can't have divided\nloyalties.\nWhich is not to say that you have to do the most disgusting sort \nof work, like spamming, or starting a company whose only purpose \nis patent litigation. What I mean is, if you're starting a company\nthat will do something cool, the aim had better be to make money \nand maybe be cool, not to be cool and maybe make money.\nIt's hard enough to make money that",
    "make money.\nIt's hard enough to make money that you can't do it by accident.\nUnless it's your first priority, it's unlikely to happen at all.\nHyenas\nWhen I probe our motives with Artix, I see a third mistake: timidity.\nIf you'd proposed at the time that we go into the e-commerce business,\nwe'd have found the idea terrifying. Surely a field like that would\nbe dominated by fearsome startups with",
    "that would\nbe dominated by fearsome startups with five million dollars of VC\nmoney each. Whereas we felt pretty sure that we could hold our own\nin the slightly less competitive business of generating Web sites \nfor art galleries.\nWe erred ridiculously far on the side of safety. As it turns out,\nVC-backed startups are not that fearsome. They're too busy trying\nto spend all that \n\nmoney\n to get",
    "too busy trying\nto spend all that \n\nmoney\n to get software written. In 1995, the\ne-commerce business was very competitive as measured in press\nreleases, but not as measured in software. And really it never\nwas. The big fish like Open Market (rest their souls) were just\nconsulting companies pretending to be product companies \n\n[\n5\n]\n, and \nthe offerings at our end of the market were a couple",
    "offerings at our end of the market were a couple hundred lines\nof Perl scripts. Or could have been implemented as a couple hundred\nlines of Perl; in fact they were probably tens of thousands of lines\nof C++ or Java. Once we actually took the plunge into e-commerce,\nit turned out to be surprisingly easy to compete.\nSo why were we afraid? We felt we were good at programming, but\nwe lacked confidence",
    "were good at programming, but\nwe lacked confidence in our ability to do a mysterious, undifferentiated\nthing we called \"business.\" In fact there is no such thing as\n\"business.\" There's selling, promotion, figuring out what people\nwant, deciding how much to charge, customer support, paying your\nbills, getting customers to pay you, getting incorporated, raising\nmoney, and so on. And the combination",
    "raising\nmoney, and so on. And the combination is not as hard as it seems, \nbecause some tasks (like raising money and getting incorporated)\nare an O(1) pain in the ass, whether you're big or small, and others\n(like selling and promotion) depend more on energy and imagination\nthan any kind of special training.\nArtix was like a hyena, content to survive on carrion because we\nwere afraid of the",
    "survive on carrion because we\nwere afraid of the lions. Except the lions turned out not to have \nany teeth, and the business of putting galleries online barely\nqualified as carrion.\nA Familiar Problem\nSum up all these sources of error, and it's no wonder we had such\na bad idea for a company. We did the first thing we thought of;\nwe were ambivalent about being in business at all; and we",
    "ambivalent about being in business at all; and we deliberately\nchose an impoverished market to avoid competition.\nLooking at the applications for the Summer Founders Program, I see\nsigns of all three. But the first is by far the biggest problem. \nMost of the groups applying have not stopped to ask: of all the \nthings we could do, is \nthis\n the one with the best chance of\nmaking money?\nIf they'd",
    "with the best chance of\nmaking money?\nIf they'd already been through their Artix phase, they'd have learned\nto ask that. After the reception we got from art dealers, we were\nready to. This time, we thought, let's make something people want.\nReading the \nWall Street Journal\n for a week should give anyone\nideas for two or three new startups. The articles are full of\ndescriptions of problems that",
    "articles are full of\ndescriptions of problems that need to be solved. But most of the\napplicants don't seem to have looked far for ideas.\nWe expected the most common proposal to be for multiplayer games.\nWe were not far off: this was the second most common. \nThe most common was some combination of a blog, a calendar,\na dating site, and Friendster. Maybe there is some new killer app\nto be",
    "Maybe there is some new killer app\nto be discovered here, but it seems perverse to go poking around\nin this fog when there are valuable, unsolved problems lying about\nin the open for anyone to see. Why did no one propose a new scheme \nfor micropayments? An ambitious project, perhaps, but I can't \nbelieve we've considered every alternative. And newspapers and\nmagazines are (literally) dying for a",
    "and\nmagazines are (literally) dying for a solution.\nWhy did so few applicants really think about what customers want?\nI think the problem with many, as with people in their early twenties\ngenerally, is that they've been trained their whole lives to jump\nthrough predefined hoops. They've spent 15-20 years solving problems\nother people have set for them. And how much time deciding what \nproblems",
    "them. And how much time deciding what \nproblems would be good to solve? Two or three course projects? \n\nThey're good at solving problems, but bad at choosing them.\nBut that, I'm convinced, is just the effect of training. Or more\nprecisely, the effect of grading. To make grading efficient,\neveryone has to solve the same problem, and that means it has to\nbe decided in advance. It would be great if",
    "has to\nbe decided in advance. It would be great if schools taught students\nhow to choose problems as well as how to solve them, but I don't\nknow how you'd run such a class in practice.\nCopper and Tin\nThe good news is, choosing problems is something that can be learned.\nI know that from experience. Hackers can learn to make things\ncustomers want. \n\n[\n6\n]\nThis is a controversial view. One expert on",
    "is a controversial view. One expert on \"entrepreneurship\"\ntold me that any startup had to include business people, because\nonly they could focus on what customers wanted. I'll probably\nalienate this guy forever by quoting him, but I have to risk it,\nbecause his email was such a perfect example of this view:\n\n \n 80% of MIT spinoffs succeed \nprovided\n they \n have at least one management person in",
    "they \n have at least one management person in the team at the start. The \n business person represents the \"voice of the customer\" and that's\n what keeps the engineers and product development on track.\n\nThis is, in my opinion, a crock. Hackers are perfectly capable of\nhearing the voice of the customer without a business person to\namplify the signal for them. Larry Page and Sergey Brin were",
    "signal for them. Larry Page and Sergey Brin were grad\nstudents in computer science, which presumably makes them \"engineers.\"\nDo you suppose Google is only good because they had some business\nguy whispering in their ears what customers wanted? It seems to \nme the business guys who did the most for Google were the ones who \nobligingly flew Altavista into a hillside just as Google was",
    "flew Altavista into a hillside just as Google was getting\nstarted.\nThe hard part about figuring out what customers want is figuring \nout that you need to figure it out. But that's something you can\nlearn quickly. It's like seeing the other interpretation of an\nambiguous picture. As soon as someone tells you there's a rabbit\nas well as a duck, it's hard not to see it.\nAnd compared to the sort of",
    "hard not to see it.\nAnd compared to the sort of problems hackers are used to solving,\ngiving customers what they want is easy. Anyone who can write an \noptimizing compiler can design a UI that doesn't confuse users, \nonce they \nchoose\n to focus on that problem. And once you \napply that kind of brain power to petty but profitable questions, \nyou can create wealth very rapidly.\nThat's the essence of",
    "create wealth very rapidly.\nThat's the essence of a startup: having brilliant people do work\nthat's beneath them. Big companies try to hire the right person\nfor the job. Startups win because they don't—because they take\npeople so smart that they would in a big company be doing \"research,\"\nand set them to work instead on problems of the most immediate and\nmundane sort. Think Einstein designing",
    "and\nmundane sort. Think Einstein designing refrigerators.\n\n[\n7\n]\nIf you want to learn what people want, read\nDale Carnegie's \nHow to Win Friends and Influence People.\n\n[\n8\n]\n\nWhen a friend recommended this book, I couldn't believe he was\nserious. But he insisted it was good, so I read it, and he was \nright. It deals with the most difficult problem in human experience:\nhow to see things from other",
    "in human experience:\nhow to see things from other people's point of view, instead of\nthinking only of yourself.\nMost smart people don't do that very well. But adding this ability\nto raw brainpower is like adding tin to copper. The result is\nbronze, which is so much harder that it seems a different metal.\nA hacker who has learned what to make, and not just how to make,\nis extraordinarily powerful.",
    "not just how to make,\nis extraordinarily powerful. And not just at making money: look\nwhat a small group of volunteers has achieved with Firefox.\nDoing an Artix teaches you to make something people want in the\nsame way that not drinking anything would teach you how much you\ndepend on water. But it would be more convenient for all involved\nif the Summer Founders didn't learn this on our dime—if",
    "Summer Founders didn't learn this on our dime—if they could\nskip the Artix phase and go right on to make something customers\nwanted. That, I think, is going to be the real experiment this \nsummer. How long will it take them to grasp this?\n We decided\nwe ought to have T-Shirts for the SFP, and we'd been thinking about \nwhat to print on the back. Till now we'd been planning to use\n\nIf you can read",
    "now we'd been planning to use\n\nIf you can read this, I should be working.\n\nbut now we've decided it's going to be\n\nMake something people want.\n\nNotes\n[\n1\n] \nSFP applicants: please don't assume that not being accepted\nmeans we think your idea is bad. Because we want to keep the\nnumber of startups small this first summer, we're going to have \nto turn down some good proposals too.\n[\n2\n] \nDealers try",
    "down some good proposals too.\n[\n2\n] \nDealers try to give each customer the impression that the stuff\nthey're showing him is something special that only a few people \nhave seen, when in fact it may have been sitting in their racks for\nyears while they tried to unload it on buyer after buyer.\n[\n3\n] \nOn the other hand, he was skeptical about Viaweb too. I have\na precise measure of that, because at",
    "too. I have\na precise measure of that, because at one point in the first couple\nmonths we made a bet: if he ever made a million dollars out of \nViaweb, he'd get his ear pierced. We didn't let him \n\noff\n, either.\n[\n4\n] \nI wrote a program to generate all the combinations of \"Web\" \nplus a three letter word. I learned from this that most three \nletter words are bad: Webpig, Webdog, Webfat, Webzit,",
    "words are bad: Webpig, Webdog, Webfat, Webzit, Webfug. But\none of them was Webvia; I swapped them to make Viaweb.\n[\n5\n] \nIt's much easier to sell services than a product, just as it's\neasier to make a living playing at weddings than by selling recordings. \nBut the margins are greater on products. So during the \nBubble a lot of companies used consulting to generate revenues\nthey could attribute to",
    "to generate revenues\nthey could attribute to the sale of products, because it made a\nbetter story for an IPO.\n[\n6\n] \nTrevor Blackwell presents the following recipe for a startup: \n\"Watch people who have money to spend, see what they're wasting\ntheir time on, cook up a solution, and try selling it to them. It's \nsurprising how small a problem can be and still provide a profitable\nmarket for a",
    "can be and still provide a profitable\nmarket for a solution.\"\n[\n7\n] \nYou need to offer especially large rewards to get great people\nto do tedious work. That's why startups always pay equity rather\nthan just salary.\n[\n8\n] \nBuy an \nold\n \ncopy from the 1940s or 50s instead of the current edition, which has been\nrewritten to suit present fashions. The original edition contained\na few unPC ideas, but",
    "original edition contained\na few unPC ideas, but it's always better to read an original book,\nbearing in mind that it's a book from a past era, than to read a\nnew version sanitized for your protection.\nThanks\n to Bill Birch, Trevor Blackwell, Jessica Livingston,\nand Robert Morris for reading drafts of this.\nRussian Translation\nItalian Translation\nJapanese Translation\n\nIf you liked this, you may",
    "Translation\n\nIf you liked this, you may also like\n\nHackers & Painters\n.",
    "What the Bubble Got Right\n\nWhat the Bubble Got Right\n\nSeptember 2004\n(This essay is derived from an invited talk at ICFP 2004.)\nI had a front row seat for the Internet Bubble,\nbecause I worked at Yahoo during 1998 and 1999. One day,\nwhen the stock was trading around $200, I sat down and calculated\nwhat I thought the price should be. The \nanswer I got was $12. I went to\nthe next cubicle and told my",
    "was $12. I went to\nthe next cubicle and told my friend Trevor. \"Twelve!\" he said.\nHe tried to sound indignant, but he didn't quite manage it. He\nknew as well as I did that our valuation was crazy.\nYahoo was a special case. It was not just our price to earnings\nratio that was bogus. Half our earnings were too. Not in\nthe Enron way, of course. The finance guys seemed\nscrupulous about reporting",
    "The finance guys seemed\nscrupulous about reporting earnings. What made our\nearnings bogus was that Yahoo was, in effect, the center of\na Ponzi scheme. Investors looked at Yahoo's earnings\nand said to themselves, here is proof that Internet companies can make\nmoney. So they invested in new\nstartups that promised to be the next Yahoo. And as soon as these startups\ngot the money, what did they do",
    "as these startups\ngot the money, what did they do with it?\nBuy millions of dollars worth of advertising on Yahoo to promote\ntheir brand. Result: a capital investment in a startup this\nquarter shows up as Yahoo earnings next quarter—stimulating\nanother round of investments in startups.\nAs in a Ponzi scheme, what seemed to be the returns of this system\nwere simply the latest round of investments in",
    "simply the latest round of investments in it.\nWhat made it not a Ponzi scheme was that it was unintentional. \nAt least, I think it was. The venture capital business is pretty incestuous,\nand there were presumably people in a position, if not to create\nthis situation, to realize what was happening and to milk it.\nA year later the game was up. Starting in January 2000, Yahoo's\nstock price began to",
    "in January 2000, Yahoo's\nstock price began to crash, ultimately losing 95% of its\nvalue.\nNotice, though, that even with all the fat trimmed off its market\ncap, Yahoo was still worth a lot. Even at the morning-after\nvaluations of March and April 2001, the people at Yahoo had managed\nto create a company worth about $8 billion in just six years.\nThe fact is, despite all the nonsense we heard\nduring",
    "fact is, despite all the nonsense we heard\nduring the Bubble about the \"new economy,\" there was a\ncore of truth. You need\nthat to get a really big bubble: you need to have something\nsolid at the center, so that even smart people are sucked in.\n(Isaac Newton and Jonathan Swift both lost money\nin the South Sea Bubble of 1720.)\nNow the pendulum has swung the other way. Now anything that\nbecame",
    "has swung the other way. Now anything that\nbecame fashionable during the Bubble is ipso facto unfashionable.\nBut that's a mistake—an even bigger mistake than believing\nwhat everyone was saying in 1999. Over the long term,\nwhat the Bubble got right will be more important than what\nit got wrong.\n1. Retail VC\nAfter the excesses of the Bubble, it's now\nconsidered dubious to take companies public",
    "now\nconsidered dubious to take companies public before they have earnings.\nBut there is nothing intrinsically wrong with\nthat idea. Taking a company public at an early stage is simply\nretail VC: instead of going to venture capital firms for the last round of\nfunding, you go to the public markets.\nBy the end of the Bubble, companies going public with no\nearnings were being derided as \"concept",
    "with no\nearnings were being derided as \"concept stocks,\" as if it\nwere inherently stupid to invest in them.\nBut investing in concepts isn't stupid; it's what VCs do,\nand the best of them are far from stupid.\nThe stock of a company that doesn't yet have earnings is \nworth \nsomething.\n\nIt may take a while for the market to learn\nhow to value such companies, just as it had to learn to\nvalue common",
    "companies, just as it had to learn to\nvalue common stocks in the early 20th century. But markets\nare good at solving that kind of problem. I wouldn't be\nsurprised if the market ultimately did a better\njob than VCs do now.\nGoing public early will not be the right plan\nfor every company.\nAnd it can of course be\ndisruptive—by distracting the management, or by making the early\nemployees suddenly rich.",
    "or by making the early\nemployees suddenly rich. But just as the market will learn\nhow to value startups, startups will learn how to minimize\nthe damage of going public.\n2. The Internet\nThe Internet genuinely is a big deal. That was one reason\neven smart people were fooled by the Bubble. Obviously \nit was going to have a huge effect. Enough of an effect to\ntriple the value of Nasdaq companies in",
    "effect to\ntriple the value of Nasdaq companies in two years? No, as it\nturned out. But it was hard to say for certain at the time. [1]\nThe same thing happened during the Mississippi and South Sea Bubbles.\nWhat drove them was the invention of organized public finance\n(the South Sea Company, despite its name, was really a competitor\nof the Bank of England). And that did turn out to be\na big deal, in",
    "And that did turn out to be\na big deal, in the long run.\nRecognizing an important trend turns out to be easier than \nfiguring out how to profit from it. The mistake\ninvestors always seem to make is to take the trend too literally.\nSince the Internet was the big new thing, investors supposed\nthat the more Internettish the company, the better. Hence\nsuch parodies as Pets.Com.\nIn fact most of the",
    "parodies as Pets.Com.\nIn fact most of the money to be made from big trends is made\nindirectly. It was not the railroads themselves that \nmade the most money during the railroad boom, but the companies\non either side, like Carnegie's steelworks, which made the rails,\nand Standard Oil, which used railroads to get oil to the East Coast,\nwhere it could be shipped to Europe.\nI think the Internet will",
    "be shipped to Europe.\nI think the Internet will have great effects,\nand that what we've seen so far is nothing compared to what's\ncoming. But most of the winners will only indirectly be\nInternet companies; for every Google there will be ten\nJetBlues.\n3. Choices\nWhy will the Internet have great effects? The general \nargument is that new forms of communication always do. They happen\nrarely (till",
    "communication always do. They happen\nrarely (till industrial times there were just speech, writing, and printing),\nbut when they do, they always cause a big splash.\nThe specific argument, or one of them, is the Internet gives us \nmore choices. In the \"old\" economy,\nthe high cost of presenting information to people meant they\nhad only a narrow range of options to choose from. The tiny,\nexpensive",
    "of options to choose from. The tiny,\nexpensive pipeline to consumers was tellingly named \"the channel.\"\nControl the channel and you\ncould feed them what you wanted, on your terms. And it\nwas not just big corporations that depended\non this principle. So, in their way, did\nlabor unions, the traditional news media,\nand the art and literary establishments.\nWinning depended not on doing good work, but",
    "depended not on doing good work, but on gaining control\nof some bottleneck.\nThere are signs that this is changing.\nGoogle has over 82 million unique users a month and\nannual revenues of about three billion dollars. [2]\nAnd yet have you ever seen\na Google ad?\nSomething is going on here.\nAdmittedly, Google is an extreme case. It's very easy for\npeople to switch to a new search engine. It costs",
    "to switch to a new search engine. It costs little\neffort and no money to try a new one, and it's easy to\nsee if the results are better. And so Google doesn't \nhave\n\nto advertise. In a business like theirs, being the best is\nenough.\nThe exciting thing about the Internet is that it's\nshifting everything in that direction.\nThe hard part, if you want to win by making the best stuff,\nis the beginning.",
    "to win by making the best stuff,\nis the beginning. Eventually everyone\nwill learn by word of mouth that you're the best,\nbut how do you survive to that point? And it is in this crucial\nstage that the Internet has the most effect. First, the\nInternet lets anyone find you at almost zero cost.\nSecond, it dramatically speeds up the rate at which\nreputation spreads by word of mouth. Together these mean",
    "spreads by word of mouth. Together these mean that in many\nfields the rule will be: Build it, and they will come.\nMake something great and put it online.\nThat is a big change from the recipe for winning in the\npast century.\n4. Youth\nThe aspect of the Internet Bubble that the press seemed most\ntaken with was the youth of some of the startup founders.\nThis too is a trend that will last.\nThere is a",
    "too is a trend that will last.\nThere is a huge standard deviation among 26 year olds. Some\nare fit only for entry level jobs, but others are\nready to rule the world if they can find someone to handle\nthe paperwork for them.\nA 26 year old may not be very good at managing people or\ndealing with the SEC. Those require experience.\nBut those are also commodities, which can be handed off to\nsome",
    "also commodities, which can be handed off to\nsome lieutenant. The most important quality in a CEO is his\nvision for the company's future. What will they build next?\nAnd in that department, there are 26 year olds who can\ncompete with anyone.\nIn 1970 a company president meant someone in his fifties, at\nleast. If he had technologists working for him, they were \ntreated like a racing stable: prized,",
    "they were \ntreated like a racing stable: prized, but not powerful. But \nas technology has grown more important, the power of nerds\nhas grown to reflect it. Now it's not enough for a CEO to\nhave someone smart he can ask about technical matters. Increasingly,\nhe has to be that person himself.\nAs always, business has clung to old forms. VCs still seem\nto want to install a legitimate-looking \ntalking",
    "want to install a legitimate-looking \ntalking head as the CEO. But increasingly the founders of\nthe company are the real powers, and the grey-headed man\ninstalled by the VCs more like a\nmusic group's manager than a general.\n5. Informality\nIn New York, the Bubble had dramatic consequences:\nsuits went out of fashion. They made one seem old. So in\n1998 powerful New York types were suddenly",
    "So in\n1998 powerful New York types were suddenly wearing\nopen-necked shirts and khakis and oval wire-rimmed glasses,\njust like guys in Santa Clara.\nThe pendulum has swung back a bit, driven in part by a panicked\nreaction by the clothing industry. But I'm betting on the\nopen-necked shirts. And this is not as frivolous a question\nas it might seem. Clothes are important, as all nerds can",
    "seem. Clothes are important, as all nerds can sense,\nthough they may not realize it consciously.\nIf you're a nerd, you can understand how important clothes are\nby asking yourself how you'd feel about a company\nthat made you wear a suit and tie to work. The idea sounds\nhorrible, doesn't it? In fact, horrible far out of proportion\nto the mere discomfort of wearing such clothes. A company that\nmade",
    "of wearing such clothes. A company that\nmade programmers wear suits would have something deeply wrong\nwith it.\nAnd what would be wrong would be that how one presented oneself\ncounted more than the quality of one's ideas. \nThat's\n\nthe problem with formality. Dressing up is not so much bad in\nitself. The problem is the receptor it binds to: dressing\nup is inevitably a substitute\nfor good ideas. It",
    "is inevitably a substitute\nfor good ideas. It is no coincidence that technically\ninept business types are known as \"suits.\"\nNerds don't just happen to dress informally. They do it too\nconsistently. Consciously or not, they dress informally as\na prophylactic measure against stupidity.\n6. Nerds\nClothing is only the most visible battleground in the war\nagainst formality. Nerds tend to eschew",
    "in the war\nagainst formality. Nerds tend to eschew formality of any sort.\nThey're not impressed by one's job title, for example,\nor any of the other appurtenances of authority.\nIndeed, that's practically the definition of a nerd. I found\nmyself talking recently to someone from Hollywood who was planning\na show about nerds. I thought it would be useful if I\nexplained what a nerd was. What I came up",
    "if I\nexplained what a nerd was. What I came up with was: someone who\ndoesn't expend any effort on marketing himself.\nA nerd, in other words, is someone who concentrates on substance.\nSo what's the connection between nerds and technology? Roughly\nthat you can't fool mother nature. In technical matters, you\nhave to get the right answers. If your software miscalculates\nthe path of a space probe, you",
    "miscalculates\nthe path of a space probe, you can't finesse your way out of\ntrouble by saying that your code is patriotic, or avant-garde,\nor any of the other dodges people use in nontechnical\nfields.\nAnd as technology becomes increasingly important in the\neconomy, nerd culture is \n\nrising\n with it. Nerds are already\na lot cooler than they were when I was a kid. When I was in\ncollege in the",
    "when I was a kid. When I was in\ncollege in the mid-1980s, \"nerd\" was still an insult. People\nwho majored in computer science generally tried to conceal it.\nNow women ask me where they can meet nerds. (The answer that\nsprings to mind is \"Usenix,\" but that would be like drinking\nfrom a firehose.)\nI have no illusions about why nerd culture is becoming\nmore accepted. It's not because people",
    "is becoming\nmore accepted. It's not because people are\nrealizing that substance is more important than marketing.\nIt's because the nerds are getting \nrich. But that is not going\nto change.\n7. Options\nWhat makes the nerds rich, usually, is stock options. Now there\nare moves afoot to make it harder for companies to grant \noptions. To the extent there's some genuine accounting abuse \ngoing on, by all",
    "some genuine accounting abuse \ngoing on, by all means correct it. But don't kill the golden \ngoose. Equity is the fuel that drives technical innovation.\nOptions are a good idea because (a) they're fair, and (b) they\nwork. Someone who goes to work for a company is (one hopes) \nadding to its value, and it's only fair to give them a share\nof it. And as a purely practical measure, people work a",
    "And as a purely practical measure, people work a \nlot\n\nharder when they have options. I've seen that first hand.\nThe fact that a few crooks during the Bubble robbed their\ncompanies by granting themselves options doesn't mean options\nare a bad idea. During the railroad boom, some executives\nenriched themselves by selling watered stock—by issuing more\nshares than they said were outstanding. But that",
    "than they said were outstanding. But that doesn't \nmake common stock a bad idea. Crooks just use whatever\nmeans are available.\nIf there is a problem with options, it's that they reward\nslightly the wrong thing. Not surprisingly, people do what you\npay them to. If you pay them by the hour, they'll work a lot of\nhours. If you pay them by the volume of work done, they'll\nget a lot of work done (but",
    "of work done, they'll\nget a lot of work done (but only as you defined work).\nAnd if you pay them to raise the\nstock price, which is what options amount to, they'll raise\nthe stock price.\nBut that's not quite what you want. What you want is to\nincrease the actual value of the company, not its market cap.\nOver time the two inevitably meet, but not always as quickly\nas options vest. Which means",
    "not always as quickly\nas options vest. Which means options tempt employees, if\nonly unconsciously, to \"pump and dump\"—to do things\nthat will make the company \nseem\n valuable.\nI found that when I was at Yahoo, I couldn't help thinking, \n\"how will this sound to investors?\" when I should have been\nthinking \"is this a good idea?\"\nSo maybe the standard option deal needs to be tweaked slightly.\nMaybe",
    "option deal needs to be tweaked slightly.\nMaybe options should be replaced with something tied more\ndirectly to earnings. It's still early days.\n8. Startups\nWhat made the options valuable, for the most part, is\nthat they were options on the stock of \n\nstartups\n. Startups \nwere not of course a creation of the Bubble, but they\nwere more visible during the Bubble than ever before.\nOne thing most",
    "during the Bubble than ever before.\nOne thing most people did learn about for the first time\nduring the Bubble was the startup\ncreated with the intention of selling it.\nOriginally a\nstartup meant a small company that hoped to grow into a\nbig one. But increasingly startups are evolving into a\nvehicle for developing technology on spec.\nAs I wrote in\n\nHackers & Painters\n, employees seem to be",
    "in\n\nHackers & Painters\n, employees seem to be most\nproductive when they're paid in proportion to the wealth\nthey generate. And the advantage of a startup—indeed, \nalmost its raison d'etre—is that it offers something\notherwise impossible to obtain: a way of \nmeasuring\n that.\nIn many businesses, it just makes more sense for companies\nto get technology by buying startups rather than developing \nit in",
    "by buying startups rather than developing \nit in house. You pay more, but there is less risk,\nand risk is what big companies don't want. It makes the\nguys developing the technology more accountable, because they\nonly get paid if they build the winner. And you end up \nwith better technology, created faster, because things are\nmade in the innovative atmosphere of startups instead of \nthe",
    "innovative atmosphere of startups instead of \nthe bureaucratic atmosphere of big companies.\nOur startup, Viaweb, was built to be sold. We were open\nwith investors about that from the start. And we were \ncareful to create something that could slot easily into a\nlarger company. That is the pattern for the future.\n9. California\nThe Bubble was a California phenomenon. When I showed up\nin Silicon",
    "California phenomenon. When I showed up\nin Silicon Valley in 1998, I felt like an immigrant from\nEastern Europe arriving in America in 1900. Everyone\nwas so cheerful and healthy and rich. It seemed a new\nand improved world.\nThe press, ever eager to exaggerate small trends, now gives \none the impression that Silicon Valley is a ghost town.\nNot at all. When I drive down 101 from the airport,\nI still",
    "When I drive down 101 from the airport,\nI still feel a buzz of energy, as if there were a giant\ntransformer nearby. Real estate is still more expensive\nthan just about anywhere else in the country. The people \nstill look healthy, and the weather is still fabulous.\nThe future is there.\n(I say \"there\" because I moved back to the East Coast after\nYahoo. I still wonder if this was a smart idea.)\nWhat",
    "I still wonder if this was a smart idea.)\nWhat makes the Bay Area superior is the attitude of the\npeople. I notice that when I come home to Boston.\nThe first thing I see when I walk out of the airline terminal\nis the fat, grumpy guy in\ncharge of the taxi line. I brace myself for rudeness:\n\nremember, you're back on the East Coast now.\nThe atmosphere varies from city to city, and fragile\norganisms",
    "varies from city to city, and fragile\norganisms like startups are exceedingly sensitive to such variation.\nIf it hadn't already been hijacked as a new euphemism\nfor liberal, the word to describe the atmosphere in\nthe Bay Area would be \"progressive.\" People there are trying\nto build the future.\nBoston has MIT and Harvard, but it also has a lot of\ntruculent, unionized employees like the police",
    "of\ntruculent, unionized employees like the police who\nrecently held the Democratic National Convention for \n\nransom\n, and a lot of people trying to be\n Thurston Howell.\nTwo sides of an obsolete coin.\nSilicon Valley may not be the next Paris or London, but it\nis at least the next Chicago. For the next fifty years, \nthat's where new wealth will come from.\n10. Productivity\nDuring the Bubble,",
    "come from.\n10. Productivity\nDuring the Bubble, optimistic analysts used to justify high\nprice to earnings ratios by saying that technology was going \nto increase productivity dramatically. They were wrong about\nthe specific companies, but not so wrong about the underlying\nprinciple. I think one of the big trends we'll see in the\ncoming century is a huge increase in productivity.\nOr more precisely,",
    "huge increase in productivity.\nOr more precisely, a huge increase in \nvariation\n in\nproductivity. Technology is a lever. It doesn't add; \nit multiplies. If the present range of productivity is \n0 to 100, introducing a multiple of 10 increases the range\nfrom 0 to 1000.\nOne upshot of which is that the companies of the future may\nbe surprisingly small. I sometimes daydream about how big\nyou could",
    "I sometimes daydream about how big\nyou could grow a company (in revenues) without ever having\nmore than ten people. What would happen if you outsourced\neverything except product development? If you tried this experiment,\nI think you'd be surprised at how far you could get. \nAs Fred Brooks pointed out, small groups are\nintrinsically more productive, because the\ninternal friction in a group grows as",
    "because the\ninternal friction in a group grows as the\nsquare of its size.\nTill quite recently, running a major company\nmeant managing an army of workers. Our standards about how\nmany employees a company should have are still influenced by\nold patterns. Startups are perforce small, because they can't\nafford to hire a lot of people. But I think it's a big mistake for\ncompanies to loosen their belts",
    "a big mistake for\ncompanies to loosen their belts as revenues increase. The\nquestion is not whether you can afford the extra salaries. \nCan you afford the loss in productivity that comes from making\nthe company bigger?\nThe prospect of technological leverage will of course raise the\nspecter of unemployment. I'm surprised people still worry about\nthis.\nAfter centuries of supposedly job-killing",
    "centuries of supposedly job-killing innovations,\nthe number of jobs is within ten percent of the number of people\nwho want them. This can't be a coincidence. There must be some\nkind of balancing mechanism.\nWhat's New\nWhen one looks over these trends, is there any overall theme?\nThere does seem to be: that in the coming century, good ideas\nwill count for more. That 26\nyear olds with good ideas will",
    "for more. That 26\nyear olds with good ideas will increasingly have an edge over 50\nyear olds with powerful connections. That doing good work will\nmatter more than dressing up—or advertising, which is the\nsame thing for companies. That people\nwill be rewarded a bit more in proportion to the value of what\nthey create.\nIf so, this is good news indeed.\nGood ideas always tend to win eventually. The",
    "ideas always tend to win eventually. The problem is,\nit can take a very long time.\nIt took decades for relativity to be accepted, and the\ngreater part of a century to establish that central planning didn't work.\nSo even a small increase in the\nrate at which good ideas win would be a momentous\nchange—big enough, probably, to justify a name like\nthe \"new economy.\"\nNotes\n[1] Actually it's hard to say",
    "\"new economy.\"\nNotes\n[1] Actually it's hard to say now. As Jeremy Siegel points\nout, if the value of a stock is its future earnings, you \ncan't tell if it was overvalued till you see what the earnings\nturn out to be. While certain famous Internet stocks were\nalmost certainly overvalued in 1999, it is still hard to say for sure\nwhether, e.g., the Nasdaq index was.\nSiegel, Jeremy J. \"What Is an",
    "Nasdaq index was.\nSiegel, Jeremy J. \"What Is an Asset Price Bubble? An\nOperational Definition.\" \nEuropean Financial Management,\n\n9:1, 2003.\n[2] The number of users comes from a 6/03 Nielsen\nstudy quoted on Google's site. (You'd think they'd have\nsomething more recent.) The revenue estimate is based on\nrevenues of $1.35 billion for the first half of 2004, as\nreported in their IPO filing.\nThanks\n to",
    "2004, as\nreported in their IPO filing.\nThanks\n to Chris Anderson, Trevor Blackwell, Sarah Harlin, Jessica\nLivingston, and Robert Morris for reading drafts of this.\nThe Long Tail\nRussian Translation\nJapanese Translation",
    "It's Charisma, Stupid\n\nIt's Charisma, Stupid\n\nNovember 2004, corrected June 2006\nOccam's razor says we should prefer the simpler of two explanations.\nI begin by reminding readers of this principle because I'm about\nto propose a theory that will offend both liberals and conservatives.\nBut Occam's razor means, in effect, that if you want to disagree\nwith it, you have a hell of a coincidence to",
    "it, you have a hell of a coincidence to explain.\nTheory: In US presidential elections, the more \ncharismatic candidate wins.\nPeople who write about politics, whether on the left or the right,\nhave a consistent bias: they take politics seriously. When one\ncandidate beats another they look for political explanations. The\ncountry is shifting to the left, or the right. And that sort of\nshift can",
    "the left, or the right. And that sort of\nshift can certainly be the result of a presidential election, which\nmakes it easy to believe it was the cause.\nBut when I think about why I voted for Clinton over the first George\nBush, it wasn't because I was shifting to the left. Clinton just\nseemed more dynamic. He seemed to want the job more. Bush seemed\nold and tired. I suspect it was the same for a",
    "and tired. I suspect it was the same for a lot of voters.\nClinton didn't represent any national shift leftward.\n\n[\n1\n]\n\nHe was\njust more charismatic than George Bush or (God help us) Bob Dole.\nIn 2000 we practically got a controlled experiment to prove it:\nGore had Clinton's policies, but not his charisma, and he suffered\nproportionally. \n\n[\n2\n]\n\nSame story in 2004. Kerry was smarter and",
    "[\n2\n]\n\nSame story in 2004. Kerry was smarter and more\narticulate than Bush, but rather a stiff. And Kerry lost.\nAs I looked further back, I kept finding the same pattern. \nPundits said Carter beat Ford\nbecause the country distrusted the Republicans after Watergate.\nAnd yet it also happened that Carter was famous for his big grin\nand folksy ways, and Ford for being a boring klutz. Four",
    "ways, and Ford for being a boring klutz. Four years\nlater, pundits said the country had lurched to the right. But\nReagan, a former actor, also happened to be even more charismatic\nthan Carter (whose grin was somewhat less cheery after four stressful\nyears in office). In 1984 the charisma gap between Reagan and\nMondale was like that between Clinton and Dole, with similar results.\nThe first George",
    "and Dole, with similar results.\nThe first George Bush managed to win in 1988, though he would later\nbe vanquished by one of the most charismatic presidents ever, because\nin 1988 he was up against the notoriously uncharismatic\nMichael Dukakis.\nThese are the elections I remember personally, but apparently the\nsame pattern played out in 1964 and 1972. The most recent\ncounterexample appears to be",
    "1972. The most recent\ncounterexample appears to be 1968, when Nixon beat the more charismatic Hubert\nHumphrey. But when you examine that election, it tends to support\nthe charisma theory more than contradict it. As Joe McGinnis\nrecounts in his famous book \nThe Selling of the President 1968\n,\nNixon knew he had less charisma than Humphrey, and thus simply\nrefused to debate him on TV. He knew he",
    "simply\nrefused to debate him on TV. He knew he couldn't afford to let the\ntwo of them be seen side by side.\nNow a candidate probably couldn't get away with refusing to debate.\nBut in 1968 the custom of televised debates was still evolving. In\neffect, Nixon won in 1968 because voters were never allowed to see\nthe real Nixon. All they saw were carefully scripted campaign\nspots.\nOddly enough, the",
    "scripted campaign\nspots.\nOddly enough, the most recent true counterexample is probably 1960.\nThough this election is usually given as an example of the power\nof TV, Kennedy apparently would not have won without fraud by party\nmachines in Illinois and Texas. But TV was still young in 1960;\nonly 87% of households had it.\n\n[\n3\n]\n\nUndoubtedly TV helped Kennedy,\nso historians are correct in regarding",
    "Kennedy,\nso historians are correct in regarding this election as a\nwatershed. TV required a new kind of candidate. There would be no\nmore Calvin Coolidges.\nThe charisma theory may also explain why Democrats tend to lose\npresidential elections. The core of the Democrats' ideology seems\nto be a belief in government. Perhaps this tends to attract people\nwho are earnest, but dull. Dukakis, Gore, and",
    "are earnest, but dull. Dukakis, Gore, and Kerry were so similar\nin that respect that they might have been brothers. Good thing for\nthe Democrats that their screen lets through an occasional Clinton,\neven if some scandal results. \n\n[\n4\n]\nOne would like to believe elections are won and lost on issues, if\nonly fake ones like Willie Horton. And yet, if they are, we have\na remarkable coincidence to",
    "if they are, we have\na remarkable coincidence to explain. In every presidential election\nsince TV became widespread, the apparently more charismatic candidate\nhas won. Surprising, isn't it, that voters' opinions on the issues\nhave lined up with charisma for 11 elections in a row?\nThe political commentators who come up with shifts to the left or\nright in their morning-after analyses are like the",
    "in their morning-after analyses are like the financial reporters\nstuck writing stories day after day about the random fluctuations\nof the stock market. Day ends, market closes up or down, reporter\nlooks for good or bad news respectively, and writes that the market\nwas up on news of Intel's earnings, or down on fears of instability\nin the Middle East. Suppose we could somehow feed these",
    "Middle East. Suppose we could somehow feed these reporters\nfalse information about market closes, but give them all the other\nnews intact. Does anyone believe they would notice the anomaly,\nand not simply write that stocks were up (or down) on whatever good\n(or bad) news there was that day? That they would say, hey, wait\na minute, how can stocks be up with all this unrest in the Middle\nEast?\nI'm",
    "be up with all this unrest in the Middle\nEast?\nI'm not saying that issues don't matter to voters. Of course they\ndo. But the major parties know so well which issues matter how\nmuch to how many voters, and adjust their message so precisely in\nresponse, that they tend to split the difference on the issues,\nleaving the election to be decided by the one factor they can't\ncontrol: charisma.\nIf the",
    "one factor they can't\ncontrol: charisma.\nIf the Democrats had been running a candidate as charismatic as\nClinton in the 2004 election, he'd have won. And we'd be reading\nthat the election was a referendum on the war in Iraq, instead of\nthat the Democrats are out of touch with evangelical Christians in\nmiddle America.\nDuring the 1992 election, the Clinton campaign staff had a big sign\nin their"
  ],
  "ids": [
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29",
    "30",
    "31",
    "32",
    "33",
    "34",
    "35",
    "36",
    "37",
    "38",
    "39",
    "40",
    "41",
    "42",
    "43",
    "44",
    "45",
    "46",
    "47",
    "48",
    "49",
    "50",
    "51",
    "52",
    "53",
    "54",
    "55",
    "56",
    "57",
    "58",
    "59",
    "60",
    "61",
    "62",
    "63",
    "64",
    "65",
    "66",
    "67",
    "68",
    "69",
    "70",
    "71",
    "72",
    "73",
    "74",
    "75",
    "76",
    "77",
    "78",
    "79",
    "80",
    "81",
    "82",
    "83",
    "84",
    "85",
    "86",
    "87",
    "88",
    "89",
    "90",
    "91",
    "92",
    "93",
    "94",
    "95",
    "96",
    "97",
    "98",
    "99",
    "100",
    "101",
    "102",
    "103",
    "104",
    "105",
    "106",
    "107",
    "108",
    "109",
    "110",
    "111",
    "112",
    "113",
    "114",
    "115",
    "116",
    "117",
    "118",
    "119",
    "120",
    "121",
    "122",
    "123",
    "124",
    "125",
    "126",
    "127",
    "128",
    "129",
    "130",
    "131",
    "132",
    "133",
    "134",
    "135",
    "136",
    "137",
    "138",
    "139",
    "140",
    "141",
    "142",
    "143",
    "144",
    "145",
    "146",
    "147",
    "148",
    "149",
    "150",
    "151",
    "152",
    "153",
    "154",
    "155",
    "156",
    "157",
    "158",
    "159",
    "160",
    "161",
    "162",
    "163",
    "164",
    "165",
    "166",
    "167",
    "168",
    "169",
    "170",
    "171",
    "172",
    "173",
    "174",
    "175",
    "176",
    "177",
    "178",
    "179",
    "180",
    "181",
    "182",
    "183",
    "184",
    "185",
    "186",
    "187",
    "188",
    "189",
    "190",
    "191",
    "192",
    "193",
    "194",
    "195",
    "196",
    "197",
    "198",
    "199",
    "200",
    "201",
    "202",
    "203",
    "204",
    "205",
    "206",
    "207",
    "208",
    "209",
    "210",
    "211",
    "212",
    "213",
    "214",
    "215",
    "216",
    "217",
    "218",
    "219",
    "220",
    "221",
    "222",
    "223",
    "224",
    "225",
    "226",
    "227",
    "228",
    "229",
    "230",
    "231",
    "232",
    "233",
    "234",
    "235",
    "236",
    "237",
    "238",
    "239",
    "240",
    "241",
    "242",
    "243",
    "244",
    "245",
    "246",
    "247",
    "248",
    "249",
    "250",
    "251",
    "252",
    "253",
    "254",
    "255",
    "256",
    "257",
    "258",
    "259",
    "260",
    "261",
    "262",
    "263",
    "264",
    "265",
    "266",
    "267",
    "268",
    "269",
    "270",
    "271",
    "272",
    "273",
    "274",
    "275",
    "276",
    "277",
    "278",
    "279",
    "280",
    "281",
    "282",
    "283",
    "284",
    "285",
    "286",
    "287",
    "288",
    "289",
    "290",
    "291",
    "292",
    "293",
    "294",
    "295",
    "296",
    "297",
    "298",
    "299",
    "300",
    "301",
    "302",
    "303",
    "304",
    "305",
    "306",
    "307",
    "308",
    "309",
    "310",
    "311",
    "312",
    "313",
    "314",
    "315",
    "316",
    "317",
    "318",
    "319",
    "320",
    "321",
    "322",
    "323",
    "324",
    "325",
    "326",
    "327",
    "328",
    "329",
    "330",
    "331",
    "332",
    "333",
    "334",
    "335",
    "336",
    "337",
    "338",
    "339",
    "340",
    "341",
    "342",
    "343",
    "344",
    "345",
    "346",
    "347",
    "348",
    "349",
    "350",
    "351",
    "352",
    "353",
    "354",
    "355",
    "356",
    "357",
    "358",
    "359",
    "360",
    "361",
    "362",
    "363",
    "364",
    "365",
    "366",
    "367",
    "368",
    "369",
    "370",
    "371",
    "372",
    "373",
    "374",
    "375",
    "376",
    "377",
    "378",
    "379",
    "380",
    "381",
    "382",
    "383",
    "384",
    "385",
    "386",
    "387",
    "388",
    "389",
    "390",
    "391",
    "392",
    "393",
    "394",
    "395",
    "396",
    "397",
    "398",
    "399",
    "400",
    "401",
    "402",
    "403",
    "404",
    "405",
    "406",
    "407",
    "408",
    "409",
    "410",
    "411",
    "412",
    "413",
    "414",
    "415",
    "416",
    "417",
    "418",
    "419",
    "420",
    "421",
    "422",
    "423",
    "424",
    "425",
    "426",
    "427",
    "428",
    "429",
    "430",
    "431",
    "432",
    "433",
    "434",
    "435",
    "436",
    "437",
    "438",
    "439",
    "440",
    "441",
    "442",
    "443",
    "444",
    "445",
    "446",
    "447",
    "448",
    "449",
    "450",
    "451",
    "452",
    "453",
    "454",
    "455",
    "456",
    "457",
    "458",
    "459",
    "460",
    "461",
    "462",
    "463",
    "464",
    "465",
    "466",
    "467",
    "468",
    "469",
    "470",
    "471",
    "472",
    "473",
    "474",
    "475",
    "476",
    "477",
    "478",
    "479",
    "480",
    "481",
    "482",
    "483",
    "484",
    "485",
    "486",
    "487",
    "488",
    "489",
    "490",
    "491",
    "492",
    "493",
    "494",
    "495",
    "496",
    "497",
    "498",
    "499",
    "500",
    "501",
    "502",
    "503",
    "504",
    "505",
    "506",
    "507",
    "508",
    "509",
    "510",
    "511",
    "512",
    "513",
    "514",
    "515",
    "516",
    "517",
    "518",
    "519",
    "520",
    "521",
    "522",
    "523",
    "524",
    "525",
    "526",
    "527",
    "528",
    "529",
    "530",
    "531",
    "532",
    "533",
    "534",
    "535",
    "536",
    "537",
    "538",
    "539",
    "540",
    "541",
    "542",
    "543",
    "544",
    "545",
    "546",
    "547",
    "548",
    "549",
    "550",
    "551",
    "552",
    "553",
    "554",
    "555",
    "556",
    "557",
    "558",
    "559",
    "560",
    "561",
    "562",
    "563",
    "564",
    "565",
    "566",
    "567",
    "568",
    "569",
    "570",
    "571",
    "572",
    "573",
    "574",
    "575",
    "576",
    "577",
    "578",
    "579",
    "580",
    "581",
    "582",
    "583",
    "584",
    "585",
    "586",
    "587",
    "588",
    "589",
    "590",
    "591",
    "592",
    "593",
    "594",
    "595",
    "596",
    "597",
    "598",
    "599",
    "600",
    "601",
    "602",
    "603",
    "604",
    "605",
    "606",
    "607",
    "608",
    "609",
    "610",
    "611",
    "612",
    "613",
    "614",
    "615",
    "616",
    "617",
    "618",
    "619",
    "620",
    "621",
    "622",
    "623",
    "624",
    "625",
    "626",
    "627",
    "628",
    "629",
    "630",
    "631",
    "632",
    "633",
    "634",
    "635",
    "636",
    "637",
    "638",
    "639",
    "640",
    "641",
    "642",
    "643",
    "644",
    "645",
    "646",
    "647",
    "648",
    "649",
    "650",
    "651",
    "652",
    "653",
    "654",
    "655",
    "656",
    "657",
    "658",
    "659",
    "660",
    "661",
    "662",
    "663",
    "664",
    "665",
    "666",
    "667",
    "668",
    "669",
    "670",
    "671",
    "672",
    "673",
    "674",
    "675",
    "676",
    "677",
    "678",
    "679",
    "680",
    "681",
    "682",
    "683",
    "684",
    "685",
    "686",
    "687",
    "688",
    "689",
    "690",
    "691",
    "692",
    "693",
    "694",
    "695",
    "696",
    "697",
    "698",
    "699",
    "700",
    "701",
    "702",
    "703",
    "704",
    "705",
    "706",
    "707",
    "708",
    "709",
    "710",
    "711",
    "712",
    "713",
    "714",
    "715",
    "716",
    "717",
    "718",
    "719",
    "720",
    "721",
    "722",
    "723",
    "724",
    "725",
    "726",
    "727",
    "728",
    "729",
    "730",
    "731",
    "732",
    "733",
    "734",
    "735",
    "736",
    "737",
    "738",
    "739",
    "740",
    "741",
    "742",
    "743",
    "744",
    "745",
    "746",
    "747",
    "748",
    "749",
    "750",
    "751",
    "752",
    "753",
    "754",
    "755",
    "756",
    "757",
    "758",
    "759",
    "760",
    "761",
    "762",
    "763",
    "764",
    "765",
    "766",
    "767",
    "768",
    "769",
    "770",
    "771",
    "772",
    "773",
    "774",
    "775",
    "776",
    "777",
    "778",
    "779",
    "780",
    "781",
    "782",
    "783",
    "784",
    "785",
    "786",
    "787",
    "788",
    "789",
    "790",
    "791",
    "792",
    "793",
    "794",
    "795",
    "796",
    "797",
    "798",
    "799",
    "800",
    "801",
    "802",
    "803",
    "804",
    "805",
    "806",
    "807",
    "808",
    "809",
    "810",
    "811",
    "812",
    "813",
    "814",
    "815",
    "816",
    "817",
    "818",
    "819",
    "820",
    "821",
    "822",
    "823",
    "824",
    "825",
    "826",
    "827",
    "828",
    "829",
    "830",
    "831",
    "832",
    "833",
    "834",
    "835",
    "836",
    "837",
    "838",
    "839",
    "840",
    "841",
    "842",
    "843",
    "844",
    "845",
    "846",
    "847",
    "848",
    "849",
    "850",
    "851",
    "852",
    "853",
    "854",
    "855",
    "856",
    "857",
    "858",
    "859",
    "860",
    "861",
    "862",
    "863",
    "864",
    "865",
    "866",
    "867",
    "868",
    "869",
    "870",
    "871",
    "872",
    "873",
    "874",
    "875",
    "876",
    "877",
    "878",
    "879",
    "880",
    "881",
    "882",
    "883",
    "884",
    "885",
    "886",
    "887",
    "888",
    "889",
    "890",
    "891",
    "892",
    "893",
    "894",
    "895",
    "896",
    "897",
    "898",
    "899",
    "900",
    "901",
    "902",
    "903",
    "904",
    "905",
    "906",
    "907",
    "908",
    "909",
    "910",
    "911",
    "912",
    "913",
    "914",
    "915",
    "916",
    "917",
    "918",
    "919",
    "920",
    "921",
    "922",
    "923",
    "924",
    "925",
    "926",
    "927",
    "928",
    "929",
    "930",
    "931",
    "932",
    "933",
    "934",
    "935",
    "936",
    "937",
    "938",
    "939",
    "940",
    "941",
    "942",
    "943",
    "944",
    "945",
    "946",
    "947",
    "948",
    "949",
    "950",
    "951",
    "952",
    "953",
    "954",
    "955",
    "956",
    "957",
    "958",
    "959",
    "960",
    "961",
    "962",
    "963",
    "964",
    "965",
    "966",
    "967",
    "968",
    "969",
    "970",
    "971",
    "972",
    "973",
    "974",
    "975",
    "976",
    "977",
    "978",
    "979",
    "980",
    "981",
    "982",
    "983",
    "984",
    "985",
    "986",
    "987",
    "988",
    "989",
    "990",
    "991",
    "992",
    "993",
    "994",
    "995",
    "996",
    "997",
    "998",
    "999"
  ],
  "metadatas": [
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  ]
}